{"version":3,"file":"request.js","sourceRoot":"/","sources":["utils/validations/request.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoanRequest } from '../../components/loanRequest';\nimport * as contractService from '../../components/contract/contract/contract.service';\nimport { apiPriceBtc } from '../apiPriceBtc';\nimport { convertFromUSDC } from '../coinConversion/convertFromUSDC';\nimport { ISettings } from '../../components/settings/settings';\n\nexport async function getValidAmounts(\n  userId: string,\n  maxNumberBlocks: number,\n  blockAmount: number\n) {\n  const contractsUser = await contractService.aggregate([\n    {\n      $match: {\n        $and: [\n          {\n            borrower: userId,\n          },\n          {\n            status: 'concluded',\n          },\n        ],\n        $nor: [\n          {\n            preCancel: true,\n          },\n        ],\n      },\n    },\n    {\n      $count: 'count',\n    },\n  ]);\n\n  const sumAmountContractActive = await contractService.aggregate([\n    {\n      $match: {\n        $and: [\n          {\n            borrower: userId,\n          },\n          {\n            status: 'active',\n          },\n        ],\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        amount: {\n          $sum: '$amountInUSDC',\n        },\n      },\n    },\n  ]);\n\n  const sumAmountLoanRequestActive = await LoanRequest.aggregate([\n    {\n      $match: {\n        $and: [\n          {\n            borrower: userId,\n          },\n          {\n            status: 'active',\n          },\n        ],\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        amount: {\n          $sum: '$amountInUSDC',\n        },\n      },\n    },\n  ]);\n\n  const sumContractsRequestAmount =\n    (sumAmountContractActive[0]?.amount ?? 0) +\n    (sumAmountLoanRequestActive[0]?.amount ?? 0);\n\n  const arrOfAmounts = [];\n\n  const blocksAvailable =\n    contractsUser?.[0]?.count > maxNumberBlocks\n      ? maxNumberBlocks ?? 0\n      : contractsUser?.[0]?.count ?? 0;\n\n  for (let i = 1; i <= blocksAvailable + 1; i += 1) {\n    const amount = (blockAmount ?? 0) * i;\n    arrOfAmounts.push(amount);\n  }\n\n  return { arrOfAmounts, sumContractsRequestAmount };\n}\n\nexport async function validateRequestFee(\n  currency: string,\n  settings: ISettings,\n  amount: number,\n  user\n) {\n  const btcPrice = await apiPriceBtc();\n\n  const serviceFee = await convertFromUSDC(\n    currency.toLowerCase(),\n    btcPrice,\n    settings.contractFees.borrowerRequestFee.type === 'percentage'\n      ? (settings.contractFees.borrowerRequestFee.value * amount) / 100\n      : settings.contractFees.borrowerRequestFee.value\n  );\n\n  const userLoanRequest = await LoanRequest.findOne({ borrower: user.id });\n\n  return { userLoanRequest, serviceFee };\n}\n"]}