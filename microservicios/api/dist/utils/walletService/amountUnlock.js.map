{"version":3,"file":"amountUnlock.js","sourceRoot":"/","sources":["utils/walletService/amountUnlock.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,oDAAiD;AASjD;;;;;;;GAOG;AAEH,SAAsB,aAAa,CAAC,IAAoB;;QACtD,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEpE,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,6BAAa,CAAC,oBAAoB,CAAC,CAAC;SAC/C;QAED,MAAM,MAAM,GAAG;YACb,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW;YAChC,GAAG,EAAE,mBAAmB,OAAO,EAAE;YACjC,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,KAAK,EAAE;aACjC;YACD,IAAI,EAAE;gBACJ,UAAU;gBACV,MAAM;gBACN,cAAc;aACf;SACF,CAAC;QAEF,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,MAAM,CAAC,CAAC;YAErC,IAAI,CAAC,IAAI,CAAC,OAAO;gBACf,MAAM,IAAI,6BAAa,CAAC,mCAAmC,CAAC,CAAC;YAE/D,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,mCAAmC,CAAC,CAAC;YACxD,MAAM,IAAI,6BAAa,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;SACvE;IACH,CAAC;CAAA;AAhCD,sCAgCC","sourcesContent":["import axios from 'axios';\nimport { NoSentryError } from '../NoSentryError';\n\nexport interface TUnlockBalance {\n  token: string;\n  toWalletId: string;\n  amount: number;\n  destServiceFee: number;\n  blockId: string;\n}\n/**\n *\n * @param token token received from app\n * @param toWalletId wallet id that receives amount\n * @param amount blocked amount\n * @param destServiceFee fee to take from destination\n * @param blockId blocked amount id\n */\n\nexport async function unlockBalance(body: TUnlockBalance): Promise<any> {\n  const { token, toWalletId, amount, destServiceFee, blockId } = body;\n\n  if (!token) {\n    throw new NoSentryError('Token not provided');\n  }\n\n  const config = {\n    method: 'post',\n    baseURL: process.env.SERVICE_URL,\n    url: `/wallet/unblock/${blockId}`,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n    data: {\n      toWalletId,\n      amount,\n      destServiceFee,\n    },\n  };\n\n  try {\n    const { data } = await axios(config);\n\n    if (!data.success)\n      throw new NoSentryError('Error unblocking amount in wallet');\n\n    return data;\n  } catch (error) {\n    console.log(error, 'Error unblocking amount in wallet');\n    throw new NoSentryError(`Error unblocking amount in wallet ${error}`);\n  }\n}\n"]}