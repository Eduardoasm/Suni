{"version":3,"file":"userBalanceLock.js","sourceRoot":"/","sources":["utils/walletService/userBalanceLock.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,oDAAiD;AASjD;;;;;;;GAOG;AAEH,SAAsB,WAAW,CAAC,IAAkB;;QAClD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAEhE,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,6BAAa,CAAC,oBAAoB,CAAC,CAAC;SAC/C;QAED,MAAM,MAAM,GAAG;YACb,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW;YAChC,GAAG,EAAE,iBAAiB,QAAQ,EAAE;YAChC,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,KAAK,EAAE;aACjC;YACD,IAAI,EAAE;gBACJ,MAAM;gBACN,SAAS;gBACT,OAAO,EAAE,MAAM;gBACf,UAAU;aACX;SACF,CAAC;QACF,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,MAAM,CAAC,CAAC;YAErC,IAAI,CAAC,IAAI,CAAC,OAAO;gBACf,MAAM,IAAI,6BAAa,CAAC,iCAAiC,CAAC,CAAC;YAE7D,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAC;YACtD,MAAM,IAAI,6BAAa,CAAC,iCAAiC,CAAC,CAAC;SAC5D;IACH,CAAC;CAAA;AAhCD,kCAgCC","sourcesContent":["import axios from 'axios';\nimport { NoSentryError } from '../NoSentryError';\n\nexport interface TLockBalance {\n  token: string;\n  walletId: string;\n  amount: number;\n  expiresAt: Date;\n  serviceFee: number;\n}\n/**\n *\n * @param token token received from app\n * @param walletId wallet received from app\n * @param amount amount to block\n * @param expiresAt block expiration date\n * @param serviceFee fee to take from wallet\n */\n\nexport async function balanceLock(body: TLockBalance): Promise<any> {\n  const { token, walletId, amount, expiresAt, serviceFee } = body;\n\n  if (!token) {\n    throw new NoSentryError('Token not provided');\n  }\n\n  const config = {\n    method: 'post',\n    baseURL: process.env.SERVICE_URL,\n    url: `/wallet/block/${walletId}`,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n    data: {\n      amount,\n      expiresAt,\n      service: 'loan',\n      serviceFee,\n    },\n  };\n  try {\n    const { data } = await axios(config);\n\n    if (!data.success)\n      throw new NoSentryError('Error blocking amount in wallet');\n\n    return data;\n  } catch (error) {\n    console.log(error, 'Error blocking amount in wallet');\n    throw new NoSentryError('Error blocking amount in wallet');\n  }\n}\n"]}