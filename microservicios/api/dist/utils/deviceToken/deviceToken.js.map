{"version":3,"file":"deviceToken.js","sourceRoot":"/","sources":["utils/deviceToken/deviceToken.ts"],"names":[],"mappings":";;;AAEA;;;;;;GAMG;AAEH,SAAgB,QAAQ,CACtB,KAAa,EACb,YAA4B;IAE5B,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,YAAY,CAAC;KACrB;IAED,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;IAElE,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,cAAc,CAAC,CAAC,GAAG,YAAY,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;KAC7E;IAED,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACzC,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,EAAE;YACrB,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;SAC1C;QAED,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC,YAAY,CAAC,CAAC;AACtC,CAAC;AAvBD,4BAuBC;AAED,SAAgB,WAAW,CACzB,KAAa,EACb,YAA4B;IAE5B,MAAM,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;IAEtE,OAAO,cAAc,CAAC,eAAe,CAAC,CAAC;AACzC,CAAC;AAPD,kCAOC;AAED,SAAgB,cAAc,CAAC,YAA4B;IACzD,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAE1C,MAAM,cAAc,GAAG,YAAY,CAAC,MAAM,CACxC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,IAAI,CAC5D,CAAC;IAEF,OAAO,cAAc,CAAC;AACxB,CAAC;AARD,wCAQC","sourcesContent":["import { IDeviceToken } from '../../components/user/deviceToken';\n\n/**\n * Searches for received token in user devices to update\n * timestamp or add it to array and removes old tokens.\n * @param {string} token Received token from app\n * @param {IDeviceToken[]} deviceTokens Array of user device tokens\n * @returns {IDeviceToken[]} Updated user device tokens\n */\n\nexport function addToken(\n  token: string,\n  deviceTokens: IDeviceToken[]\n): IDeviceToken[] {\n  if (!token) {\n    return deviceTokens;\n  }\n\n  const deviceToken = deviceTokens.filter((t) => t.token === token);\n\n  if (!deviceToken) {\n    return removeOldToken([...deviceTokens, { token, timestamps: new Date() }]);\n  }\n\n  const _deviceToken = deviceToken.map((e) => {\n    if (e.token === token) {\n      return { token, timestamps: new Date() };\n    }\n\n    return e;\n  });\n\n  return removeOldToken(_deviceToken);\n}\n\nexport function removeToken(\n  token: string,\n  deviceTokens: IDeviceToken[]\n): IDeviceToken[] {\n  const removeTokenUser = deviceTokens.filter((t) => t.token !== token);\n\n  return removeOldToken(removeTokenUser);\n}\n\nexport function removeOldToken(deviceTokens: IDeviceToken[]): IDeviceToken[] {\n  const time = 2 * 30 * 60 * 60 * 60 * 1000;\n\n  const newDeviceToken = deviceTokens.filter(\n    (t) => new Date().getTime() - t.timestamps.getTime() < time\n  );\n\n  return newDeviceToken;\n}\n"]}