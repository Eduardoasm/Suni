{"version":3,"file":"creditScore.controller.js","sourceRoot":"/","sources":["components/creditScore/creditScore.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable import/no-cycle */\nimport type { Request, Response, NextFunction } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport { CreditScoreTC, ICreditScore } from './creditScore.model';\nimport * as creditScoreService from './creditScore.service';\nimport {\n  TCredolabData,\n  CredolabDataInput,\n  CreditScoreType,\n  CredolabDataType,\n  GetCreditScoreUserInput\n} from './creditScore.dto';\n\nexport const getCreditScoreUser = schemaComposer.createResolver<any>\n({\n  name:'getCreditScoreUser',\n  description: 'get credit score credolab or suni for user',\n  kind: 'query',\n  type: CreditScoreType,\n  args: {\n    data: GetCreditScoreUserInput,\n  },\n  async resolve({ args, context }) {\n    const token =\n    context.req.headers?.authorization\n    const creditScore = await creditScoreService.getCreditScoreUser(args?.data, token)\n    return creditScore\n  }\n})\n\n\n// export const uploadCreditScore = schemaComposer.createResolver<\n// any,\n// {\n//   data: TCredolabData,\n// }\n// >({\n//   name: 'uploadCreditScore',\n//   description: 'upload the credit score in credolab',\n//   kind: 'mutation',\n//   type: CredolabDataType,\n//   args: {\n//     data: CredolabDataInput,\n//   },\n//   async resolve ({ args, context }) {\n//     const token = \n//     context.req.cookies?.token ?? context.req.headers['x-token'];\n//     const creditScore = await creditScoreService.credolab(token, args.data)\n//     return creditScore\n//   }\n// })\n\n// export const userCreditScore = schemaComposer.createResolver<\n// any\n// >({\n//   name: 'userCreditScore',\n//   kind: 'query',\n//   description: 'get creditScore in user',\n//   type: CreditScoreType,\n//   async resolve({ context }) {\n//     const token = \n//     context?.req.cookies?.token ?? context.req.headers['x-token'];\n//     const creditScore = await creditScoreService.getCreditScoreCredolab(token)\n//     return creditScore;\n//   }\n// })\n\nconst creditScoreQueries = {\n  creditScore: CreditScoreTC.mongooseResolvers.findOne(),\n  creditScores: CreditScoreTC.mongooseResolvers.findMany({\n    limit: { defaultValue: 1000000 },\n  }),\n  creditScorePagination: CreditScoreTC.mongooseResolvers.pagination(),\n  // userCreditScore,\n};\n\nconst creditScoreMutations = {\n  updatecreditScore: CreditScoreTC.mongooseResolvers.updateOne(),\n  createcreditScore: CreditScoreTC.mongooseResolvers.createOne(),\n  // uploadCreditScore,\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const creditScore = await creditScoreService.find({});\n    return res.status(200).json({ success: true, creditScore });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const creditScore = await creditScoreService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, creditScore });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const creditScore = await creditScoreService.create(req.body);\n    return res.status(200).json({ success: true, creditScore });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const creditScore = await creditScoreService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, creditScore });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await creditScoreService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\n// export async function credolab( // cuando la persona pague\n//   req: Request,\n//   res: Response,\n//   next: NextFunction,\n// ) {\n\n//     const token = req.cookies?.token ?? req.headers?.token;\n//   const { user } = await currentUser(token);\n\n//   const userCreditScore = user.creditScores[user.creditScores.length - 1];\n\n//   const { referenceNumber } = await creditScoreService.findOne({\n//     _id: userCreditScore._id,\n//   });\n\n  // console.log('soy reference', referenceNumber)\n\n//   const { data, realIp } = req.body; // data e ip\n\n\n//   const { user } = await currentUser(token);\n//   console.log('soy user', user)\n//   if (!user) {\n//     return res.status(401).json({err: 'Usuario no autorizado', success: false})\n//   }\n\n//   const date = new Date().toLocaleDateString();\n\n//   const referenceNumber = `${user._id}${date}`\n\n\n//   console.log('reference', referenceNumber)\n\n//   const key = {\n//     authKey: process.env.AUTH_KEY\n// }\n\n//   const login = await axios.post(\n//     `${process.env.DEFAULT_URL}/api/account/v1/credoAppLogin`, key)\n\n//   const accessToken = login.data.access_token\n\n//   if (!accessToken) {\n//     return res.status(400).json({err: 'invalid Request', success: false})\n//   }\n\n//   const config = {\n//     headers: {\n//       Authorization: `Bearer ${accessToken}`\n//     }\n//   }\n\n//   console.log('soy config', config);\n\n//   const dataInfo = {\n//     referenceNumber,\n//     data,\n//     realIp,\n//   }\n\n//   console.log('soy datainfo', dataInfo);\n\n//   // const uploadData= await axios.post(\n//   //   'https://scoring-demo.credolab.com/api/datasets/v1/upload', dataInfo, config)\n\n//   // console.log('soy uploadaata', uploadData.status);\n\n//   // const { data: score } = await axios.get(\n//   //   `${process.env.DEFAULT_URL}/v6.0/datasets/${referenceNumber}/datasetinsight`)\n\n//   const creditScore: ICreditScore = {\n//     referenceNumber,\n//     value: 12345,\n//     provider: 'credolab',\n//   }\n\n//   if (!user.creditScores.length) {\n//     const createCreditScore = await creditScoreService.create(creditScore)\n\n//     const setScoreUser = await userService.updateOne(\n//       {\n//         _id: user._id\n//       },\n//       {\n//         $push: {\n//           creditScores: createCreditScore._id\n//         }\n//       }\n//     )\n//     return res.status(200).json({msg: 'yes'})\n//   }\n\n\n\n//   res.status(200).send({success: true})\n// }\n\n\n\n\n\nexport { creditScoreQueries, creditScoreMutations };\n"]}