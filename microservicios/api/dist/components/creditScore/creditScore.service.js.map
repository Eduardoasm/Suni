{"version":3,"file":"creditScore.service.js","sourceRoot":"/","sources":["components/creditScore/creditScore.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport axios from 'axios';\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { NoSentryError, paginateModel } from '../../utils';\nimport { ICreditScore, CreditScore } from './creditScore.model';\nimport { currentUser } from '../auth/auth.service';\nimport * as userService from '../user/user/user.service';\nimport { TCredolabData, TGetCreditScoreUser } from './creditScore.dto';\nimport { IUser } from '../user/user';\nimport { getUserInfo } from '../../utils/userInfo';\n\nexport async function findOne(\n  filter?: FilterQuery<ICreditScore>,\n  projection?: ProjectionType<ICreditScore> | null,\n  options?: QueryOptions<ICreditScore> | null\n) {\n  return CreditScore.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ICreditScore>,\n  projection?: ProjectionType<ICreditScore> | null,\n  options?: QueryOptions<ICreditScore> | null\n) {\n  return CreditScore.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ICreditScore>,\n  update: UpdateQuery<ICreditScore> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ICreditScore> | null\n) {\n  return CreditScore.updateOne(filter, update, options).exec();\n}\n\nexport async function create(creditScore: ICreditScore) {\n  return CreditScore.create(creditScore);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ICreditScore>,\n  projection?: ProjectionType<ICreditScore> | null,\n  options?: QueryOptions<ICreditScore> | null\n) {\n  return paginateModel(page, perPage, CreditScore, filter, projection, options);\n}\n\nexport async function getCreditScoreUser(\n  body: TGetCreditScoreUser,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const startDate = new Date(body.startDate);\n  const endDate = new Date(body.endDate);\n  const PROVIDER_CREDOLAB = 'credolab';\n  const PROVIDER_SUNI = 'suni';\n\n  if (body.provider === PROVIDER_CREDOLAB) {\n    const creditScore = await CreditScore.find({\n      $and: [\n        {\n          user: user.id,\n        },\n        {\n          provider: PROVIDER_CREDOLAB,\n        },\n      ],\n    });\n\n    return creditScore;\n  }\n\n  if (body.provider === PROVIDER_SUNI) {\n    const creditScore = await CreditScore.find({\n      $and: [\n        {\n          user: user.id,\n        },\n        {\n          provider: PROVIDER_SUNI,\n        },\n      ],\n    });\n\n    return creditScore;\n  }\n}\n\ninterface DataInfo {\n  referenceNumber: string;\n  data: string;\n  realIp: string;\n}\n\n// async function getCredolabAuthAccessToken(): Promise<string | null> {\n//   // funcion para obtener el access token de credolab con la key de Suni\n//   try {\n//     const { data } = await axios.post(\n//       `${process.env.DEFAULT_URL}/api/account/v1/credoAppLogin`,\n//       {\n//         authKey: process.env.AUTH_KEY,\n//       }\n//     );\n//     return data.access_token;\n//   } catch (error) {\n//     console.log(`Failed to get credolab access token', ${error.message}`);\n//     return null;\n//   }\n// }\n\n// async function uploadCredolabData(\n//   accessToken: string,\n//   dataInfo: DataInfo\n// ): Promise<boolean> {\n//   // funcion para subir data de client en credolab\n//   try {\n//     const { data } = await axios.post(\n//       `${process.env.DEFAULT_URL}/api/datasets/v1/upload`,\n//       dataInfo,\n//       {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//         },\n//       }\n//     );\n//     console.log(`Credolab upload Response ${JSON.stringify(data)}`);\n//     return true;\n//   } catch (error) {\n//     console.log(`Failed to upload data to credolab ${error.message}`);\n//     return false;\n//   }\n// }\n\n// export async function credolab(\n//   token: string,\n//   body: TCredolabData\n// ): Promise<boolean> {\n//   try {\n//     if (!token) {\n//       throw new NoSentryError('User not Authorized');\n//     }\n\n//     const { user } = await currentUser(token);\n\n//     if (!user) {\n//       throw new NoSentryError('No user found');\n//     }\n\n//     const date = new Date().toLocaleDateString();\n\n//     const accessToken = await getCredolabAuthAccessToken();\n\n//     const referenceNumber = `${user._id}${date}`;\n\n//     const dataInfo: DataInfo = {\n//       referenceNumber,\n//       data: body.data,\n//       realIp: body.realIp,\n//     };\n\n//     const uploadData = await uploadCredolabData(accessToken, dataInfo);\n\n//     return uploadData;\n//   } catch (error) {\n//     return false;\n//   }\n// }\n\n// async function getCredolabUserAccessToken(): Promise<string> {\n//   // funcion para obtener access token de usuario adm\n//   try {\n//     const config = {\n//       userEmail: process.env.ADMIN_EMAIL,\n//       password: `${process.env.ADMIN_PASSWORD}#`,\n//     };\n\n//     const { data } = await axios.post(\n//       `${process.env.DEFAULT_URL}/api/account/v1/login`,\n//       config\n//     );\n\n//     return data.access_token;\n//   } catch (error) {\n//     throw new NoSentryError('Failed get access token');\n//   }\n// }\n\n// async function getCredolabUserValues(\n//   accessToken: string,\n//   referenceNumber: string\n// ): Promise<any> {\n//   // function para obtener data credolab de usuario\n//   try {\n//     const options = {\n//       headers: {\n//         Authorization: `Bearer ${accessToken}`,\n//       },\n//     };\n\n//     const { data } = await axios.get(\n//       `${process.env.DEFAULT_URL}/v6.0/datasets/${referenceNumber}/datasetinsight`,\n//       options\n//     );\n\n//     return data;\n//   } catch (error) {\n//     throw new NoSentryError('Failed to get Credolab user values');\n//   }\n// }\n\n// async function createCreditScoreCredolab(\n//   user: IUser,\n//   referenceNumber: string,\n//   data: any\n// ): Promise<UpdateQuery<IUser>> {\n//   // function para actualizar el usuario con el valor de creditscore\n//   try {\n//     const creditScore: ICreditScore = {\n//       referenceNumber,\n//       value: data.scores.value,\n//       provider: 'credolab',\n//     };\n\n//     const createCreditScore = await CreditScore.create(creditScore);\n\n//     const userCreditScore = await userService.updateOne(\n//       {\n//         _id: user._id,\n//       },\n//       {\n//         $push: {\n//           creditScores: createCreditScore._id,\n//         },\n//       }\n//     );\n\n//     return userCreditScore;\n//   } catch (error) {\n//     throw new NoSentryError('Failed to create credit score in user');\n//   }\n// }\n\n// export async function getCreditScoreCredolab(token: string): Promise<any> {\n//   // servicio para obtener el credit score\n//   if (!token) {\n//     return new NoSentryError('User not Authorized');\n//   }\n\n//   const { user } = await currentUser(token);\n\n//   const userCreditScore = user.creditScores[user.creditScores.length - 1];\n\n//   const { referenceNumber } = await CreditScore.findOne({\n//     _id: userCreditScore._id,\n//   });\n\n//   const accessToken = await getCredolabUserAccessToken();\n\n//   const data = await getCredolabUserValues(accessToken, referenceNumber);\n\n//   const userCreditScoreCredolab = await createCreditScoreCredolab(\n//     user,\n//     referenceNumber,\n//     data\n//   );\n\n//   return userCreditScoreCredolab;\n// }\n"]}