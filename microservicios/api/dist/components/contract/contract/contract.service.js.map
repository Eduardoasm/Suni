{"version":3,"file":"contract.service.js","sourceRoot":"/","sources":["components/contract/contract/contract.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-nested-ternary */\n/* eslint-disable import/no-extraneous-dependencies */\nimport mongoose from 'mongoose';\nimport type {\n  AggregateOptions,\n  FilterQuery,\n  PipelineStage,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport xl from 'excel4node';\nimport { Finance } from 'financejs';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport htmlToPdfMake from 'html-to-pdfmake';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport jsdom from 'jsdom';\nimport fs from 'fs';\nimport { paginateModel } from '../../../utils';\nimport { NoSentryError } from '../../../utils/NoSentryError';\nimport { apiPriceBtc } from '../../../utils/apiPriceBtc';\nimport {\n  TGetContractsFilterByStatus,\n  TGetContractsFilterByStatusByClient,\n  TGetByDate,\n  TCreateContract,\n  TGetAmortization,\n  TGetContractsByStatusInput,\n  TGetContractEarning,\n  TGetMyContracts,\n  TSendContract,\n  TGetTransactionsByLenderOrBorrower,\n  TGetContractsFilterByStatusByUser,\n  TGetPreCancelInfo,\n  TPreCancel,\n  TGetUserStats,\n  TGetContractInfo,\n} from './contract.dto';\nimport { IContract, Contract } from './contract.model';\nimport * as settingService from '../../settings/settings/settings.service';\nimport * as loanRequestService from '../../loanRequest/loanRequest.service';\nimport * as loanOfferService from '../../loanOffer/loanOffer.service';\nimport { getDay } from '../../../utils/getDay';\nimport { IPaymentPlan } from '../payment-plan';\nimport { getUserInfo } from '../../../utils/walletService/userInfo';\nimport { unlockBalance } from '../../../utils/walletService/amountUnlock';\nimport { convertFromUSDC } from '../../../utils/coinConversion/convertFromUSDC';\nimport * as currencyService from '../../currency/currency.service';\nimport { getUserWallet } from '../../../utils/walletService';\nimport * as signS3Service from '../../s3/s3.service';\nimport { sendEmail } from '../../../utils/emails/wauEmail';\nimport { getCountryFullName } from '../../../utils/country';\nimport { getMonthString } from '../../../utils/date';\nimport * as notificationService from '../../notification/notification.service';\nimport { formatWallet } from '../../../utils/formatWallet';\nimport { rejectOffers } from '../../../utils/rejectOffers';\nimport { sendNotifications } from '../../../utils/pushNotifications/sendNotification';\nimport { transfer } from '../../../utils/walletService/transfer';\nimport { getValidAmounts } from '../../../utils/validations/request';\nimport { getUserCredits } from '../../../utils/creditHistory/creditsReceived';\nimport { getUserCreditsPaidOnTime } from '../../../utils/creditHistory/creditsPaidOnTime';\nimport { getUserCreditsPaidLate } from '../../../utils/creditHistory/creditsPaidLate';\nimport * as transactionService from '../../transaction/transaction.service';\nimport * as userService from '../../user/user/user.service';\nimport { createNotification } from '../../../utils/avilaServices/createNotification';\nimport * as creditScoreService from '../../creditScore/creditScore/creditScore.service';\n\nexport async function findOne(\n  filter?: FilterQuery<IContract>,\n  projection?: ProjectionType<IContract> | null,\n  options?: QueryOptions<IContract> | null\n) {\n  return Contract.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IContract>,\n  projection?: ProjectionType<IContract> | null,\n  options?: QueryOptions<IContract> | null\n) {\n  return Contract.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IContract>,\n  update: UpdateQuery<IContract> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IContract> | null\n) {\n  return Contract.updateOne(filter, update, options).exec();\n}\n\nexport async function aggregate(\n  pipeline?: PipelineStage[] | null,\n  options?: AggregateOptions | null\n) {\n  return Contract.aggregate(pipeline, options);\n}\n\nexport async function getContractInfo(body: TGetContractInfo) {\n  const contract = await Contract.findById(body?.contractId);\n  const [lenderInfo, borrowerInfo] = await Promise.all([\n    userService.getWAOClient(contract?.lender),\n    userService.getWAOClient(contract?.borrower),\n  ]);\n  const clientsInfo = {\n    lender: {\n      name: lenderInfo?.data?.data?.metamapStatus?.metamapStatus?.dni_firstName\n        ? lenderInfo?.data?.data?.metamapStatus?.dni_firstName\n        : lenderInfo?.data?.data?.name ?? '',\n      lastName: lenderInfo?.data?.data?.metamapStatus?.dni_lastName\n        ? lenderInfo?.data?.data?.metamapStatus?.dni_lastName\n        : lenderInfo?.data?.data?.lastname ?? '',\n      country: lenderInfo?.data?.data?.metamapStatus?.country ?? '',\n      email: lenderInfo?.data?.data?.email ?? '',\n    },\n    borrower: {\n      name: borrowerInfo?.data?.data?.metamapStatus?.metamapStatus\n        ?.dni_firstName\n        ? borrowerInfo?.data?.data?.metamapStatus?.dni_firstName\n        : borrowerInfo?.data?.data?.name ?? '',\n      lastName: borrowerInfo?.data?.data?.metamapStatus?.dni_lastName\n        ? borrowerInfo?.data?.data?.metamapStatus?.dni_lastName\n        : borrowerInfo?.data?.data?.lastname ?? '',\n      country: borrowerInfo?.data?.data?.metamapStatus?.country ?? '',\n      email: borrowerInfo?.data?.data?.email ?? '',\n    },\n  };\n  return { contract, clientsInfo };\n}\n\nexport async function create(\n  body: TCreateContract,\n  token: string\n): Promise<IContract> {\n  const { data: user } = await getUserInfo(token);\n\n  const session = await mongoose.startSession();\n\n  try {\n    session.startTransaction();\n\n    const settings = await settingService.findOne({\n      active: true,\n    });\n\n    const loanRequest = await (\n      await loanRequestService.findOne(\n        {\n          offers: { $in: [body.loanOffer] },\n        },\n        null,\n        { session }\n      )\n    ).populate({\n      path: 'offers',\n      model: 'LoanOffer',\n    });\n\n    if (!loanRequest) {\n      throw new NoSentryError('Loan request does not exist');\n    }\n\n    const borrowerWallet = await getUserWallet(\n      token,\n      loanRequest.selectedWallet\n    );\n\n    const loanOffer = await loanOfferService.findOne(\n      { _id: body.loanOffer },\n      null,\n      { session }\n    );\n\n    if (!loanOffer) throw new NoSentryError('Loan offer does not exist');\n\n    if (loanRequest.borrower !== user.id) {\n      throw new NoSentryError('Contract can only be created by the borrower');\n    }\n\n    const belongs = loanRequest?.offers?.find(\n      (offer) => offer._id.toString() === body.loanOffer.toString()\n    );\n\n    if (!belongs) {\n      throw new NoSentryError('Offer does not belong to request');\n    }\n\n    const borrowerFee: number =\n      settings.contractFees.borrowerFee.type === 'percentage'\n        ? (settings.contractFees.borrowerFee.value * loanRequest.amountInUSDC) /\n          100\n        : settings.contractFees.borrowerFee.value;\n\n    const currency = await currencyService.findOne({\n      _id: loanRequest.selectedWalletCurrency,\n    });\n\n    const btcPrice = await apiPriceBtc();\n\n    const destServiceFee = await convertFromUSDC(\n      currency.symbol.toLowerCase(),\n      btcPrice,\n      borrowerFee\n    );\n\n    const paymentPlan: IPaymentPlan[] = await getPaymentPlan(\n      loanRequest.amountInUSDC,\n      loanOffer.interestRate,\n      loanRequest.installments\n    );\n\n    const createdContract = await Contract.create(\n      [\n        {\n          loanRequest: loanRequest._id,\n          loanOffer: loanOffer._id,\n          lender: loanOffer.lender,\n          borrower: loanRequest.borrower,\n          walletTransactionsCurrency: loanRequest.selectedWalletCurrency,\n          amountInUSDC: loanRequest.amountInUSDC,\n          amountReceivedInWalletTransactionsCurrency:\n            loanOffer.blockedAmountInWalletCurrency,\n          rate: loanOffer.interestRate,\n          startDate: new Date(),\n          paymentPlan,\n          lenderFeeInUSDC: loanOffer.lenderFeeInUSDC,\n          lenderFeeInWalletTransactionsCurrency:\n            loanOffer.lenderFeeInWalletCurrency,\n          borrowerFeeInUSDC: borrowerFee,\n          borrowerFeeInWalletTransactionsCurrency: destServiceFee,\n        },\n      ],\n      { session }\n    );\n\n    loanRequest.status = 'closed';\n    await loanRequest.save();\n\n    loanOffer.status = 'approved';\n    await loanOffer.save();\n\n    await Promise.all(rejectOffers(loanRequest, token, loanOffer, session));\n\n    const notificationLender = await notificationService.create(\n      {\n        user: loanOffer.lender,\n        collectionName: 'contract',\n        message: `Número de contrato: ${createdContract[0].referenceNumber}`, // Contract number\n        subject: 'Se ha creado un contrato', // A contract has been created\n        active: true,\n      },\n      session\n    );\n\n    const notificationBorrower = await notificationService.create(\n      {\n        user: loanOffer.borrower,\n        collectionName: 'contract',\n        message: `Número de contrato: ${createdContract[0].referenceNumber}`, // Contract number\n        subject: 'Se ha creado un contrato', // A contract has been created\n        active: true,\n      },\n      session\n    );\n\n    const paramsPush = {\n      token,\n      userId: loanOffer.lender,\n      title: 'Oferta de préstamo aceptada',\n      message: `Tu oferta ${loanOffer.referenceNumber} ha sido aceptada,\n      se ha creado el contrato ${createdContract[0].referenceNumber} exitosamente`,\n    };\n\n    await sendNotifications(paramsPush);\n\n    await createNotification(\n      // notification Oferta aceptada\n      {\n        messageTemplateId: '65a8341b2d07da37baf04e0c',\n        model: 'contract',\n        module: 'loans',\n        object: createdContract[0]?._id,\n        recipientId: loanOffer?.lender,\n        senderId: user?.id,\n      },\n      token\n    );\n\n    try {\n      await sendContract(\n        {\n          lenderName: loanOffer?.lenderInfo?.name,\n          lenderLastName: loanOffer?.lenderInfo?.lastName,\n          lenderCountry: getCountryFullName(loanOffer?.lenderInfo?.country),\n          lenderDni: loanOffer?.lenderInfo?.dni ?? '',\n          lenderEmail: loanOffer?.lenderInfo?.email,\n          borrowerName: user?.metamapStatus?.dni_firstName ?? user?.name,\n          borrowerLastName: user?.metamapStatus?.dni_lastName ?? user?.lastname,\n          borrowerCountry: getCountryFullName(user?.metamapStatus?.country),\n          borrowerDni: user?.metamapStatus?.dni_value ?? '',\n          borrowerEmail: user?.email,\n          amountInUSDC: createdContract[0]?.amountInUSDC,\n          installments: loanRequest?.installments,\n          firstPaymentDate: paymentPlan?.[0]?.paymentDate,\n          interestRate: createdContract[0]?.rate,\n          moraFee: settings?.contractFees?.moraFee?.value,\n          templateContent: settings?.contract?.templateContent,\n          currentDay: dayjs().date().toString(),\n          currentMonth: getMonthString(dayjs().month()),\n          currentYear: dayjs().year().toString(),\n          requestId: loanRequest?._id?.toString(),\n          offerReferenceNumber: loanOffer?.referenceNumber,\n        },\n        token\n      );\n      await unlockBalance({\n        token,\n        toWalletId: loanRequest.selectedWallet,\n        amount: loanOffer.blockedAmountInWalletCurrency,\n        destServiceFee,\n        blockId: loanOffer.blockId,\n      });\n    } catch (error) {\n      throw new NoSentryError(`Error in send contract ${error.message}`);\n    }\n\n    await session.commitTransaction();\n    await transactionService.createTransaction(\n      {\n        contract: createdContract[0]._id,\n        from: createdContract[0].lender,\n        to: createdContract[0].borrower,\n        amount: createdContract[0].amountInUSDC,\n        lenderFee: createdContract[0].lenderFeeInUSDC,\n        borrowerFee: createdContract[0].borrowerFeeInUSDC,\n        interest: 0,\n        type: 'investment',\n      },\n      createdContract[0].borrower,\n      createdContract[0].lender\n    );\n    return createdContract[0];\n  } catch (error) {\n    await session.abortTransaction();\n    throw new NoSentryError(error);\n  } finally {\n    session.endSession();\n  }\n}\n\nexport async function getTransactionsByLenderOrBorrower(\n  body: TGetTransactionsByLenderOrBorrower\n) {\n  const contracts = await Contract.find({\n    $or: [{ lender: body?.user }, { borrower: body?.user }],\n  });\n  const loanRequests = await Contract.find({\n    borrower: body?.user,\n  });\n  return { contracts, loanRequests };\n}\n\nexport async function getContractsFilterByStatus(\n  body: TGetContractsFilterByStatus,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  if (!user) {\n    throw new NoSentryError('Invalid user');\n  }\n\n  const STATUS = ['active', 'concluded'];\n\n  if (!body.status) {\n    throw new NoSentryError('Please insert a valid status');\n  }\n\n  if (!STATUS.includes(body.status)) {\n    throw new NoSentryError('Please insert a valid status');\n  }\n\n  const contracts = Contract.find({\n    status: body.status,\n  });\n  return contracts;\n}\n\nexport async function getContractsByStatus(\n  body: TGetContractsByStatusInput,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  if (!user) {\n    throw new NoSentryError('Invalid user');\n  }\n  const active = await Contract.find({\n    status: 'active',\n    lender: user?.id ? user?.id : { $ne: null },\n  });\n  const concluded = await Contract.find({\n    status: 'concluded',\n    lender: user?.id ? user?.id : { $ne: null },\n  });\n  const onDefault = await Contract.find({\n    onDefault: true,\n    lender: user?.id ? user?.id : { $ne: null },\n  });\n  const contracts = await Contract.find({\n    lender: user?.id ? user?.id : { $ne: null },\n  });\n  return {\n    active,\n    concluded,\n    onDefault,\n    contracts,\n  };\n}\n\nexport async function getContractsFilterByStatusByClient(\n  body: TGetContractsFilterByStatusByClient,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  if (!user) {\n    throw new NoSentryError('Invalid user');\n  }\n\n  const userContracts = Contract.find({\n    $or: [{ lender: user?.id }, { borrower: user?.id }],\n  });\n\n  return userContracts;\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IContract>,\n  projection?: ProjectionType<IContract> | null,\n  options?: QueryOptions<IContract> | null\n) {\n  return paginateModel(page, perPage, Contract, filter, projection, options);\n}\n\nexport async function incomes() {\n  const contractsData = await Contract.aggregate([\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $group: {\n        _id: { $dateToString: { format: '%Y-%m-%d', date: '$startDate' } },\n        count: { $sum: 1 },\n        lenderFee: {\n          $sum: '$lenderFeeInUSDC',\n        },\n        borrowerFee: {\n          $sum: '$borrowerFeeInUSDC',\n        },\n        paymentPlanFees: {\n          $sum: '$paymentPlan.fees',\n        },\n      },\n    },\n    { $sort: { _id: 1 } },\n  ]);\n\n  const btcPriceInUsd: number = await apiPriceBtc();\n  const btcPriceInSatoshi = 100000000;\n\n  const contracts = contractsData?.map((contract) => {\n    const clientsFeeInUsd =\n      (contract?.lenderFee ?? 0) + (contract?.borrowerFee ?? 0);\n    const clientsFeeInBtc = clientsFeeInUsd / btcPriceInUsd;\n    const clientsFeeInSat = clientsFeeInBtc * btcPriceInSatoshi;\n    const paymentPlanFeesInUSD = contract?.paymentPlanFees ?? 0;\n    const paymentPlanFeesInBtc =\n      paymentPlanFeesInUSD === 0 ? 0 : contract.paymentPlanFees / btcPriceInUsd;\n    const paymentPlanFeesInSat = paymentPlanFeesInBtc * btcPriceInSatoshi;\n    return {\n      date: contract?._id,\n      income: {\n        usd: Number(clientsFeeInUsd + paymentPlanFeesInUSD),\n        btc: clientsFeeInBtc + paymentPlanFeesInBtc,\n        sat: clientsFeeInSat + paymentPlanFeesInSat,\n      },\n      count: contract?.count,\n    };\n  });\n  return contracts;\n}\n\nexport async function income() {\n  const contracts = await Contract.aggregate([\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $group: {\n        _id: '$null',\n        lenderFee: {\n          $sum: '$lenderFee',\n        },\n        borrowerFee: {\n          $sum: '$borrowerFee',\n        },\n        paymentPlanFees: {\n          $sum: '$paymentPlan.fees',\n        },\n      },\n    },\n  ]);\n\n  const btcPriceInUsd: number = await apiPriceBtc();\n  const btcPriceInSatoshi = 100000000;\n\n  const paymentPlanFees: number = Number.isNaN(\n    Number(contracts[0]?.paymentPlanFees)\n  )\n    ? 0\n    : contracts[0]?.paymentPlanFees;\n\n  const lenderFee: number = Number.isNaN(Number(contracts[0]?.lenderFee))\n    ? 0\n    : contracts[0]?.lenderFee;\n\n  const borrowerFee: number = Number.isNaN(Number(contracts[0]?.borrowerFee))\n    ? 0\n    : contracts[0]?.borrowerFee;\n\n  const lenderAndBorrowerFee: number = lenderFee + borrowerFee;\n\n  const incomeInSatoshi: number = paymentPlanFees + lenderAndBorrowerFee;\n\n  const incomeInBtc: number = incomeInSatoshi / btcPriceInSatoshi;\n\n  const incomeInUsd: number = btcPriceInUsd * incomeInBtc;\n\n  return {\n    usd: incomeInUsd,\n    satoshi: incomeInSatoshi,\n    btc: incomeInBtc,\n  };\n}\n\nexport async function interestRate() {\n  const contracts = await Contract.aggregate([\n    {\n      $sort: {\n        'paymentPlan.interest': 1,\n      },\n    },\n    {\n      $group: {\n        _id: '$null',\n        interest: {\n          $push: '$$CURRENT',\n        },\n      },\n    },\n    {\n      $project: {\n        max: {\n          $arrayElemAt: ['$interest', -1],\n        },\n        min: {\n          $arrayElemAt: ['$interest', 0],\n        },\n      },\n    },\n  ]);\n\n  const maxInterest: number = contracts[0]?.max?.paymentPlan?.map(\n    (max) => max.interest\n  );\n\n  const minInterest: number = contracts[0]?.min?.paymentPlan?.map(\n    (min) => min.interest\n  );\n\n  const mediaValue: number = maxInterest[0] + minInterest[0];\n\n  const medInterest: number = mediaValue / 2;\n\n  return {\n    maxInterest: maxInterest[0],\n    medInterest,\n    minInterest: minInterest[0],\n  };\n}\n\nexport async function getIncomeByDate(body: TGetByDate) {\n  const monday = getDay(body.startDate, 1, 6);\n  const sunday = getDay(body.startDate, 7, 0);\n\n  const contractsIncomeByDate = await Contract.aggregate([\n    {\n      $match: {\n        startDate: {\n          $gte: monday,\n          $lte: sunday,\n        },\n      },\n    },\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $group: {\n        _id: '$startDate',\n        fees: {\n          $sum: '$paymentPlan.fees',\n        },\n      },\n    },\n    {\n      $sort: {\n        _id: 1,\n      },\n    },\n  ]);\n\n  return { contractsIncomeByDate };\n}\n\n// export async function getIncomeByMonth(body: TGetByDate) {\n//   const firstDay = new Date(\n//     body.startDate.getFullYear(),\n//     body.startDate.getMonth(),\n//     1\n//   );\n//   const lastDay = new Date(\n//     body.startDate.getFullYear(),\n//     body.startDate.getMonth() + 1,\n//     0\n//   );\n\n//   const incomesByMonth = await Contract.aggregate([\n//     {\n//       $unwind: '$paymentPlan',\n//     },\n//     {\n//       $match: {\n//         startDate: {\n//           $gte: firstDay,\n//           $lte: lastDay,\n//         },\n//       },\n//     },\n//     {\n//       $group: {\n//         _id: '$paymentPlan.paymentDate',\n//         paymentPlanFees: {\n//           $sum: '$paymentPlan.fees',\n//         },\n//         total: {\n//           $sum: 1,\n//         },\n//       },\n//     },\n//   ]);\n\n//   const weeks = {\n//     days0To7: [],\n//     days8To14: [],\n//     days15To21: [],\n//     days21ToEnd: [],\n//   };\n\n//   const distributeByWeeks = incomesByMonth?.map((e) => {\n//     if (e._id.getDate().toString() <= 6) {\n//       return weeks.days0To7.push(e);\n//     }\n//     if (e._id.getDate().toString() <= 13 && e._id.getDate().toString() >= 7) {\n//       return weeks.days8To14.push(e);\n//     }\n//     if (e._id.getDate().toString() <= 20 && e._id.getDate().toString() >= 14) {\n//       return weeks.days15To21.push(e);\n//     }\n//     return weeks.days21ToEnd.push(e);\n//   });\n\n//   console.log('soy incomes', incomesByMonth)\n\n//   return weeks;\n// }\n\nexport async function getLoansByDate(body: TGetByDate) {\n  const monday = getDay(body.startDate, 1, 6);\n  const sunday = getDay(body.startDate, 7, 0);\n\n  const contractsLoansByDate = await Contract.aggregate([\n    {\n      $match: {\n        startDate: {\n          $gte: monday,\n          $lte: sunday,\n        },\n      },\n    },\n    {\n      $group: {\n        _id: '$startDate',\n        loans: {\n          $sum: 1,\n        },\n      },\n    },\n    {\n      $sort: {\n        _id: 1,\n      },\n    },\n  ]);\n\n  return { contractsLoansByDate };\n}\n\nexport async function getDefaultPaymentContractsByMonth() {\n  const defaultPaymentContractsByMonth = await Contract.aggregate([\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $match: {\n        onDefault: true,\n        $expr: {\n          $gte: [\n            '$paymentPlan.payment',\n            {\n              $subtract: [new Date(), 90 * 24 * 60 * 60 * 1000],\n            },\n          ],\n        },\n      },\n    },\n    {\n      $addFields: {\n        rangeTime: {\n          $cond: {\n            if: {\n              $gte: [\n                '$paymentPlan.payment',\n                {\n                  $subtract: [new Date(), 30 * 24 * 60 * 60 * 1000],\n                },\n              ],\n            },\n            then: 'range_30_now',\n            else: {\n              $cond: {\n                if: {\n                  $gte: [\n                    '$paymentPlan.payment',\n                    {\n                      $subtract: [new Date(), 60 * 24 * 60 * 60 * 1000],\n                    },\n                  ],\n                },\n                then: 'range_60_30',\n                else: {\n                  $cond: {\n                    if: {\n                      $gte: [\n                        '$paymentPlan.payment',\n                        {\n                          $subtract: [new Date(), 90 * 24 * 60 * 60 * 1000],\n                        },\n                      ],\n                    },\n                    then: 'range_90_60',\n                    else: '$null',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    {\n      $group: {\n        _id: {\n          r: '$rangeTime',\n        },\n        total: {\n          $sum: 1,\n        },\n      },\n    },\n    {\n      $project: {\n        rangeTime: '$_id.r',\n        total: 1,\n        _id: 0,\n      },\n    },\n  ]);\n\n  return { defaultPaymentContractsByMonth };\n}\n\nexport async function getDefaultPaymentContractsByDate(body: TGetByDate) {\n  const monday = getDay(body.startDate, 1, 6);\n  const sunday = getDay(body.startDate, 7, 0);\n\n  const defaultPaymentContractsByDate = await Contract.aggregate([\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $match: {\n        onDefault: true,\n        'paymentPlan.payment': {\n          $gte: monday,\n          $lte: sunday,\n        },\n      },\n    },\n    {\n      $group: {\n        _id: '$paymentPlan.payment',\n        paymentContracts: {\n          $sum: 1,\n        },\n      },\n    },\n    {\n      $sort: {\n        _id: 1,\n      },\n    },\n  ]);\n\n  return { defaultPaymentContractsByDate };\n}\n\ninterface Indicators {\n  satoshiBalance: number;\n  totalLoans: number;\n  onDefault: number;\n  concluded: number;\n}\n\nexport async function indicators(): Promise<Indicators> {\n  const { satoshi: satoshiBalance } = await income();\n\n  const totalLoans = await Contract.count();\n\n  const onDefault = await Contract.aggregate([\n    {\n      $match: {\n        onDefault: true,\n      },\n    },\n    {\n      $count: 'onDefault',\n    },\n  ]);\n\n  const concluded = await Contract.aggregate([\n    {\n      $match: {\n        status: 'concluded',\n      },\n    },\n    {\n      $count: 'concluded',\n    },\n  ]);\n\n  return {\n    satoshiBalance,\n    totalLoans,\n    onDefault: onDefault[0]?.onDefault ?? 0,\n    concluded: concluded[0]?.concluded ?? 0,\n  };\n}\n\nexport function userEarnings(body: TGetContractEarning) {\n  const finance = new Finance();\n  // // To calculate Amortization\n  const financeOne: number = finance.AM(\n    body.amount,\n    body.interest,\n    body.months,\n    1\n  );\n  const totalAmortization: number = financeOne * body.months;\n\n  const userGain: number = totalAmortization - body.amount;\n\n  return {\n    earning: userGain,\n  };\n}\n\nexport async function getPaymentPlan(\n  amount: number,\n  interest: number,\n  months: number\n): Promise<IPaymentPlan[]> {\n  const monthlyInterestRate = interest / 100 / 12;\n  const installment =\n    interest === 0\n      ? amount / months\n      : (amount * monthlyInterestRate) /\n        (1 - (1 + monthlyInterestRate) ** -months);\n  let initialCapital = amount;\n  const paymentPlan: IPaymentPlan[] = [];\n\n  for (let month = 1; month <= months; month += 1) {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const fees = initialCapital * monthlyInterestRate;\n    const capital = installment - fees;\n    initialCapital -= capital;\n    const paymentDate = new Date(currentDate.setMonth(currentMonth + month));\n\n    paymentPlan.push({\n      amount: installment,\n      originalAmount: installment,\n      rate: interest,\n      fees,\n      originalFees: fees,\n      paymentDate,\n    });\n  }\n\n  return paymentPlan;\n}\n\nexport async function amortization(body: TGetAmortization) {\n  const contractAmortization: IPaymentPlan[] = await getPaymentPlan(\n    body.amount,\n    body.interest,\n    body.months\n  );\n\n  return { getAmortization: contractAmortization };\n}\n\nexport async function getMyContracts(body: TGetMyContracts, token: string) {\n  const { data: user } = await getUserInfo(token);\n\n  const filters: any = {\n    $or: [{ lender: user?.id }, { borrower: user?.id }],\n    active: true,\n  };\n\n  if (body?.status) {\n    filters.status = body?.status;\n  }\n\n  if (body?.startDate && body?.endDate) {\n    filters.createdAt = {\n      $gte: body?.startDate,\n      $lte: body?.endDate,\n    };\n  }\n\n  if (body?.role && body.role === 'lender') {\n    filters.lender = user?.id;\n    filters.borrower = {\n      $nin: user?.id,\n    };\n  }\n\n  if (body?.role && body?.role === 'borrower') {\n    filters.borrower = user?.id;\n    filters.lender = {\n      $nin: user?.id,\n    };\n  }\n\n  return pagination(body?.page, body?.perPage, filters);\n}\n\nexport async function sendContract(body: TSendContract, token: string) {\n  const content = Object.keys(body).reduce(\n    (finalTemplateContent: string, key) =>\n      finalTemplateContent.replace(key, body[key]),\n    body.templateContent\n  );\n\n  const s3 = await signS3Service.signS3Service({\n    filename: `${body.requestId}_contract.pdf`,\n    filetype: 'application/pdf',\n  });\n\n  pdfMake.vfs = pdfFonts.pdfMake.vfs;\n  const { JSDOM } = jsdom;\n  const { window } = new JSDOM('');\n\n  const html = htmlToPdfMake(content, { window });\n\n  const docDefinition = {\n    content: [html],\n  };\n\n  const pdfDocGenerator = pdfMake.createPdf(docDefinition);\n\n  pdfDocGenerator.getBuffer(async (buffer) => {\n    fs.writeFileSync('example.pdf', buffer);\n    const requestOptions = {\n      headers: {\n        'Content-Type': 'application/pdf',\n        'x-amz-acl': 'public-read',\n      },\n    };\n\n    await axios.put(\n      s3.signedRequest,\n      fs.readFileSync('example.pdf'),\n      requestOptions\n    );\n  });\n\n  await sendEmail(\n    'loan_contract_started_request_accepted',\n    token,\n    {\n      name: `${body.borrowerName} ${body.borrowerLastName}`,\n      application_number: `#${body.offerReferenceNumber}`,\n      loan_amount: `${body.amountInUSDC} USD`,\n      interest_rate: body.interestRate,\n      payment_period: `${body.installments} meses`,\n    },\n    s3.url,\n    body.borrowerEmail\n  );\n\n  await sendEmail(\n    'loan_contract_started_offer_accepted',\n    token,\n    {\n      name: `${body.lenderName} ${body.lenderLastName}`,\n      contract_number: `#${body.offerReferenceNumber}`,\n    },\n    s3.url,\n    body.lenderEmail\n  );\n}\n\nexport async function getContractsFilterByStatusByUser(\n  body: TGetContractsFilterByStatusByUser,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const filters: any = {\n    $or: [{ lender: user?.id }, { borrower: user?.id }],\n  };\n\n  if (body.status) {\n    filters.status = body.status;\n  }\n\n  const options: any = {\n    sort: {\n      createdAt: -1,\n    },\n  };\n\n  return pagination(body.page, body.perPage, filters, null, options);\n}\n\nexport async function getPreCancelInfo(body: TGetPreCancelInfo, token: string) {\n  const contract = await findOne({ _id: body.contractId });\n  const loanRequest = await loanRequestService.findOne({\n    _id: contract.loanRequest,\n  });\n  const btcPrice = await apiPriceBtc();\n  const wallet = await getUserWallet(token, loanRequest.selectedWallet);\n  if (!wallet) throw new NoSentryError('Token has expired. Login again.');\n  const userWallet = await formatWallet(wallet, btcPrice);\n  const capital = contract?.paymentPlan?.reduce(\n    (unpaidCapital, paymentPlan) => {\n      let accumulatedUnpaidCapital = unpaidCapital;\n      if (!paymentPlan.paid) {\n        accumulatedUnpaidCapital += paymentPlan.amount - paymentPlan.fees;\n      }\n      return accumulatedUnpaidCapital;\n    },\n    0\n  );\n  const currentDate = new Date();\n  const currentDay = currentDate.getDate();\n  const interest = (capital * currentDay * (contract.rate / 100)) / 360;\n  const amountToPay = capital + interest;\n  const amountToPayInSats = await convertFromUSDC(\n    wallet.type,\n    btcPrice,\n    amountToPay\n  );\n  return { amountToPay, amountToPayInSats, userWallet };\n}\n\nexport async function preCancel(body: TPreCancel, token: string) {\n  const { data: user } = await getUserInfo(token);\n  const contract = await findOne({ _id: body.contractId });\n  if (!contract) throw new NoSentryError('Contract does not exist');\n  if (contract.status === 'concluded')\n    throw new NoSentryError('Contract has concluded');\n  const loanRequest = await loanRequestService.findOne({\n    _id: contract.loanRequest,\n  });\n  const wallet = await getUserWallet(token, loanRequest.selectedWallet);\n  const btcPrice = await apiPriceBtc();\n  const amountToPayInSats = await convertFromUSDC(\n    wallet.type,\n    btcPrice,\n    body.amountToPay\n  );\n  const amountPercentage = (amountToPayInSats * 1) / 100;\n  if (wallet.available_balance < amountToPayInSats + amountPercentage)\n    throw new NoSentryError('Amount to pay not available');\n  const acceptedOffer = await loanOfferService.findOne({\n    _id: { $in: loanRequest.offers },\n    status: 'approved',\n  });\n\n  try {\n    await transfer(\n      {\n        amount: amountToPayInSats,\n        fromWalletId: loanRequest.selectedWallet,\n        toWalletId: acceptedOffer.selectedWallet,\n      },\n      token\n    );\n  } catch (error) {\n    throw new NoSentryError(error.message);\n  }\n\n  // suma de todos los fee restantes para guardarlo en la transaction\n  const interest = contract.paymentPlan.reduce(\n    (acum, element) => (!element.paid ? acum + element.fees : acum),\n    0\n  );\n\n  contract.paymentDue = false;\n  const updatedPaymentPlans = contract.paymentPlan.map((paymentPlan) => {\n    const { status, paid, ...rest } = paymentPlan;\n    const updatedPaymentPlan = {\n      status: paymentPlan.status === 'next_payment' ? 'successful' : status,\n      paid: true,\n      ...rest,\n    };\n    return updatedPaymentPlan;\n  });\n\n  contract.paymentPlan = updatedPaymentPlans;\n  contract.status = 'concluded';\n  contract.preCancel = true;\n  await contract.save();\n\n  await transactionService.createTransaction(\n    {\n      contract: contract._id,\n      from: contract.borrower,\n      to: contract.lender,\n      amount: body.amountToPay,\n      lenderFee: 0,\n      borrowerFee: 0,\n      interest,\n      type: 'payment',\n    },\n    contract.borrower,\n    contract.lender\n  );\n\n  const notificationVariables = {\n    '{{name}}':\n      `${user?.metamapStatus?.dni_firstName?.split(' ')[0]} ${\n        user?.metamapStatus?.dni_lastName?.split(' ')[0]\n      }` ?? user?.name,\n    '{{contractNumber}}': contract?.referenceNumber,\n  };\n\n  await createNotification(\n    // notification Precancelación de crédito\n    {\n      messageTemplateId: '65a8344d2d07da37baf04e18',\n      model: 'contract',\n      module: 'loans',\n      object: contract?._id,\n      recipientId: contract?.lender,\n      senderId: user?.id,\n      variables: notificationVariables,\n    },\n    token\n  );\n\n  return contract;\n}\n\nexport async function getUserStats(body: TGetUserStats, token: string) {\n  await getUserInfo(token);\n\n  const settings = await settingService.findOne({ active: true });\n\n  const { arrOfAmounts, sumContractsRequestAmount } = await getValidAmounts(\n    body?.borrower,\n    settings?.contract?.allowedBlocks,\n    settings?.contract?.amountOfBlocksAllowed\n  );\n\n  const creditsReceived = await getUserCredits(body?.borrower, 'borrower');\n\n  const creditsPaidOnTime = await getUserCreditsPaidOnTime(body?.borrower);\n\n  const creditsPaidLate = await getUserCreditsPaidLate(body?.borrower);\n\n  const availableCredit =\n    arrOfAmounts[arrOfAmounts.length - 1] - sumContractsRequestAmount;\n\n  return {\n    minAmount: arrOfAmounts[0],\n    maxAmount: arrOfAmounts[arrOfAmounts.length - 1],\n    creditsReceived,\n    creditsPaidOnTime,\n    creditsPaidLate,\n    availableCredit,\n  };\n}\n\nexport async function addOriginalValues() {\n  const activeContracts = await Contract.find({ status: 'active' });\n  for (const contract of activeContracts) {\n    const originalPaymentPlan = await getPaymentPlan(\n      contract.amountInUSDC,\n      contract.rate,\n      contract.paymentPlan.length\n    );\n    const newPaymentPlan: IPaymentPlan[] = contract.paymentPlan.map(\n      (paymentPlan, index) => {\n        paymentPlan.originalAmount = originalPaymentPlan[index].originalAmount;\n        paymentPlan.originalFees = originalPaymentPlan[index].originalFees;\n        return paymentPlan;\n      }\n    );\n    contract.paymentPlan = newPaymentPlan;\n  }\n  return Promise.all(activeContracts.map((contract) => contract.save()));\n}\n\nexport async function contractAndCreditScoreDetails() {\n  const wb = new xl.Workbook();\n\n  const ws = wb.addWorksheet('credolab_users_payments');\n\n  const headers = [\n    'Reference Number',\n    'Collected Date',\n    'Due Date 1',\n    'Payment Date 1',\n    'Due date 2',\n    'Payment date 2',\n    'Concluded Contract',\n    'Pre Cancel',\n    'On Default',\n  ];\n\n  headers.forEach((header, index) => {\n    ws.cell(1, index + 1).string(header);\n  });\n\n  ws.column(1).setWidth(60);\n  ws.column(2).setWidth(15);\n  ws.column(3).setWidth(15);\n  ws.column(4).setWidth(15);\n  ws.column(5).setWidth(15);\n  ws.column(6).setWidth(15);\n  ws.column(8).setWidth(20);\n  ws.column(7).setWidth(15);\n  ws.column(9).setWidth(15);\n\n  const contracts = await find();\n\n  let currentRow = 2; // Comenzamos desde la segunda fila\n\n  for (let i = 0; i <= contracts.length - 1; i += 1) {\n    const userCreditScore = await creditScoreService.findOne({\n      user: contracts[i]?.borrower,\n    });\n\n    const paymentsOfContract = await transactionService.find(\n      {\n        contract: contracts[i]?._id,\n        type: 'payment',\n      },\n      {},\n      {\n        sort: {\n          createdAt: 1,\n        },\n      }\n    );\n\n    ws.cell(currentRow, 1).string(\n      userCreditScore?.values[userCreditScore.values.length - 1]\n        ?.referenceNumber\n    );\n\n    ws.cell(currentRow, 2).string(\n      userCreditScore?.values[userCreditScore.values.length - 1]?.createdAt\n        .toISOString()\n        .split('T')[0]\n    );\n\n    ws.cell(currentRow, 3).string(\n      contracts[i]?.paymentPlan[0]?.paymentDate?.toISOString().split('T')[0] ??\n        '-'\n    );\n\n    ws.cell(currentRow, 4).string(\n      paymentsOfContract[0]?.createdAt?.toISOString().split('T')[0] ?? '-'\n    );\n\n    ws.cell(currentRow, 5).string(\n      contracts[i]?.paymentPlan[1]?.paymentDate?.toISOString().split('T')[0] ??\n        '-'\n    );\n\n    ws.cell(currentRow, 6).string(\n      paymentsOfContract[1]?.createdAt?.toISOString().split('T')[0] ?? '-'\n    );\n\n    ws.cell(currentRow, 7).string(\n      contracts[i]?.status === 'concluded' ? 'SI' : 'NO'\n    );\n\n    ws.cell(currentRow, 8).string(contracts[i]?.preCancel ? 'SI' : 'NO');\n\n    ws.cell(currentRow, 9).string(contracts[i]?.onDefault ? 'SI' : 'NO');\n\n    ws.row(currentRow).setHeight(25);\n\n    currentRow += 1;\n  }\n\n  wb.write(\n    `Suni-users-payment-${new Date().toISOString().slice(0, 10)}.xlsx`,\n    function (err, stats) {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(stats); // Prints out an instance of a node.js fs.Stats object\n      }\n    }\n  );\n\n  return true;\n}\n"]}