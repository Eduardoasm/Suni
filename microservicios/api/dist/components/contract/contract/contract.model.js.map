{"version":3,"file":"contract.model.js","sourceRoot":"/","sources":["components/contract/contract/contract.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types, model, Document, Model, Schema } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { CurrencyTC, ICurrency } from '../../currency';\nimport { IPaymentPlan, paymentPlanSchema } from '../payment-plan';\nimport { ILoanRequest, LoanRequestTC } from '../../loanRequest';\nimport { ILoanOffer, LoanOfferTC } from '../../loanOffer/loanOffer.model';\n\nexport type ContractStatusEnum = 'active' | 'concluded';\n\nexport interface IContract {\n  _id?: any;\n  loanRequest?: Types.ObjectId | ILoanRequest;\n  loanOffer?: Types.ObjectId | ILoanOffer;\n  lender: string; // Ref to user in SUNI\n  borrower: string; // Ref to user in SUNI\n  walletTransactionsCurrency: Types.ObjectId | ICurrency;\n  amountInUSDC: number;\n  amountReceivedInWalletTransactionsCurrency: number;\n  rate: number;\n  status: ContractStatusEnum;\n  paymentPlan: Array<IPaymentPlan>;\n  startDate: Date;\n  lenderFeeInUSDC: number;\n  lenderFeeInWalletTransactionsCurrency: number;\n  borrowerFeeInUSDC: number;\n  borrowerFeeInWalletTransactionsCurrency: number;\n  referenceNumber: number;\n  onDefault: boolean;\n  paymentDue: boolean;\n  preCancel?: boolean;\n  commerce?: string;\n  borrowerSelectedWallet?: string;\n  lenderSelectedWallet?: string;\n  active?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type ContractDocument = Document<Types.ObjectId, any, IContract> &\n  IContract;\n\nconst contractSchema = new Schema<IContract>(\n  {\n    loanRequest: {\n      type: Schema.Types.ObjectId,\n      ref: 'LoanRequest',\n    },\n    loanOffer: {\n      type: Schema.Types.ObjectId,\n      ref: 'LoanOffer',\n    },\n    lender: {\n      type: String, // Ref to user in SUNI\n    },\n    borrower: {\n      type: String, // Ref to user in SUNI\n    },\n    walletTransactionsCurrency: {\n      type: Schema.Types.ObjectId,\n      ref: 'Currency',\n    },\n    amountInUSDC: {\n      type: Number,\n    },\n    amountReceivedInWalletTransactionsCurrency: {\n      type: Number,\n    },\n    rate: {\n      type: Number,\n    },\n    status: {\n      type: String,\n      enum: ['active', 'concluded'],\n      default: 'active',\n    },\n    paymentPlan: [paymentPlanSchema],\n    startDate: {\n      type: Date,\n    },\n    lenderFeeInUSDC: {\n      type: Number,\n    },\n    lenderFeeInWalletTransactionsCurrency: {\n      type: Number,\n    },\n    borrowerFeeInUSDC: {\n      type: Number,\n    },\n    borrowerFeeInWalletTransactionsCurrency: {\n      type: Number,\n    },\n    referenceNumber: {\n      type: Number,\n      unique: true,\n    },\n    onDefault: {\n      type: Boolean,\n      default: false,\n    },\n    paymentDue: {\n      type: Boolean,\n      default: false,\n    },\n    preCancel: {\n      type: Boolean,\n      default: false,\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    commerce: {\n      type: String,\n      trim: true,\n    },\n    borrowerSelectedWallet: {\n      type: String,\n      trim: true,\n    },\n    lenderSelectedWallet: {\n      type: String,\n      trim: true,\n    },\n  },\n  { timestamps: true }\n);\n\ncontractSchema.pre('save', async function (next) {\n  if (!this.referenceNumber) {\n    // Buscar el número de referencia más alto en la colección y sumarle 1\n    const highest = await Contract.findOne().sort('-referenceNumber').exec();\n    this.referenceNumber = (highest && highest.referenceNumber + 1) || 100000;\n  }\n  next();\n});\n\nexport const Contract = model<IContract, Model<IContract>>(\n  'Contract',\n  contractSchema\n);\n\nexport const ContractTC = composeMongoose<ContractDocument>(Contract as any);\n\nContractTC.addRelation('walletTransactionsCurrency', {\n  resolver: () => CurrencyTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.walletTransactionsCurrency,\n  },\n  projection: { walletTransactionsCurrency: 1 },\n});\n\nContractTC.addRelation('loanRequest', {\n  resolver: () => LoanRequestTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.loanRequest,\n  },\n  projection: { loanRequest: 1 },\n});\n\nContractTC.addRelation('loanOffer', {\n  resolver: () => LoanOfferTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.loanOffer,\n  },\n  projection: { loanOffer: 1 },\n});\n"]}