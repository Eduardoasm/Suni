{"version":3,"file":"loanOffer.model.js","sourceRoot":"/","sources":["components/loanOffer/loanOffer.model.ts"],"names":[],"mappings":";;;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,0CAAoD;AAuCvC,QAAA,eAAe,GAAG,IAAI,iBAAM,CACvC;IACE,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;KACb;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;KACb;IACD,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,IAAI,EAAE,MAAM;SACb;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,MAAM;SACb;QACD,OAAO,EAAE;YACP,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,KAAK;SACf;QACD,GAAG,EAAE;YACH,IAAI,EAAE,MAAM;SACb;QACD,KAAK,EAAE;YACL,IAAI,EAAE,MAAM;SACb;KACF;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC;QAC/D,OAAO,EAAE,QAAQ;KAClB;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,UAAU;KAChB;IACD,cAAc,EAAE;QACd,IAAI,EAAE,IAAI;KACX;IACD,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;KACb;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;KACb;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;KACb;IACD,6BAA6B,EAAE;QAC7B,IAAI,EAAE,MAAM;KACb;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;KACb;IACD,yBAAyB,EAAE;QACzB,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,4BAA4B,EAAE;QAC5B,IAAI,EAAE,MAAM;KACb;CACF,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,uBAAe,CAAC,GAAG,CAAC,MAAM,EAAE,UAAgB,IAAI;;QAC9C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,sEAAsE;YACtE,MAAM,OAAO,GAAG,MAAM,iBAAS,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,CAAC;YAC1E,IAAI,CAAC,eAAe,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;SAC3E;QACD,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC;AAEU,QAAA,SAAS,GAAG,IAAA,gBAAK,EAC5B,WAAW,EACX,uBAAe,CAChB,CAAC;AAEW,QAAA,WAAW,GAAG,IAAA,0CAAe,EAAoB,iBAAgB,CAAC,CAAC;AAEhF,mBAAW,CAAC,WAAW,CAAC,UAAU,EAAE;IAClC,QAAQ,EAAE,GAAG,EAAE,CAAC,qBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACvE,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ;KACjC;IACD,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE;CAC5B,CAAC,CAAC","sourcesContent":["import { Model, model, Schema, Types, Document } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { CurrencyTC, ICurrency } from '../currency';\n\nexport type LoanOfferStatusEnum =\n  | 'active'\n  | 'approved'\n  | 'rejected'\n  | 'canceled'\n  | 'expired';\n\nexport interface ILoanOffer {\n  _id?: any;\n  amount: number;\n  installments: number;\n  lender: string;\n  lenderInfo: {\n    name: string;\n    lastName: string;\n    country: string;\n    dni: string;\n    email: string;\n  };\n  borrower: string;\n  status?: LoanOfferStatusEnum;\n  currency: Types.ObjectId | ICurrency;\n  expirationDate: Date;\n  selectedWallet: string;\n  interestRate: number;\n  referenceNumber: number;\n  blockId: string;\n  blockedAmountInWalletCurrency: number;\n  lenderFeeInUSDC: number;\n  lenderFeeInWalletCurrency: number;\n  active: boolean;\n  referenceNumberOfLoanRequest: number;\n}\n\nexport type LoanOfferDocument = Document<Types.ObjectId, any, ILoanOffer> &\n  ILoanOffer;\n\nexport const loanOfferSchema = new Schema<ILoanOffer>(\n  {\n    amount: {\n      type: Number,\n    },\n    installments: {\n      type: Number,\n    },\n    lender: {\n      type: String,\n    },\n    lenderInfo: {\n      name: {\n        type: String,\n      },\n      lastName: {\n        type: String,\n      },\n      country: {\n        type: String,\n        default: 'VEN',\n      },\n      dni: {\n        type: String,\n      },\n      email: {\n        type: String,\n      },\n    },\n    borrower: {\n      type: String,\n    },\n    status: {\n      type: String,\n      enum: ['active', 'approved', 'rejected', 'canceled', 'expired'],\n      default: 'active',\n    },\n    currency: {\n      type: Schema.Types.ObjectId,\n      ref: 'Currency',\n    },\n    expirationDate: {\n      type: Date,\n    },\n    selectedWallet: {\n      type: String,\n    },\n    interestRate: {\n      type: Number,\n    },\n    referenceNumber: {\n      type: Number,\n      unique: true,\n    },\n    blockId: {\n      type: String,\n    },\n    blockedAmountInWalletCurrency: {\n      type: Number,\n    },\n    lenderFeeInUSDC: {\n      type: Number,\n    },\n    lenderFeeInWalletCurrency: {\n      type: Number,\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    referenceNumberOfLoanRequest: {\n      type: Number,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nloanOfferSchema.pre('save', async function (next) {\n  if (!this.referenceNumber) {\n    // Buscar el número de referencia más alto en la colección y sumarle 1\n    const highest = await LoanOffer.findOne().sort('-referenceNumber').exec();\n    this.referenceNumber = (highest && highest.referenceNumber + 1) || 100000;\n  }\n  next();\n});\n\nexport const LoanOffer = model<ILoanOffer, Model<ILoanOffer>>(\n  'LoanOffer',\n  loanOfferSchema\n);\n\nexport const LoanOfferTC = composeMongoose<LoanOfferDocument>(LoanOffer as any);\n\nLoanOfferTC.addRelation('currency', {\n  resolver: () => CurrencyTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.currency,\n  },\n  projection: { currency: 1 },\n});\n"]}