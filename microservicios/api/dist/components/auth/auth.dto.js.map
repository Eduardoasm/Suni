{"version":3,"file":"auth.dto.js","sourceRoot":"/","sources":["components/auth/auth.dto.ts"],"names":[],"mappings":";;;AACA,oDAAiD;AAmBpC,QAAA,eAAe,GAAG;;;;;;;;;;;;;;;;;;CAkB9B,CAAC;AAYW,QAAA,WAAW,GAAG;;;;;;;;;;CAU1B,CAAC;AAQW,QAAA,WAAW,GAAG;;;;;;CAM1B,CAAC;AAEW,QAAA,UAAU,GAAG;;YAEd,mBAAQ;;;CAGnB,CAAC;AAEW,QAAA,eAAe,GAAG;;YAEnB,mBAAQ;;CAEnB,CAAC;AAEW,QAAA,WAAW,GAAG;;;;;CAK1B,CAAC;AAMW,QAAA,kBAAkB,GAAG;;;;CAIjC,CAAC;AAEW,QAAA,iBAAiB,GAAG;;;;;CAKhC,CAAC;AAOW,QAAA,mBAAmB,GAAG;;;;;CAKlC,CAAC;AAmBW,QAAA,gBAAgB,GAAG;;;;;;;;;;;;;;;;;CAiB/B,CAAC;AAMW,QAAA,oBAAoB,GAAG;;;;CAInC,CAAC;AAEW,QAAA,gBAAgB,GAAG;;;;CAI/B,CAAC;AAKW,QAAA,YAAY,GAAG;;;;CAI3B,CAAC;AAEW,QAAA,eAAe,GAAG;;;;;;;;;;;;;;;;CAgB9B,CAAC;AAEW,QAAA,kBAAkB,GAAG;;;;;CAKjC,CAAC;AAMW,QAAA,mBAAmB,GAAG;;;;CAIlC,CAAC","sourcesContent":["import { Types } from 'mongoose';\nimport { UserRole } from '../user/user/user.dto';\n\ntype TPermissionInput = {\n  name: string;\n  key: string;\n  options: Array<string>;\n};\n\nexport type TCreateUserInput = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  dni: string;\n  dniType: string;\n  permissions?: Array<TPermissionInput>;\n  userRole: string;\n};\n\nexport const CreateUserInput = `\n  input CreateUser {\n    email: String!\n    password: String\n    firstName: String!\n    lastName: String\n    dni: String!\n    dniType: String!\n    permissions: [PermissionInput!]\n    userRole: String\n  }\n\n  input PermissionInput {\n    name: String\n    key: String\n    options: [String!]\n  }\n\n`;\n\nexport type TSignUpInput = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  dni: string;\n  dniType: string;\n  deviceToken?: string;\n};\n\nexport const SignUpInput = `\n  input SignUpInput {\n    email: String\n    password: String\n    firstName: String\n    lastName: String\n    dni: String\n    dniType: String\n    deviceToken: String\n  }\n`;\n\nexport type TSignInInput = {\n  email: string;\n  password: string;\n  deviceToken?: string;\n};\n\nexport const SignInInput = `\n  input SignInInput {\n    email: String!\n    password: String!\n    deviceToken: String\n  }\n`;\n\nexport const SignInType = `\n  type SignInType {\n    user: ${UserRole}\n    token: String\n  }\n`;\n\nexport const CurrentUserRole = `\n  type CurrentUserRole {\n    user: ${UserRole}\n  }\n`;\n\nexport const SignOutType = `\n  type SignOutType {\n    success: Boolean!\n    message: String\n  }\n`;\n\nexport type TResetPasswordInput = {\n  email: string;\n};\n\nexport const ResetPasswordInput = `\n  input ResetPasswordInput {\n    email: String!\n  }\n`;\n\nexport const ResetPasswordInfo = `\n  type ResetPasswordInfo {\n    success: Boolean!\n    err: String\n  }\n`;\n\nexport type TChangePasswordInput = {\n  token: string;\n  password: string;\n};\n\nexport const ChangePasswordInput = `\n  input ChangePasswordInput {\n    token: String!\n    password: String!\n  }\n`;\n\nexport type TPermissionAdminInput = {\n  name: string;\n  key: string;\n  options: Array<string>;\n};\n\nexport type TCreateAdminInput = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  dni: string;\n  permissions?: Array<TPermissionAdminInput>;\n  dniType: string;\n  userRole: string;\n};\n\nexport const createAdminInput = `\n  input CreateAdmin {\n    email: String!\n    password: String!\n    firstName: String!\n    lastName: String\n    dni: String!\n    dniType: String!\n    permissions: [PermissionAdminInput!]\n    userRole: String\n  }\n\n  input PermissionAdminInput {\n    name: String\n    key: String\n    options: [String!]\n  }\n`;\n\nexport type TAdminDeleteUserInput = {\n  userId: Types.ObjectId;\n};\n\nexport const AdminDeleteUserInput = `\n  input AdminDeleteUser {\n    userId: MongoID!\n  }\n`;\n\nexport const DeleteResultType = `\n  type DeleteResultType {\n    success: Boolean\n  }\n`;\n\nexport type TSignOutInput = {\n  token?: string;\n};\nexport const SignOutInput = `\n  input SignOutInput {\n    token: String\n  }\n`;\n\nexport const UserWalletsType = `\n  type UserWalletsType {\n    userWallets: [WalletType]\n  }\n\n  type WalletType {\n    name: String\n    wallet: String\n    balance: Float\n    balanceInUSDC: Float\n    blockedBalance: Float\n    blockedBalanceInUSDC: Float\n    availableBalance: Float\n    availableBalanceInUSDC: Float\n    currency: String\n  }\n`;\n\nexport const ValidateForKYCType = `\n  type ValidateForKYCType {\n    isAllowed: Boolean\n    message: String\n  }  \n`;\n\nexport type TGetUserWalletInput = {\n  currency: string;\n};\n\nexport const GetUserWalletsInput = `\n  input getUserWallet {\n    currency: String\n  }\n`;\n"]}