{"version":3,"file":"transaction.model.js","sourceRoot":"/","sources":["components/transaction/transaction.model.ts"],"names":[],"mappings":";;;AAAA,uCAAiE;AACjE,uEAA2D;AAE3D,2DAA2E;AAsC3E,MAAM,iBAAiB,GAAG,IAAI,iBAAM,CAClC;IACE,QAAQ,EAAE;QACR,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,UAAU;KAChB;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,6BAA6B,CAAC;KAChD;IACD,EAAE,EAAE;QACF,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,2BAA2B,CAAC;KAC9C;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,0BAA0B,CAAC;KAC7C;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,6BAA6B,CAAC;KAChD;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,+BAA+B,CAAC;KAClD;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,0BAA0B,CAAC;KAC7C;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,qCAAqC,CAAC;QACvD,IAAI,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;KAChC;IACD,mBAAmB,EAAE;QACnB,IAAI,EAAE,MAAM;KACb;IACD,iBAAiB,EAAE;QACjB,IAAI,EAAE,MAAM;KACb;IACD,mBAAmB,EAAE,gCAAiB;IACtC,mBAAmB,EAAE;QACnB,IAAI,EAAE,MAAM;KACb;IACD,mBAAmB,EAAE;QACnB,IAAI,EAAE,MAAM;KACb;IACD,kBAAkB,EAAE;QAClB,IAAI,EAAE,MAAM;KACb;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;KACb;IACD,iBAAiB,EAAE,gCAAiB;IACpC,iBAAiB,EAAE;QACjB,IAAI,EAAE,MAAM;KACb;IACD,iBAAiB,EAAE;QACjB,IAAI,EAAE,MAAM;KACb;IACD,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;KACb;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,eAAe,CAAC;KACxB;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;KACd;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,IAAI;KACX;IACD,wBAAwB,EAAE;QACxB,IAAI,EAAE,MAAM;KACb;IACD,mBAAmB,EAAE;QACnB,IAAI,EAAE,MAAM;KACb;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEW,QAAA,WAAW,GAAG,IAAA,gBAAK,EAC9B,aAAa,EACb,iBAAiB,CAClB,CAAC;AAEW,QAAA,aAAa,GAAG,IAAA,0CAAe,EAC1C,mBAAkB,CACnB,CAAC","sourcesContent":["import { Types, Model, model, Document, Schema } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { IContract } from '../contract/contract';\nimport { IPaymentPlan, paymentPlanSchema } from '../contract/payment-plan';\n\nexport type transactionTypeEnum = 'investment' | 'payment';\n\nexport type EventEnum = 'loanConcluded';\nexport interface ITransaction {\n  _id?: any;\n  contract: Types.ObjectId | IContract;\n  from: string;\n  to: string;\n  amount: number; // total amount\n  lenderFee: number;\n  borrowerFee: number;\n  interest: number;\n  type: transactionTypeEnum;\n  borrowerCreditLimit?: number;\n  borrowerDueAmount?: number;\n  borrowerNextPayment?: IPaymentPlan;\n  borrowerActiveLoans?: number;\n  borrowerAverageRate?: number;\n  borrowedByBorrower?: number;\n  event?: EventEnum;\n  lenderDueAmount?: number;\n  lenderNextPayment?: IPaymentPlan;\n  lenderActiveLoans?: number;\n  lenderAverageRate?: number;\n  lendedByLender?: number;\n  commerce?: string;\n  commerceInterestEarnings?: number;\n  commerceIssuedLoans?: number;\n  isActive?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type TransactionDocument = Document<Types.ObjectId, any, ITransaction> &\n  ITransaction;\n\nconst transactionSchema = new Schema<ITransaction>(\n  {\n    contract: {\n      type: Schema.Types.ObjectId,\n      ref: 'Contract',\n    },\n    from: {\n      type: String,\n      required: [true, 'Please insert the user from'],\n    },\n    to: {\n      type: String,\n      required: [true, 'Please insert the user to'],\n    },\n    amount: {\n      type: Number,\n      required: [true, 'Please insert the amount'],\n    },\n    lenderFee: {\n      type: Number,\n      required: [true, 'Please insert the lenderFee'],\n    },\n    borrowerFee: {\n      type: Number,\n      required: [true, 'Please insert the borrowerFee'],\n    },\n    interest: {\n      type: Number,\n      required: [true, 'Please insert a interest'],\n    },\n    type: {\n      type: String,\n      required: [true, 'Please insert a type of transaction'],\n      enum: ['investment', 'payment'],\n    },\n    borrowerCreditLimit: {\n      type: Number,\n    },\n    borrowerDueAmount: {\n      type: Number,\n    },\n    borrowerNextPayment: paymentPlanSchema,\n    borrowerActiveLoans: {\n      type: Number,\n    },\n    borrowerAverageRate: {\n      type: Number,\n    },\n    borrowedByBorrower: {\n      type: Number,\n    },\n    lenderDueAmount: {\n      type: Number,\n    },\n    lenderNextPayment: paymentPlanSchema,\n    lenderActiveLoans: {\n      type: Number,\n    },\n    lenderAverageRate: {\n      type: Number,\n    },\n    lendedByLender: {\n      type: Number,\n    },\n    event: {\n      type: String,\n      enum: ['loanConcluded'],\n    },\n    isActive: {\n      type: Boolean,\n    },\n    commerce: {\n      type: String,\n      trim: true,\n    },\n    commerceInterestEarnings: {\n      type: Number,\n    },\n    commerceIssuedLoans: {\n      type: Number,\n    },\n  },\n  { timestamps: true }\n);\n\nexport const Transaction = model<ITransaction, Model<ITransaction>>(\n  'Transaction',\n  transactionSchema\n);\n\nexport const TransactionTC = composeMongoose<TransactionDocument>(\n  Transaction as any\n);\n"]}