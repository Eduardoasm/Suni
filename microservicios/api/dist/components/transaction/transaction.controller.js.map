{"version":3,"file":"transaction.controller.js","sourceRoot":"/","sources":["components/transaction/transaction.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { schemaComposer } from 'graphql-compose';\nimport type { Request, Response, NextFunction } from 'express';\nimport { TransactionTC } from './transaction.model';\nimport * as transactionService from './transaction.service';\nimport {\n  borrowerCreditHistoryType,\n  dateTransactionInput,\n  lenderCreditHistoryType,\n} from './transaction.dto';\n\nconst borrowerCreditHistory = schemaComposer.createResolver<any>({\n  name: 'borrower graphic of credit history',\n  description: 'get graphics for credit limit and credit received of borrower',\n  kind: 'query',\n  type: borrowerCreditHistoryType,\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const creditHistory = await transactionService.getBorrowerCreditHistory(\n      token\n    );\n    return creditHistory;\n  },\n});\n\nconst lenderCreditHistory = schemaComposer.createResolver<any>({\n  name: 'lender graphic of credit history',\n  description: 'get lender credit history',\n  kind: 'query',\n  type: lenderCreditHistoryType,\n  args: {\n    data: dateTransactionInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const creditHistory = await transactionService.getLenderCreditHistory(\n      token,\n      args?.data?.date\n    );\n    return creditHistory;\n  },\n});\n\nconst transactionQueries = {\n  transaction: TransactionTC.mongooseResolvers.findOne(),\n  transactions: TransactionTC.mongooseResolvers.findMany({\n    limit: { defaultValue: 1000000 },\n  }),\n  borrowerCreditHistory,\n  lenderCreditHistory,\n};\n\nconst transactionMutations = {\n  updateTransactions: TransactionTC.mongooseResolvers.updateOne(),\n  createTransaction: TransactionTC.mongooseResolvers.createOne(),\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const transactions = await transactionService.find({});\n    return res.status(200).json({ success: true, transactions });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const transaction = await transactionService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, transaction });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const transaction = await transactionService.create(req.body);\n    return res.status(200).json({ success: true, transaction });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const transaction = await transactionService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, transaction });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await transactionService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createTransaction(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const transaction = await transactionService.createTransaction(\n      req.body.transaction,\n      req.params.borrowerId,\n      req.params.lenderId\n    );\n    return res.status(200).json({ success: true, transaction });\n  } catch (error) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport { transactionQueries, transactionMutations };\n"]}