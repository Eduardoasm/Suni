{"version":3,"file":"transaction.service.js","sourceRoot":"/","sources":["components/transaction/transaction.service.ts"],"names":[],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { NoSentryError, paginateModel } from '../../utils';\nimport { ITransaction, Transaction } from './transaction.model';\nimport * as contractService from '../contract/contract/contract.service';\nimport { getUserInfo } from '../../utils/walletService/userInfo';\nimport { ISettings, Settings } from '../settings/settings';\nimport { dateTransactionEnum, userTransactionEnum } from './transaction.dto';\nimport { getUserCredits } from '../../utils/creditHistory/creditsReceived';\nimport { getValidAmounts } from '../../utils/validations/request';\nimport * as settingsService from '../settings/settings/settings.service';\n\nexport async function findOne(\n  filter?: FilterQuery<ITransaction>,\n  projection?: ProjectionType<ITransaction> | null,\n  options?: QueryOptions<ITransaction> | null\n) {\n  return Transaction.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ITransaction>,\n  projection?: ProjectionType<ITransaction> | null,\n  options?: QueryOptions<ITransaction> | null\n) {\n  return Transaction.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ITransaction>,\n  update: UpdateQuery<ITransaction> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ITransaction> | null\n) {\n  return Transaction.updateOne(filter, update, options).exec();\n}\n\nexport async function create(transaction: ITransaction, session?: any) {\n  return Transaction.create([transaction], { session });\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ITransaction>,\n  projection?: ProjectionType<ITransaction> | null,\n  options?: QueryOptions<ITransaction> | null\n) {\n  return paginateModel(page, perPage, Transaction, filter, projection, options);\n}\n\nexport async function getAprUserContracts(\n  userId: string,\n  userType: userTransactionEnum\n) {\n  const aprContracts = await contractService.aggregate([\n    {\n      $match: {\n        [userType]: userId,\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        apr: {\n          $avg: '$rate',\n        },\n      },\n    },\n  ]);\n\n  return aprContracts[0]?.apr.toFixed(2) ?? 0;\n}\n\nexport async function nextPayment(\n  userId: string,\n  userType: userTransactionEnum\n) {\n  // como la funcion es busqueda basica y no tiene muchas complejidades con la otra busqueda, se indica un enum\n  // como lender o borrower para no duplicar codigo y solo el cambio se matchea por type\n  const contract = await contractService.aggregate([\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $match: {\n        [userType]: userId,\n        status: 'active',\n        'paymentPlan.paid': false,\n      },\n    },\n    {\n      $limit: 1,\n    },\n    {\n      $sort: {\n        'paymentPlan.paymentDate': 1,\n      },\n    },\n  ]);\n\n  return contract[0]?.paymentPlan;\n}\n\nexport async function getAmountAllCreditsActive(\n  userId: string,\n  userType: userTransactionEnum\n) {\n  const contracts = await contractService.aggregate([\n    {\n      $match: {\n        [userType]: userId,\n        status: 'active',\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        allAmount: {\n          $sum: '$amountInUSDC',\n        },\n      },\n    },\n  ]);\n\n  return contracts[0]?.allAmount ?? 0;\n}\n\nexport async function getDueAmount(\n  userId: string,\n  userType: userTransactionEnum\n) {\n  // como la funcion es busqueda basica y no tiene muchas complejidades con la otra busqueda, se indica un enum\n  // como lender o borrower para no duplicar codigo y solo el cambio se matchea por type\n  const amount = await contractService.aggregate([\n    {\n      $unwind: '$paymentPlan',\n    },\n    {\n      $match: {\n        [userType]: userId,\n        status: 'active',\n        'paymentPlan.paid': false,\n      },\n    },\n    {\n      $group: {\n        _id: 0,\n        allAmount: {\n          $sum: '$paymentPlan.amount',\n        },\n      },\n    },\n  ]);\n\n  return amount[0]?.allAmount.toFixed(2) ?? 0;\n}\n\nexport async function getPreviousCreditLimits(userId: string) {\n  const dateOldMonth = dayjs().subtract(11, 'month');\n\n  const userCreditLimits = [];\n\n  const previousMonths = 11;\n\n  const settings = await Settings.findOne({ active: true });\n\n  for (let i = 0; i <= previousMonths; i += 1) {\n    // loop para buscar los 12 meses anteriores\n    const month = dateOldMonth.add(i, 'month').get('month');\n    const year = dateOldMonth.add(i, 'month').get('year');\n\n    const firstDayOfMonth = dayjs()\n      .year(year)\n      .month(month)\n      .startOf('month')\n      .utc()\n      .format();\n\n    const lastDayOfMonth = dayjs()\n      .year(year)\n      .month(month)\n      .endOf('month')\n      .utc()\n      .format();\n    // aqui se hace un findOne ya que si no encuentra la transaction, no realizo algun pago en el mes entra en default\n    // y el creditLimit seria el minBlockAmount de settings\n    const userTransactionMonthly: ITransaction = await findOne(\n      {\n        from: userId,\n        type: 'payment',\n        createdAt: {\n          // se hace la busqueda mediante createdAt\n          $lte: new Date(lastDayOfMonth),\n        },\n      },\n      {},\n      {\n        sort: {\n          createdAt: -1,\n        },\n      }\n    );\n\n    userCreditLimits.push({\n      month: new Date(firstDayOfMonth),\n      // si no hay transacciones en el mes, se realiza la busqueda de el min amount block en settings ya que tenemos 2 opciones\n      // si no realizo transaccion no tiene un contrato activo o no realizo el pago, y en las 2 opciones entraria en el minBlockAmount\n      borrowerCreditLimit:\n        userTransactionMonthly?.borrowerCreditLimit ??\n        settings?.contract?.amountOfBlocksAllowed,\n    });\n  }\n\n  return userCreditLimits;\n}\n\nexport async function getPreviousContractsReceived(userId: string) {\n  const dateOldMonth = dayjs().subtract(11, 'month');\n\n  const userCreditLimits = [];\n\n  const previousMonths = 11;\n\n  for (let i = 0; i <= previousMonths; i += 1) {\n    // loop para buscar los 12 meses anteriores\n    const month = dateOldMonth.add(i, 'month').get('month');\n    const year = dateOldMonth.add(i, 'month').get('year');\n\n    const firstDayOfMonth = dayjs()\n      .year(year)\n      .month(month)\n      .startOf('month')\n      .utc()\n      .format();\n\n    const lastDayOfMonth = dayjs()\n      .year(year)\n      .month(month)\n      .endOf('month')\n      .utc()\n      .format();\n\n    const userTransactionMonthly: ITransaction = await findOne(\n      {\n        $or: [\n          {\n            to: userId,\n            type: 'investment',\n          },\n          {\n            from: userId,\n            type: 'payment',\n          },\n        ],\n        createdAt: {\n          $lte: new Date(lastDayOfMonth),\n        },\n      },\n      {},\n      {\n        sort: {\n          createdAt: -1,\n        },\n      }\n    );\n\n    userCreditLimits.push({\n      month: new Date(firstDayOfMonth),\n      borrowed: userTransactionMonthly?.borrowedByBorrower ?? 0, // como son creditos recibidos, si no ha recibido nada ese mes, se le indica 0\n    });\n  }\n\n  return userCreditLimits;\n}\n\nexport async function getBorrowerCreditHistory(token: string) {\n  const { data: user } = await getUserInfo(token);\n\n  const previousCreditsLimit = getPreviousCreditLimits(user?.id);\n\n  const previousCreditsReceived = getPreviousContractsReceived(user?.id);\n\n  const borrowerLastTransaction = getBorrowerLastTransaction(user?.id);\n\n  return {\n    creditsLimit: previousCreditsLimit,\n    creditsReceived: previousCreditsReceived,\n    borrowerLastTransaction,\n  };\n}\n\nexport async function getTransactionsByDate(\n  userId: string,\n  date: dateTransactionEnum\n) {\n  // validación por el tema de los enum con graphql no acepta numero de primero y letras despues\n  const dateValidations = ['1D', '7D', '2W', '1M', '6M', '1Y'];\n\n  if (!dateValidations.includes(date)) {\n    throw new NoSentryError('Invalid date parameter');\n  }\n\n  const currentDate = dayjs().utc().format();\n  // hago comparacion en variables para no calcular todos los dates y el objeto para no realizar if else\n  const oneDayAgo =\n    date === '1D' && dayjs().startOf('day').subtract(1, 'day').utc().format();\n\n  const oneWeekAgo =\n    date === '7D' && dayjs().startOf('day').subtract(1, 'week').utc().format();\n\n  const twoWeeksAgo =\n    date === '2W' && dayjs().startOf('day').subtract(2, 'weeks').utc().format();\n\n  const oneMonthAgo =\n    date === '1M' && dayjs().startOf('day').subtract(1, 'month').utc().format();\n\n  const sixMonthsAgo =\n    date === '6M' &&\n    dayjs().startOf('day').subtract(6, 'months').utc().format();\n\n  const oneYearAgo =\n    date === '1Y' && dayjs().startOf('day').subtract(1, 'year').utc().format();\n\n  // filtro dependiendo de lo que nos envie el front, un objeto para no hacer varios if o un switch en caso de\n  const filter = {\n    '1D': oneDayAgo,\n    '7D': oneWeekAgo,\n    '2W': twoWeeksAgo,\n    '1M': oneMonthAgo,\n    '6M': sixMonthsAgo,\n    '1Y': oneYearAgo,\n  };\n\n  const transactions = await find(\n    {\n      $or: [\n        {\n          to: userId,\n          type: 'payment',\n        },\n        {\n          from: userId,\n          type: 'investment',\n        },\n      ],\n      $and: [\n        {\n          createdAt: {\n            $gte: new Date(filter[date]),\n          },\n        },\n        {\n          createdAt: {\n            $lte: new Date(currentDate),\n          },\n        },\n      ],\n    },\n    {},\n    {\n      sort: {\n        createdAt: 1,\n      },\n    }\n  );\n\n  return transactions;\n}\n\nexport async function getLenderCreditHistory(\n  token: string,\n  date: dateTransactionEnum\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const transactionsByDate = getTransactionsByDate(user?.id, date);\n\n  return {\n    transactionsByDate,\n  };\n}\n\nexport async function getBorrowerLastTransaction(userId: string) {\n  const borrowerLastTransaction = await Transaction.aggregate([\n    {\n      $match: {\n        $or: [\n          { $and: [{ to: userId }, { type: 'investment' }] },\n          { $and: [{ from: userId }, { type: 'payment' }] },\n        ],\n      },\n    },\n    {\n      $sort: {\n        createdAt: -1,\n      },\n    },\n    {\n      $limit: 1,\n    },\n  ]);\n  return borrowerLastTransaction?.[0];\n}\n\nexport async function createTransaction(\n  transaction: ITransaction,\n  borrowerId: string,\n  lenderId: string,\n  session?: any\n) {\n  const settings = await settingsService.findOne({ active: true });\n\n  const { arrOfAmounts } = await getValidAmounts(\n    borrowerId,\n    settings?.contract?.allowedBlocks,\n    settings?.contract?.amountOfBlocksAllowed\n  );\n\n  const borrowerAverageRate = await getAprUserContracts(borrowerId, 'borrower'); // averageRate\n\n  const borrowerNextPayment = await nextPayment(borrowerId, 'borrower'); // borrowerNextPayment\n\n  const borrowerDueAmount = await getDueAmount(borrowerId, 'borrower'); // borrowerDueAmount\n\n  const borrowerActiveLoans = await getUserCredits(\n    borrowerId,\n    'borrower',\n    'active'\n  ); // borrowerActiveLoans\n\n  const borrowedByBorrower = await getAmountAllCreditsActive(\n    borrowerId,\n    'borrower'\n  );\n\n  const lenderDueAmount = await getDueAmount(lenderId, 'lender');\n\n  const lenderNextPayment = await nextPayment(lenderId, 'lender');\n\n  const lenderActiveLoans = await getUserCredits(lenderId, 'lender', 'active');\n\n  const lenderAverageRate = await getAprUserContracts(lenderId, 'lender');\n\n  const lendedByLender = await getAmountAllCreditsActive(lenderId, 'lender');\n\n  const newTransaction = await create(\n    {\n      contract: transaction.contract,\n      from: transaction.from,\n      to: transaction.to,\n      amount: transaction.amount,\n      lenderFee: transaction.lenderFee,\n      borrowerFee: transaction.borrowerFee,\n      interest: transaction.interest,\n      type: transaction.type,\n      borrowerDueAmount,\n      borrowerNextPayment,\n      borrowerActiveLoans,\n      borrowerAverageRate,\n      lenderDueAmount,\n      lenderNextPayment,\n      lenderActiveLoans,\n      lenderAverageRate,\n      borrowedByBorrower,\n      borrowerCreditLimit: arrOfAmounts[arrOfAmounts.length - 1],\n      lendedByLender,\n      event: transaction?.event,\n    },\n    session\n  );\n\n  return newTransaction;\n}\n"]}