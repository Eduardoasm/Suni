{"version":3,"file":"settings.controller.js","sourceRoot":"/","sources":["components/settings/settings/settings.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Request, Response, NextFunction } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport {\n  SettingsType,\n  TSettingsInput,\n  CreateSettingsInput,\n  TUpdateSettingsCreditScoreParamsInput,\n  updateSettingsCreditScoreParamsInput,\n  TUpdateInternalCreditScoreValueInput,\n  updateInternalCreditScoreValueInput,\n  TUpdateSettings,\n  updateSettingsInput,\n} from './settings.dto';\nimport { SettingsTC } from './settings.model';\nimport * as settingsService from './settings.service';\n\nexport const createSettings = schemaComposer.createResolver<\n  any,\n  {\n    data: TSettingsInput;\n  }\n>({\n  name: 'createSettings',\n  kind: 'mutation',\n  type: SettingsType,\n  args: {\n    data: CreateSettingsInput,\n  },\n  async resolve({ args }) {\n    const settings = await settingsService.create(args.data);\n    return settings;\n  },\n});\n\nexport const updateSettingsCreditScoreParams = schemaComposer.createResolver<\n  any,\n  {\n    data: TUpdateSettingsCreditScoreParamsInput;\n  }\n>({\n  name: 'updateSettingsCreditScoreParams',\n  kind: 'mutation',\n  type: SettingsType,\n  args: {\n    data: updateSettingsCreditScoreParamsInput,\n  },\n  async resolve({ args }) {\n    const settings = await settingsService.updateSettingsCreditScoreParams(\n      args.data\n    );\n    return settings;\n  },\n});\n\nexport const updateInternalCreditScoreValue = schemaComposer.createResolver<\n  any,\n  {\n    data: TUpdateInternalCreditScoreValueInput;\n  }\n>({\n  name: 'updateInternalCreditScoreValue',\n  kind: 'mutation',\n  type: SettingsType,\n  args: {\n    data: updateInternalCreditScoreValueInput,\n  },\n  async resolve({ args }) {\n    const settings = await settingsService.updateInternalCreditScoreValue(\n      args.data\n    );\n    return settings;\n  },\n});\n\nexport const updateSettingsService = schemaComposer.createResolver<\n  any,\n  {\n    data: TUpdateSettings;\n  }\n>({\n  name: 'updateSettings',\n  kind: 'mutation',\n  type: SettingsType,\n  args: {\n    data: updateSettingsInput,\n  },\n  async resolve({ args, context }) {\n    const token =\n      context.req.cookies?.token ?? context.req.headers?.['x-token'];\n    const settings = await settingsService.updateSettings(args.data, token);\n    return settings;\n  },\n});\n\nconst settingsQueries = {\n  setting: SettingsTC.mongooseResolvers.findOne(),\n  settings: SettingsTC.mongooseResolvers.findMany(),\n};\n\nconst settingsMutations = {\n  updateSettings: SettingsTC.mongooseResolvers.updateOne(),\n  createSettings,\n  updateSettingsCreditScoreParams,\n  updateInternalCreditScoreValue,\n  updateSettingsService,\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const currencies = await settingsService.find({});\n    return res.status(200).json({ success: true, currencies });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const currency = await settingsService.findOne({ _id: req.params._id });\n    return res.status(200).json({ success: true, currency });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const currency = await settingsService.create(req.body);\n    return res.status(200).json({ success: true, currency });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const currency = await settingsService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, currency });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await settingsService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport { settingsQueries, settingsMutations };\n"]}