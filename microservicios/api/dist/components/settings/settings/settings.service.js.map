{"version":3,"file":"settings.service.js","sourceRoot":"/","sources":["components/settings/settings/settings.service.ts"],"names":[],"mappings":";;;;AAAA,wEAA+B;AAQ/B,0CAA8D;AAM9D,qDAA8E;AAC9E,kFAA4D;AAE5D,SAAsB,OAAO,CAC3B,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,yBAAO,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,yBAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC1D,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAA6B,EAC7B,MAA6D,EAC7D,OAAuC;;QAEvC,OAAO,yBAAO,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3D,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,QAAkB;;QAC7C,OAAO,yBAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,+BAA+B,CACnD,IAA2C;;QAE3C,MAAM,OAAO,GAAG,yBAAO,CAAC,gBAAgB,CACtC;YACE,GAAG,EAAE,IAAI,CAAC,GAAG;SACd,EACD;YACE,KAAK,EAAE;gBACL,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;aAC1C;SACF,EACD;YACE,GAAG,EAAE,IAAI;YACT,aAAa,EAAE,IAAI;SACpB,CACF,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC;CAAA;AAnBD,0EAmBC;AAED,SAAsB,8BAA8B,CAClD,IAA0C;;QAE1C,MAAM,WAAW,GAAG,yBAAO,CAAC,gBAAgB,CAC1C,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EACjB,EAAE,IAAI,EAAE,EAAE,gCAAgC,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAC1D,EAAE,YAAY,EAAE,CAAC,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CACvD,CAAC;QACF,OAAO,WAAW,CAAC;IACrB,CAAC;CAAA;AATD,wEASC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,IAAA,qBAAa,EAAC,IAAI,EAAE,OAAO,EAAE,yBAAO,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC;CAAA;AARD,gCAQC;AAED,SAAsB,cAAc,CAAC,IAAqB,EAAE,KAAa;;QACvE,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,IAAI,CAAC;SACb;QAED,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,CAAmB,CAAC;QACpD,MAAM,cAAc,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC;YAC/C,GAAG,EAAE,OAAO,CAAC,EAAE;YACf,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACnD,MAAM,IAAI,qBAAa,CACrB,mDAAmD,CACpD,CAAC;SACH;QAED,MAAM,YAAY,GAAG,yBAAO,CAAC,gBAAgB,CAC3C;YACE,EAAE,EAAE,IAAI,CAAC,GAAG;SACb,EACD;YACE,IAAI,EAAE;gBACJ,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS;gBACtC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW;aAC3C;SACF,CACF,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;CAAA;AA/BD,wCA+BC;AAED,SAAsB,gBAAgB;;QACpC,MAAM,OAAO,GAAG,MAAM,yBAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QACxD,OAAO,OAAO,CAAC;IACjB,CAAC;CAAA;AAHD,4CAGC","sourcesContent":["import jwt from 'jsonwebtoken';\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { NoSentryError, paginateModel } from '../../../utils';\nimport {\n  TUpdateInternalCreditScoreValueInput,\n  TUpdateSettingsCreditScoreParamsInput,\n  TUpdateSettings,\n} from './settings.dto';\nimport { ISettings as ISetting, Settings as Setting } from './settings.model';\nimport * as userService from '../../user/user/user.service';\n\nexport async function findOne(\n  filter?: FilterQuery<ISetting>,\n  projection?: ProjectionType<ISetting> | null,\n  options?: QueryOptions<ISetting> | null\n) {\n  return Setting.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ISetting>,\n  projection?: ProjectionType<ISetting> | null,\n  options?: QueryOptions<ISetting> | null\n) {\n  return Setting.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ISetting>,\n  update: UpdateQuery<ISetting> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ISetting> | null\n) {\n  return Setting.updateOne(filter, update, options).exec();\n}\n\nexport async function create(settings: ISetting) {\n  return Setting.create(settings);\n}\n\nexport async function updateSettingsCreditScoreParams(\n  body: TUpdateSettingsCreditScoreParamsInput\n) {\n  const setting = Setting.findOneAndUpdate(\n    {\n      _id: body._id,\n    },\n    {\n      $push: {\n        creditScoreParams: body.creditScoreParams,\n      },\n    },\n    {\n      new: true,\n      runValidators: true,\n    }\n  );\n\n  return setting;\n}\n\nexport async function updateInternalCreditScoreValue(\n  body: TUpdateInternalCreditScoreValueInput\n) {\n  const creditScore = Setting.findOneAndUpdate(\n    { _id: body._id },\n    { $set: { 'creditScoreParams.$[crs].value': body.value } },\n    { arrayFilters: [{ 'crs.name': { $eq: body.name } }] }\n  );\n  return creditScore;\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ISetting>,\n  projection?: ProjectionType<ISetting> | null,\n  options?: QueryOptions<ISetting> | null\n) {\n  return paginateModel(page, perPage, Setting, filter, projection, options);\n}\n\nexport async function updateSettings(body: TUpdateSettings, token: string) {\n  if (!token) {\n    return null;\n  }\n\n  const payload = jwt.decode(token) as { id: string };\n  const userSuperAdmin = await userService.findOne({\n    _id: payload.id,\n    active: true,\n  });\n\n  if (!userSuperAdmin.userRole.includes('superadmin')) {\n    throw new NoSentryError(\n      'El usuario no cuenta con los permisos suficientes'\n    );\n  }\n\n  const interestRate = Setting.findOneAndUpdate(\n    {\n      id: body._id,\n    },\n    {\n      $set: {\n        interestRate: body.interestRate,\n        offerExpiration: body.offerExpiration,\n        lenderFee: body.contractFees.lenderFee,\n        borrowerFee: body.contractFees.borrowerFee,\n      },\n    }\n  );\n  return interestRate;\n}\n\nexport async function getActiveSetting() {\n  const setting = await Setting.findOne({ active: true });\n  return setting;\n}\n"]}