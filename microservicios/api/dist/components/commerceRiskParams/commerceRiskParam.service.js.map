{"version":3,"file":"commerceRiskParam.service.js","sourceRoot":"/","sources":["components/commerceRiskParams/commerceRiskParam.service.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport {\n  ICommerceRiskParam,\n  CommerceRiskParam,\n} from './commerceRiskParam.model';\nimport { paginateModel } from '../../utils/pagination';\nimport { getUserInfo } from '../../utils/walletService/userInfo';\nimport { NoSentryError } from '../../utils';\nimport * as creditScoreService from '../creditScore/creditScore/creditScore.service';\nimport { sendEmail } from '../../utils/emails/wauEmail';\nimport { TGetCommerceRiskParamsWithCreditScore } from './commerceRiskParam.dto';\n\nexport async function findOne(\n  filter?: FilterQuery<ICommerceRiskParam>,\n  projection?: ProjectionType<ICommerceRiskParam> | null,\n  options?: QueryOptions<ICommerceRiskParam> | null\n) {\n  return CommerceRiskParam.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ICommerceRiskParam>,\n  projection?: ProjectionType<ICommerceRiskParam> | null,\n  options?: QueryOptions<ICommerceRiskParam> | null\n) {\n  return CommerceRiskParam.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ICommerceRiskParam>,\n  update: UpdateQuery<ICommerceRiskParam> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ICommerceRiskParam> | null\n) {\n  return CommerceRiskParam.updateOne(filter, update, options).exec();\n}\n\nexport async function create(commerceRiskParam: ICommerceRiskParam) {\n  return CommerceRiskParam.create(commerceRiskParam);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ICommerceRiskParam>,\n  projection?: ProjectionType<ICommerceRiskParam> | null,\n  options?: QueryOptions<ICommerceRiskParam> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    CommerceRiskParam,\n    filter,\n    projection,\n    options\n  );\n}\n\nexport async function getCommerceRiskParamsWithCreditScore(\n  body: TGetCommerceRiskParamsWithCreditScore,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const credolabDataset = await creditScoreService.getCredolabDataset(\n    body.credolabReferenceNumber\n  );\n\n  let creditScore = null;\n\n  credolabDataset.forEach((insight) => {\n    if (insight?.code === 'Score') creditScore = insight?.value?.score;\n  });\n\n  if (!creditScore) {\n    throw new NoSentryError('Credolab score not available');\n  }\n\n  const createdCreditScoreUser = await creditScoreService.create(\n    {\n      values: {\n        referenceNumber: body.credolabReferenceNumber,\n        value: creditScore,\n        provider: 'credolab',\n      },\n    },\n    token\n  );\n\n  const userName = user?.metamapStatus?.dni_firstName ?? user?.name;\n\n  const userLastName = user?.metamapStatus?.dni_lastName ?? user?.lastname;\n\n  if (createdCreditScoreUser) {\n    await sendEmail(\n      'credolab_score_created',\n      token,\n      {\n        name: `${userName} ${userLastName}`,\n      },\n      null,\n      user?.email\n    );\n  }\n\n  const filters = {\n    active: true,\n    commerce: body.commerce,\n    withCreditScoring: true,\n    creditScoreLowerLimit: {\n      $lte: creditScore,\n    },\n    creditScoreUpperLimit: {\n      $gte: creditScore,\n    },\n    minAmountUSD: {\n      $lte: body.amountUSD,\n    },\n    maxAmountUSD: {\n      $gte: body.amountUSD,\n    },\n  };\n\n  return pagination(body.page, body.perPage, filters);\n}\n"]}