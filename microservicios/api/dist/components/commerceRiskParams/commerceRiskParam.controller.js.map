{"version":3,"file":"commerceRiskParam.controller.js","sourceRoot":"/","sources":["components/commerceRiskParams/commerceRiskParam.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { schemaComposer } from 'graphql-compose';\nimport { NextFunction, Request, Response } from 'express';\nimport { CommerceRiskParamTC } from './commerceRiskParam.model';\nimport * as commerceRiskParamService from './commerceRiskParam.service';\nimport {\n  CommerceRiskParamTypePlural,\n  GetCommerceRiskParamsWithCreditScoreInput,\n} from './commerceRiskParam.dto';\nimport { buildPaginationType } from '../../utils';\n\nconst CommerceRiskParamsPaginationType =\n  buildPaginationType('CommerceRiskParam');\n\nconst getCommerceRiskParamsWithCreditScore = schemaComposer.createResolver<any>(\n  {\n    name: 'get commerce risk params with user credit score',\n    description:\n      'get all commerce risk params that match with user credit score',\n    kind: 'query',\n    type: CommerceRiskParamsPaginationType,\n    args: {\n      data: GetCommerceRiskParamsWithCreditScoreInput,\n    },\n    async resolve({ args, context }) {\n      const token = await context.req.headers?.authorization;\n      const commerceRiskParams =\n        await commerceRiskParamService.getCommerceRiskParamsWithCreditScore(\n          args?.data,\n          token\n        );\n      return commerceRiskParams;\n    },\n  }\n);\n\nconst commerceRiskParamQueries = {\n  commerceRiskParam: CommerceRiskParamTC.mongooseResolvers.findOne(),\n  commerceRiskParams: CommerceRiskParamTC.mongooseResolvers.findMany({\n    limit: { defaultValue: 1000000 },\n  }),\n  commerceRiskParamPagination:\n    CommerceRiskParamTC.mongooseResolvers.pagination(),\n  getCommerceRiskParamsWithCreditScore,\n};\n\nconst commerceRiskParamMutations = {\n  createCommerceRiskParam: CommerceRiskParamTC.mongooseResolvers.createOne(),\n  updateCommerceRiskParam: CommerceRiskParamTC.mongooseResolvers.updateOne(),\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const commerceRiskParam = await commerceRiskParamService.find({});\n    return res.status(200).json({ success: true, commerceRiskParam });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const commerceRiskParam = await commerceRiskParamService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, commerceRiskParam });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const commerceRiskParam = await commerceRiskParamService.create(req.body);\n    return res.status(200).json({ success: true, commerceRiskParam });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const commerceRiskParam = await commerceRiskParamService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, commerceRiskParam });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await commerceRiskParamService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport { commerceRiskParamQueries, commerceRiskParamMutations };\n"]}