{"version":3,"file":"loanRequest.controller.js","sourceRoot":"/","sources":["components/loanRequest/loanRequest.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type { Request, Response, NextFunction } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport {\n  CreateLoanRequestInput,\n  CreateLoanOfferInput,\n  LoanRequestType,\n  TCreateLoanRequest,\n  TCreateLoanOffer,\n  getLoanOffersForRequestType,\n  getLoanRequestInput,\n  getLoanOfferRequestType,\n  getOneLoanOfferRequestInput,\n  GetMyLoanRequestsInput,\n  getUserRequestAmountsType,\n  GetMarketLoanRequestsInput,\n  GetCostsOfRequestInput,\n  GetCostsOfRequestType,\n  TGetCostsOfRequest,\n  TCancelLoanRequest,\n  CancelLoanRequestInput,\n  GetUserRequestAmountInput,\n  validateForLoanRequestType,\n  ValidateForLoanRequestInput,\n} from './loanRequest.dto';\nimport { LoanRequestTC } from './loanRequest.model';\nimport * as loanRequestService from './loanRequest.service';\nimport { buildPaginationType } from '../../utils/pagination';\nimport { getUserInfo } from '../../utils/walletService/userInfo';\nimport { validateRequestFee } from '../../utils/validations/request';\nimport * as settingsService from '../settings/settings/settings.service';\n\nconst LoanRequestPaginationType = buildPaginationType('LoanRequest');\n\nconst getMarketLoanRequests = schemaComposer.createResolver<any>({\n  name: 'getAllLoanRequests',\n  kind: 'query',\n  description: 'get all loan requests',\n  type: LoanRequestPaginationType,\n  args: {\n    data: GetMarketLoanRequestsInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const loanRequested = await loanRequestService.getMarketLoanRequests(\n      args?.data,\n      token\n    );\n    return loanRequested;\n  },\n});\n\nconst createLoanOffer = schemaComposer.createResolver<\n  any,\n  {\n    data: TCreateLoanOffer;\n  }\n>({\n  name: 'createLoanOffer',\n  description: 'create offer for a request',\n  kind: 'mutation',\n  type: getLoanOfferRequestType,\n  args: {\n    data: CreateLoanOfferInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const offerRequest = await loanRequestService.createLoanOffer(\n      args?.data,\n      token\n    );\n    return offerRequest;\n  },\n});\n\nexport const createLoanRequest = schemaComposer.createResolver<\n  any,\n  {\n    data: TCreateLoanRequest;\n  }\n>({\n  name: 'createLoanRequest',\n  kind: 'mutation',\n  description: 'create loan request',\n  type: LoanRequestType,\n  args: {\n    data: CreateLoanRequestInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const loanRequest = await loanRequestService.create(args?.data, token);\n    return loanRequest;\n  },\n});\n\nconst getAllOffersForRequest = schemaComposer.createResolver<any>({\n  name: 'getAllOffersForRequest',\n  kind: 'query',\n  description: 'get all offers for requests',\n  type: getLoanOffersForRequestType,\n  args: {\n    data: getLoanRequestInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const loanRequested = await loanRequestService.getLoanOffersForRequest(\n      args?.data,\n      token\n    );\n    return loanRequested;\n  },\n});\n\nconst getOneOfferForRequest = schemaComposer.createResolver<any>({\n  name: 'getAllOffersForRequest',\n  kind: 'query',\n  description: 'get one offer for request',\n  type: getLoanOfferRequestType,\n  args: {\n    data: getOneLoanOfferRequestInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const loanOffer = await loanRequestService.getOneLoanOfferForRequest(\n      args?.data,\n      token\n    );\n    return loanOffer;\n  },\n});\n\nconst getMyLoanRequests = schemaComposer.createResolver<any>({\n  name: 'getMyLoanRequests',\n  kind: 'query',\n  description: 'get one offer for request',\n  type: LoanRequestPaginationType,\n  args: {\n    data: GetMyLoanRequestsInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const loanRequests = await loanRequestService.getMyLoanRequests(\n      args?.data,\n      token\n    );\n    return loanRequests;\n  },\n});\n\nconst getUserRequestAmounts = schemaComposer.createResolver<any>({\n  name: 'getUserRequestAmounts',\n  kind: 'query',\n  description: 'get all possible amounts a user can request',\n  type: getUserRequestAmountsType,\n  args: {\n    data: GetUserRequestAmountInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    return loanRequestService.getUserRequestAmounts(token, args?.data);\n  },\n});\n\nconst validateForLoanRequest = schemaComposer.createResolver<any>({\n  name: 'validateForLoanRequest',\n  kind: 'query',\n  description: 'validate if user is allowed to make loan request',\n  type: validateForLoanRequestType,\n  args: {\n    data: ValidateForLoanRequestInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const { data: user } = await getUserInfo(token);\n    const settings = await settingsService.findOne({ active: true });\n    const { userLoanRequest, serviceFee } = await validateRequestFee(\n      args?.data.currency,\n      settings,\n      args?.data.amount,\n      user\n    );\n    return loanRequestService.validateForLoanRequest(\n      token,\n      user,\n      serviceFee,\n      userLoanRequest,\n      settings,\n      args?.data\n    );\n  },\n});\n\nexport const getCostsOfLoanRequest = schemaComposer.createResolver<\n  any,\n  {\n    data: TGetCostsOfRequest;\n  }\n>({\n  name: 'createLoanRequest',\n  kind: 'mutation',\n  description: 'create loan request',\n  type: GetCostsOfRequestType,\n  args: {\n    data: GetCostsOfRequestInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const loanRequest = await loanRequestService.getCostsOfRequest(\n      args?.data,\n      token\n    );\n    return loanRequest;\n  },\n});\n\nexport const cancelLoanRequest = schemaComposer.createResolver<\n  any,\n  {\n    data: TCancelLoanRequest;\n  }\n>({\n  name: 'cancelLoanRequest',\n  kind: 'mutation',\n  description: 'cancel loan request',\n  type: LoanRequestType,\n  args: {\n    data: CancelLoanRequestInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const loanRequest = await loanRequestService.cancelRequest(\n      args?.data,\n      token\n    );\n    return loanRequest;\n  },\n});\n\nconst loanRequestQueries = {\n  loanRequest: LoanRequestTC.mongooseResolvers.findOne(),\n  loanRequests: LoanRequestTC.mongooseResolvers.findMany({\n    limit: { defaultValue: 1000000 },\n  }),\n  loanRequestPagination: LoanRequestTC.mongooseResolvers.pagination(),\n  getMarketLoanRequests,\n  getAllOffersForRequest,\n  getOneOfferForRequest,\n  getMyLoanRequests,\n  getUserRequestAmounts,\n  getCostsOfLoanRequest,\n  validateForLoanRequest,\n};\n\nconst loanRequestMutations = {\n  updateLoanRequest: LoanRequestTC.mongooseResolvers.updateOne(),\n  updateManyLoan: LoanRequestTC.mongooseResolvers.updateMany(),\n  createLoanRequest,\n  createLoanOffer,\n  cancelLoanRequest,\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const loanRequest = await loanRequestService.find({});\n    return res.status(200).json({ success: true, loanRequest });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const loanRequest = await loanRequestService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, loanRequest });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const { token } = req.cookies;\n    const loanRequest = await loanRequestService.create(req.body, token);\n    return res.status(200).json({ success: true, loanRequest });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const loanRequest = await loanRequestService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, loanRequest });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await loanRequestService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport { loanRequestQueries, loanRequestMutations };\n"]}