{"version":3,"file":"loanRequest.model.js","sourceRoot":"/","sources":["components/loanRequest/loanRequest.model.ts"],"names":[],"mappings":";;;;AAAA,uEAA2D;AAC3D,uCAAiE;AACjE,0CAAoD;AACpD,kEAAuE;AAmC1D,QAAA,iBAAiB,GAAG,IAAI,iBAAM,CACzC;IACE,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;KACb;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;KACb;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC;KACX;IACD,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;KACb;IACD,YAAY,EAAE;QACZ,IAAI,EAAE;YACJ,IAAI,EAAE,MAAM;SACb;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,MAAM;SACb;QACD,OAAO,EAAE;YACP,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,KAAK;SACf;QACD,GAAG,EAAE;YACH,IAAI,EAAE,MAAM;SACb;QACD,KAAK,EAAE;YACL,IAAI,EAAE,MAAM;SACb;KACF;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAC;QACjD,OAAO,EAAE,QAAQ;KAClB;IACD,sBAAsB,EAAE;QACtB,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,UAAU;KAChB;IACD,MAAM,EAAE;QACN;YACE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;YAC3B,GAAG,EAAE,WAAW;SACjB;KACF;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;KACb;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;CACF,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,yBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAgB,IAAI;;QAChD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,sEAAsE;YACtE,MAAM,OAAO,GAAG,MAAM,mBAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,CAAC;YAC5E,IAAI,CAAC,eAAe,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;SAC3E;QACD,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,IAAA,gBAAK,EAC9B,aAAa,EACb,yBAAiB,CAClB,CAAC;AAEW,QAAA,aAAa,GAAG,IAAA,0CAAe,EAC1C,mBAAkB,CACnB,CAAC;AACF,qBAAa,CAAC,WAAW,CAAC,wBAAwB,EAAE;IAClD,QAAQ,EAAE,GAAG,EAAE,CAAC,qBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACvE,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,sBAAsB;KAC/C;IACD,UAAU,EAAE,EAAE,sBAAsB,EAAE,CAAC,EAAE;CAC1C,CAAC,CAAC;AAEH,qBAAa,CAAC,WAAW,CAAC,QAAQ,EAAE;IAClC,QAAQ,EAAE,GAAG,EAAE,CAAC,6BAAW,CAAC,iBAAiB,CAAC,cAAc,EAAE;IAC9D,WAAW,EAAE;QACX,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM;KAChC;IACD,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;CAC1B,CAAC,CAAC","sourcesContent":["import { composeMongoose } from 'graphql-compose-mongoose';\nimport { Schema, Model, Types, Document, model } from 'mongoose';\nimport { CurrencyTC, ICurrency } from '../currency';\nimport { ILoanOffer, LoanOfferTC } from '../loanOffer/loanOffer.model';\n\nexport type LoanRequestStatusEnum =\n  | 'active'\n  | 'closed'\n  | 'canceled'\n  | 'expired';\n\nexport interface ILoanRequest {\n  _id?: any;\n  amountInUSDC: number;\n  installments: number;\n  timesClicked: number;\n  selectedWallet: string;\n  borrower: string;\n  borrowerInfo?: {\n    name: string;\n    lastName: string;\n    country: string;\n    dni: string;\n    email: string;\n  };\n  status?: LoanRequestStatusEnum;\n  selectedWalletCurrency: Types.ObjectId | ICurrency;\n  offers: Array<Types.ObjectId | ILoanOffer>;\n  active: boolean;\n  referenceNumber: number;\n  blockId?: string;\n  country?: string;\n  creditScore?: number;\n}\n\nexport type LoanRequestDocument = Document<Types.ObjectId, any, ILoanRequest> &\n  ILoanRequest;\n\nexport const loanRequestSchema = new Schema<ILoanRequest>(\n  {\n    amountInUSDC: {\n      type: Number,\n    },\n    installments: {\n      type: Number,\n    },\n    timesClicked: {\n      type: Number,\n      default: 0,\n    },\n    selectedWallet: {\n      type: String,\n    },\n    borrowerInfo: {\n      name: {\n        type: String,\n      },\n      lastName: {\n        type: String,\n      },\n      country: {\n        type: String,\n        default: 'VEN',\n      },\n      dni: {\n        type: String,\n      },\n      email: {\n        type: String,\n      },\n    },\n    borrower: {\n      type: String,\n    },\n    status: {\n      type: String,\n      enum: ['active', 'closed', 'canceled', 'expired'],\n      default: 'active',\n    },\n    selectedWalletCurrency: {\n      type: Schema.Types.ObjectId,\n      ref: 'Currency',\n    },\n    offers: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: 'LoanOffer',\n      },\n    ],\n    referenceNumber: {\n      type: Number,\n      unique: true,\n    },\n    blockId: {\n      type: String,\n    },\n    country: {\n      type: String,\n    },\n    creditScore: {\n      type: Number,\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nloanRequestSchema.pre('save', async function (next) {\n  if (!this.referenceNumber) {\n    // Buscar el número de referencia más alto en la colección y sumarle 1\n    const highest = await LoanRequest.findOne().sort('-referenceNumber').exec();\n    this.referenceNumber = (highest && highest.referenceNumber + 1) || 100000;\n  }\n  next();\n});\n\nexport const LoanRequest = model<ILoanRequest, Model<ILoanRequest>>(\n  'LoanRequest',\n  loanRequestSchema\n);\n\nexport const LoanRequestTC = composeMongoose<LoanRequestDocument>(\n  LoanRequest as any\n);\nLoanRequestTC.addRelation('selectedWalletCurrency', {\n  resolver: () => CurrencyTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.selectedWalletCurrency,\n  },\n  projection: { selectedWalletCurrency: 1 },\n});\n\nLoanRequestTC.addRelation('offers', {\n  resolver: () => LoanOfferTC.mongooseResolvers.dataLoaderMany(),\n  prepareArgs: {\n    _ids: (source) => source.offers,\n  },\n  projection: { offers: 1 },\n});\n"]}