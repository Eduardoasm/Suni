{"version":3,"file":"notification.service.js","sourceRoot":"/","sources":["components/notification/notification.service.ts"],"names":[],"mappings":";;;;AAQA,uCAA4C;AAC5C,6DAAmE;AACnE,iEAAiE;AAGjE,SAAsB,OAAO,CAC3B,MAAmC,EACnC,UAAiD,EACjD,OAA4C;;QAE5C,OAAO,iCAAY,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAClE,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAAmC,EACnC,UAAiD,EACjD,OAA4C;;QAE5C,OAAO,iCAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/D,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAAkC,EAClC,MAAkE,EAClE,OAA4C;;QAE5C,OAAO,iCAAY,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,YAA2B,EAAE,OAAa;;QACrE,OAAO,iCAAY,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAC1D,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAAmC,EACnC,UAAiD,EACjD,OAA4C;;QAE5C,OAAO,IAAA,qBAAa,EAClB,IAAI,EACJ,OAAO,EACP,iCAAY,EACZ,MAAM,EACN,UAAU,EACV,OAAO,CACR,CAAC;IACJ,CAAC;CAAA;AAfD,gCAeC;AAED,SAAsB,iBAAiB,CACrC,IAAuB,EACvB,KAAa;;QAEb,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,sBAAW,EAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,IAAI,CAAC,EAAE;YACb,MAAM,EAAE,IAAI;SACb,CAAC;QAEF,MAAM,OAAO,GAAG;YACd,IAAI,EAAE;gBACJ,SAAS,EAAE,CAAC,CAAC;aACd;SACF,CAAC;QAEF,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACrE,CAAC;CAAA;AAlBD,8CAkBC;AAED,mFAAmF;AACnF,qDAAqD;AAErD,+BAA+B;AAC/B,uBAAuB;AACvB,qBAAqB;AACrB,OAAO;AAEP,kDAAkD;AAClD,IAAI;AAEJ,SAAsB,kBAAkB,CACtC,IAAyB,EACzB,KAAa;;QAEb,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,sBAAW,EAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,YAAY,GAAG,MAAM,iCAAY,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAEnE,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC;QAC5B,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;QAE1B,OAAO,YAAY,CAAC;IACtB,CAAC;CAAA;AAZD,gDAYC","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { paginateModel } from '../../utils';\nimport { INotification, Notification } from './notification.model';\nimport { getUserInfo } from '../../utils/walletService/userInfo';\nimport { TCancelNotification, TGetNotifications } from './notification.dto';\n\nexport async function findOne(\n  filter?: FilterQuery<INotification>,\n  projection?: ProjectionType<INotification> | null,\n  options?: QueryOptions<INotification> | null\n) {\n  return Notification.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<INotification>,\n  projection?: ProjectionType<INotification> | null,\n  options?: QueryOptions<INotification> | null\n) {\n  return Notification.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<INotification>,\n  update: UpdateQuery<INotification> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<INotification> | null\n) {\n  return Notification.updateOne(filter, update, options).exec();\n}\n\nexport async function create(notification: INotification, session?: any) {\n  return Notification.create([notification], { session });\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<INotification>,\n  projection?: ProjectionType<INotification> | null,\n  options?: QueryOptions<INotification> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    Notification,\n    filter,\n    projection,\n    options\n  );\n}\n\nexport async function findNotifications(\n  body: TGetNotifications,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const filters = {\n    user: user.id,\n    active: true,\n  };\n\n  const options = {\n    sort: {\n      createdAt: -1,\n    },\n  };\n\n  return pagination(body.page, body.perPage, filters, null, options);\n}\n\n// export async function customCreate(notification: INotification, token: string) {\n//   const { data: user } = await getUserInfo(token);\n\n//   const userNotification = {\n//     ...notification,\n//     user: user.id,\n//   };\n\n//   return Notification.create(userNotification);\n// }\n\nexport async function cancelNotification(\n  body: TCancelNotification,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const notification = await Notification.findOne({ _id: body._id });\n\n  notification.active = false;\n  await notification.save();\n\n  return notification;\n}\n"]}