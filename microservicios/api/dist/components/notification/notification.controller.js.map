{"version":3,"file":"notification.controller.js","sourceRoot":"/","sources":["components/notification/notification.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type { Request, Response, NextFunction } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport { NotificationTC } from './notification.model';\nimport * as notificationService from './notification.service';\nimport { buildPaginationType } from '../../utils';\nimport {\n  CancelNotificationInput,\n  CreateNotificationInput,\n  GetNotificationsInput,\n  NotificationType,\n  TGetNotifications,\n} from './notification.dto';\n\nconst NotificationPaginationType = buildPaginationType('Notification');\n\nconst findNotifications = schemaComposer.createResolver<\n  any,\n  {\n    data: TGetNotifications;\n  }\n>({\n  name: 'Findnotifications',\n  description: 'Find notifications for user',\n  kind: 'query',\n  type: NotificationPaginationType,\n  args: {\n    data: GetNotificationsInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const notifications = await notificationService.findNotifications(\n      args?.data,\n      token\n    );\n    return notifications;\n  },\n});\n\nconst customCreateNotification = schemaComposer.createResolver<any>({\n  name: 'CreateNotification',\n  description: 'Create notification',\n  kind: 'mutation',\n  type: NotificationType,\n  args: {\n    data: CreateNotificationInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const notifications = await notificationService.findNotifications(\n      args?.data,\n      token\n    );\n    return notifications;\n  },\n});\n\nconst cancelNotification = schemaComposer.createResolver<any>({\n  name: 'CancelNotification',\n  description: 'cancel notification',\n  kind: 'mutation',\n  type: NotificationType,\n  args: {\n    data: CancelNotificationInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const notifications = await notificationService.cancelNotification(\n      args?.data,\n      token\n    );\n    return notifications;\n  },\n});\n\nconst notificationQueries = {\n  notification: NotificationTC.mongooseResolvers.findOne(),\n  notifications: NotificationTC.mongooseResolvers.findMany({\n    limit: { defaultValue: 1000000 },\n  }),\n  notificationPagination: NotificationTC.mongooseResolvers.pagination(),\n  findNotifications,\n};\n\nconst notificationMutations = {\n  updateNotification: NotificationTC.mongooseResolvers.updateOne(),\n  createNotification: NotificationTC.mongooseResolvers.createOne(),\n  customCreateNotification,\n  cancelNotification,\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const notification = await notificationService.find({});\n    return res.status(200).json({ success: true, notification });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const notification = await notificationService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, notification });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const notification = await notificationService.create(req.body);\n    return res.status(200).json({ success: true, notification });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const notification = await notificationService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, notification });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await notificationService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport { notificationQueries, notificationMutations };\n"]}