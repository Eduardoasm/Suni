{"version":3,"file":"wallet.service.js","sourceRoot":"/","sources":["components/wallet/wallet.service.ts"],"names":[],"mappings":";;;;AAQA,uCAA4C;AAC5C,iDAAiD;AAEjD,SAAsB,OAAO,CAC3B,MAA6B,EAC7B,UAA2C,EAC3C,OAAsC;;QAEtC,OAAO,qBAAM,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC5D,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAA6B,EAC7B,UAA2C,EAC3C,OAAsC;;QAEtC,OAAO,qBAAM,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACzD,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAA4B,EAC5B,MAA4D,EAC5D,OAAsC;;QAEtC,OAAO,qBAAM,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC1D,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,MAAe;;QAC1C,OAAO,qBAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAA6B,EAC7B,UAA2C,EAC3C,OAAsC;;QAEtC,OAAO,IAAA,qBAAa,EAAC,IAAI,EAAE,OAAO,EAAE,qBAAM,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;CAAA;AARD,gCAQC","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { paginateModel } from '../../utils';\nimport { IWallet, Wallet } from './wallet.model';\n\nexport async function findOne(\n  filter?: FilterQuery<IWallet>,\n  projection?: ProjectionType<IWallet> | null,\n  options?: QueryOptions<IWallet> | null\n) {\n  return Wallet.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IWallet>,\n  projection?: ProjectionType<IWallet> | null,\n  options?: QueryOptions<IWallet> | null\n) {\n  return Wallet.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IWallet>,\n  update: UpdateQuery<IWallet> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IWallet> | null\n) {\n  return Wallet.updateOne(filter, update, options).exec();\n}\n\nexport async function create(wallet: IWallet) {\n  return Wallet.create(wallet);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IWallet>,\n  projection?: ProjectionType<IWallet> | null,\n  options?: QueryOptions<IWallet> | null\n) {\n  return paginateModel(page, perPage, Wallet, filter, projection, options);\n}\n"]}