{"version":3,"file":"user.controller.js","sourceRoot":"/","sources":["components/user/user/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type { Request, Response, NextFunction } from 'express';\nimport axios, { Axios } from 'axios';\nimport { schemaComposer } from 'graphql-compose';\nimport { UserTC } from './user.model';\nimport { TUpdateUserWallet, UserRole, GetUserType } from './user.dto';\nimport * as userService from './user.service';\n\nexport const getUser = schemaComposer.createResolver<any>({\n  name: 'getUser',\n  kind: 'query',\n  description: 'get user auth',\n  type: GetUserType,\n  async resolve({ context }) {\n    const token = context.req.headers?.authorization;\n    const user = await userService.getUser(token);\n    return user;\n  },\n});\n\nconst userQueries = {\n  user: UserTC.mongooseResolvers.findOne(),\n  users: UserTC.mongooseResolvers.findMany(),\n  userPagination: UserTC.mongooseResolvers.pagination(),\n  totalUsers: UserTC.mongooseResolvers.count(),\n  getUser,\n};\n\nconst userMutations = {\n  createUser: UserTC.mongooseResolvers.createOne(),\n  updateUser: UserTC.mongooseResolvers.updateOne(),\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const users = await userService.find({});\n    return res.status(200).json({ success: true, users });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const user = await userService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, user });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const user = await userService.create(req.body);\n    return res.status(200).json({ success: true, user });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const user = await userService.updateOne({ _id: req.params._id }, req.body);\n    return res.status(200).json({ success: true, user });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await userService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function webhook(req: Request, res: Response, next: NextFunction) {\n  try {\n    const event = req.body;\n\n    const token = req?.headers?.authorization;\n\n    const config = {\n      method: 'post',\n      baseURL: process.env.SERVICE_URL,\n      url: `/auth/updateUser`,\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    };\n\n    const USER_STATUS = {\n      VERIFIED: 'verified',\n      REVIEW_NEEDED: 'reviewNeeded',\n      REJECTED: 'rejected',\n    };\n\n    const USER_VERIFIED = {\n      // objeto con las condicionales de los eventos de metamap\n      [USER_STATUS.VERIFIED]: async (): Promise<any> => {\n        const status = USER_STATUS.VERIFIED.toUpperCase();\n        const { data } = await axios.post(\n          `${config.url}?status=${status}`,\n          null,\n          config\n        );\n        if (!data) {\n          res\n            .status(400)\n            .json({ success: false, error: 'failed to update user' });\n        }\n        return data;\n      },\n      [USER_STATUS.REVIEW_NEEDED]: async (): Promise<any> => {\n        const status = USER_STATUS.REVIEW_NEEDED.toUpperCase();\n        const { data } = await axios.post(\n          `${config.url}?status=${status}`,\n          null,\n          config\n        );\n        if (!data) {\n          res\n            .status(400)\n            .json({ success: false, error: 'failed to update user' });\n        }\n        return data;\n      },\n      [USER_STATUS.REJECTED]: async (): Promise<any> => {\n        const status = USER_STATUS.REJECTED.toUpperCase();\n        const { data } = await axios.post(\n          `${config.url}?status=${status}`,\n          null,\n          config\n        );\n        if (!data) {\n          res\n            .status(400)\n            .json({ success: false, error: 'failed to update user' });\n        }\n        return data;\n      },\n    };\n\n    if (event?.identityStatus) {\n      // como el webhook nos trae varios eventos, apenas nos indique el status de la verificacion se procede a hacer el cambio\n      // de la verificacion de el usuario\n      const userStatusHandler = USER_VERIFIED[event.identityStatus];\n      await userStatusHandler();\n    }\n    res.status(200).send({ success: true, data: 'userUpdate' });\n  } catch (error) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport { userQueries, userMutations };\n"]}