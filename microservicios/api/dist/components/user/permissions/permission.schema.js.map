{"version":3,"file":"permission.schema.js","sourceRoot":"/","sources":["components/user/permissions/permission.schema.ts"],"names":[],"mappings":";;;AAAA,uCAAkC;AAClC,qDAAiD;AACjD,uEAAkE;AAcrD,QAAA,gBAAgB,GAAG,IAAI,iBAAM,CACxC;IACE,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,IAAI;KACX;IACD,GAAG,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,IAAI;KACX;IACD,OAAO,EAAE;QACP;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;SAC7C;KACF;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,IAAA,iDAAsB,EAAC,wBAAgB,EAAE,YAAY,EAAE,gCAAc,CAAC,CAAC","sourcesContent":["import { Schema } from 'mongoose';\nimport { schemaComposer } from 'graphql-compose';\nimport { convertSchemaToGraphQL } from 'graphql-compose-mongoose';\n\nexport type PermissionOptionEnum = 'create' | 'read' | 'update' | 'delete';\n\nexport interface IPermission {\n  _id?: any;\n  name: string;\n  key: string;\n  options: Array<PermissionOptionEnum>;\n  active?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport const permissionSchema = new Schema<IPermission>(\n  {\n    name: {\n      type: String,\n      trim: true,\n    },\n    key: {\n      type: String,\n      trim: true,\n    },\n    options: [\n      {\n        type: String,\n        enum: ['create', 'read', 'update', 'delete'],\n      },\n    ],\n    active: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  { timestamps: true }\n);\n\nconvertSchemaToGraphQL(permissionSchema, 'Permission', schemaComposer);\n"]}