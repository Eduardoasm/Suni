{"version":3,"file":"appeal.model.js","sourceRoot":"/","sources":["components/appeal/appeal/appeal.model.ts"],"names":[],"mappings":";;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,mDAAgE;AAChE,8CAA8D;AAC9D,wDAA2D;AAyB3D,MAAM,YAAY,GAAG,IAAI,iBAAM,CAC7B;IACE,WAAW,EAAE;QACX,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,aAAa;KACnB;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,kCAAkC,CAAC;KACrD;IACD,cAAc,EAAE,CAAC,6BAAgB,CAAC;IAClC,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,6CAA6C,CAAC;QAC/D,IAAI,EAAE,CAAC,sBAAsB,EAAE,cAAc,EAAE,sBAAsB,CAAC;QACtE,OAAO,EAAE,sBAAsB;KAChC;IACD,sBAAsB,EAAE;QACtB,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC;KACzC;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,WAAW,EAAE;QACX,IAAI,EAAE,wBAAU;QAChB,QAAQ,EAAE,CAAC,IAAI,EAAE,yCAAyC,CAAC;KAC5D;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEW,QAAA,MAAM,GAAG,IAAA,gBAAK,EAA0B,QAAQ,EAAE,YAAY,CAAC,CAAC;AAEhE,QAAA,QAAQ,GAAG,IAAA,0CAAe,EAAiB,cAAa,CAAC,CAAC;AAEvE,gBAAQ,CAAC,WAAW,CAAC,aAAa,EAAE;IAClC,QAAQ,EAAE,GAAG,EAAE,CAAC,2BAAa,CAAC,iBAAiB,CAAC,UAAU,EAAE;IAC5D,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW;KACpC;IACD,UAAU,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE;CAC/B,CAAC,CAAC","sourcesContent":["import { Types, model, Document, Model, Schema } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { ITransaction, TransactionTC } from '../../transaction';\nimport { IMultimedia, multimediaSchema } from '../multimedia';\nimport { IUser, userSchema } from '../../user/user.schema';\n\nexport type AppealStatusEnum = 'active' | 'canceled' | 'resolved';\n\nexport type AppealReasonEnum =\n  | 'confirmedNotReceived'\n  | 'notConfirmed'\n  | 'confirmedNotReleased';\n\nexport interface IAppeal {\n  _id?: any;\n  transaction: Types.ObjectId | ITransaction;\n  description: string;\n  paymentReceipt?: Array<IMultimedia>;\n  reason: AppealReasonEnum;\n  finalResultDescription?: string;\n  status: AppealStatusEnum;\n  appealOwner: IUser;\n  active?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type AppealDocument = Document<Types.ObjectId, any, IAppeal> & IAppeal;\n\nconst appealSchema = new Schema<IAppeal>(\n  {\n    transaction: {\n      type: Schema.Types.ObjectId,\n      ref: 'Transaction',\n    },\n    description: {\n      type: String,\n      required: [true, 'Por favor ingrese la descripcion'],\n    },\n    paymentReceipt: [multimediaSchema],\n    reason: {\n      type: String,\n      required: [true, 'Por favor ingrese el motivo de la apelación'],\n      enum: ['confirmedNotReceived', 'notConfirmed', 'confirmedNotReleased'],\n      default: 'confirmedNotReceived',\n    },\n    finalResultDescription: {\n      type: String,\n    },\n    status: {\n      type: String,\n      enum: ['active', 'canceled', 'resolved'],\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    appealOwner: {\n      type: userSchema,\n      required: [true, 'Por favor insertar el usuario que apeló'],\n    },\n  },\n  { timestamps: true }\n);\n\nexport const Appeal = model<IAppeal, Model<IAppeal>>('Appeal', appealSchema);\n\nexport const AppealTC = composeMongoose<AppealDocument>(Appeal as any);\n\nAppealTC.addRelation('transaction', {\n  resolver: () => TransactionTC.mongooseResolvers.dataLoader(),\n  prepareArgs: {\n    _id: (source) => source.transaction,\n  },\n  projection: { transaction: 1 },\n});\n"]}