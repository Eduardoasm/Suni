{"version":3,"file":"appeal.controller.js","sourceRoot":"/","sources":["components/appeal/appeal/appeal.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport createHttpError from 'http-errors';\nimport { schemaComposer } from 'graphql-compose';\nimport {\n  AppealType,\n  TCreateAppeal,\n  CreateAppealInput,\n  CancelAppealInput,\n  TCancelAppeal,\n} from './appeal.dto';\nimport * as appealService from './appeal.service';\nimport { AppealTC } from './appeal.model';\nimport { TransactionType, ManageCryptoAdminInput } from '../../transaction';\n\nexport const createAppeal = schemaComposer.createResolver<\n  any,\n  {\n    data: TCreateAppeal;\n  }\n>({\n  name: 'createAppeal',\n  kind: 'mutation',\n  description: 'create appeal',\n  type: AppealType,\n  args: {\n    data: CreateAppealInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const appeal = await appealService.create(args?.data, token);\n    return appeal;\n  },\n});\n\nexport const cancelAppealUser = schemaComposer.createResolver<\n  any,\n  {\n    data: TCancelAppeal;\n  }\n>({\n  name: 'CancelAppealUser',\n  kind: 'mutation',\n  description: 'Cancel Appeal from user',\n  type: AppealType,\n  args: {\n    data: CancelAppealInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const appeal = await appealService.cancelAppeal(args?.data, token);\n    return appeal;\n  },\n});\n\nconst manageCryptoAdmin = schemaComposer.createResolver<any>({\n  name: 'releaseCryptoAdmin',\n  kind: 'mutation',\n  description: 'release transaction crypto amount by admin to buyer',\n  type: TransactionType,\n  args: {\n    data: ManageCryptoAdminInput,\n  },\n  async resolve({ args }) {\n    const transaction = await appealService.manageCryptoAdmin(args?.data);\n    return transaction;\n  },\n});\n\nconst appealMutations = {\n  createAppeal,\n  updateAppeal: AppealTC.mongooseResolvers.updateOne(),\n  cancelAppealUser,\n  manageCryptoAdmin,\n};\n\nconst appealQueries = {\n  appeal: AppealTC.mongooseResolvers.findOne(),\n  appeals: AppealTC.mongooseResolvers.findMany(),\n  totalAppeal: AppealTC.mongooseResolvers.count(),\n};\n\nexport { appealQueries, appealMutations };\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const token = req?.headers?.authorization;\n    const appeals = await appealService.getAllAppealInfo(\n      token,\n      req?.body?.filter\n    );\n    return res.status(200).json({ appeals });\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function findOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const token = req?.headers?.authorization;\n    const appeal = await appealService.findAppeal(token, {\n      _id: req?.params?._id,\n    });\n    return res.status(200).json({ appeal });\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function manageCryptoAdminApi(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const transaction = await appealService.manageCryptoAdmin(req?.body?.data);\n    return res.status(200).json({ transaction });\n  } catch (error) {\n    console.log(error, 'ERROR');\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n"]}