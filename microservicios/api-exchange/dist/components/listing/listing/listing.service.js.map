{"version":3,"file":"listing.service.js","sourceRoot":"/","sources":["components/listing/listing/listing.service.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose, {\n  type FilterQuery,\n  type ProjectionType,\n  type QueryOptions,\n  type UpdateQuery,\n  type UpdateWithAggregationPipeline,\n  type PipelineStage,\n} from 'mongoose';\nimport { Asset } from '../../asset/asset.model';\nimport { NoSentryError, paginateModel, paginate } from '../../../utils';\nimport { getUserWallet, balanceLock } from '../../../utils/walletService';\nimport { IListing, Listing } from './listing.model';\nimport {\n  TCancelListing,\n  TCreateListing,\n  TGetBestPricesListing,\n  TGetKpiMarketPrice,\n  TGetListingFilter,\n  TGetListingFilterUser,\n  TUpdateListingUser,\n} from './listing.dto';\nimport * as assetService from '../../asset/asset.service';\nimport * as currencyService from '../../currency/currency.service';\nimport { getUser } from '../../../utils/walletService/userWau';\nimport { deleteAd } from '../../../utils/walletService/cancelAd';\nimport * as settingService from '../../settings/settings.service';\nimport * as transactionService from '../../transaction/transaction.service';\nimport { updateBlock } from '../../../utils/walletService/updateLock';\nimport * as paymentMethodCategoryService from '../../paymentMethodCategory/paymentMethodCategory.service';\nimport { apiPriceBtc } from '../../../utils/apiPriceBtc';\nimport { sendEmail } from '../../../utils/emails/sendEmail';\nimport { amountAssetConvert } from '../../../utils/amountAssetConvert';\nimport { validateBtcTransAmount } from '../../../utils/parametersValidations/validateBtcTransAmount';\nimport { getCryptoHolderFee } from '../../../utils/parametersValidations/getCryptoHolderFee';\nimport { getFiatHolderFee } from '../../../utils/parametersValidations/getFiatHolderFee';\nimport { minMaxAmountToAsset } from '../../../utils/minMaxAmountToAsset';\nimport { amountToAsset } from '../../../utils/amountToAsset';\nimport * as bestPriceService from '../../bestPrice/bestPrice.service';\nimport { IBestPrice } from '../../bestPrice/bestPrice.model';\n\nexport async function findOne(\n  filter?: FilterQuery<IListing>,\n  projection?: ProjectionType<IListing> | null,\n  options?: QueryOptions<IListing> | null\n) {\n  return Listing.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IListing>,\n  projection?: ProjectionType<IListing> | null,\n  options?: QueryOptions<IListing> | null\n) {\n  return Listing.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IListing>,\n  update: UpdateQuery<IListing> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IListing> | null\n) {\n  return Listing.updateOne(filter, update, options).exec();\n}\n\nexport async function createListingSale(\n  token: string,\n  listing: TCreateListing\n) {\n  const { data: user } = await getUser(token);\n\n  const session = await mongoose.startSession();\n\n  try {\n    session.startTransaction();\n\n    const asset = await assetService.findOne({ _id: listing.asset });\n\n    const currency = await currencyService.findOne({ _id: listing.currency });\n\n    const STATUS_SUCCESSFUL = 'successful';\n\n    const transactions = await transactionService.find({\n      $or: [{ 'maker.id': user.id }, { 'taker.id': user.id }],\n    });\n    const transactionsSuccessful = await transactionService.find({\n      status: STATUS_SUCCESSFUL,\n      $or: [{ 'maker.id': user.id }, { 'taker.id': user.id }],\n    });\n\n    const wallet = await getUserWallet(token, listing.walletUser);\n    if (!wallet) {\n      throw new NoSentryError('Wallet doesn`t exist');\n    }\n\n    const amountPercentage = (listing.amount * 1) / 100;\n\n    if (wallet.available_balance < listing.amount + amountPercentage) {\n      throw new NoSentryError('Doesn`t have enough balance');\n    }\n    // el listing price se definira como el precio de el listing si no viene el bestPricePercentage\n    // o en caso que venga, se calculara como bestPricePercentage para las funciones que la necesiten\n    let listingPrice: number = listing?.price;\n\n    let bestPrice: IBestPrice;\n\n    if (listing?.bestPricePercentage) {\n      if (listing?.priceReferenceType === 'suni') {\n        bestPrice = await bestPriceService.findOne({\n          currency: listing?.currency,\n          asset: listing?.asset,\n        });\n        listingPrice = listing.bestPricePercentage * bestPrice.saleBestPrice;\n      } else {\n        listingPrice =\n          listing.bestPricePercentage *\n          asset.conversionRateToUsd *\n          currency.conversionRateToUsd;\n      }\n    }\n\n    if (!listing?.amountInAsset) {\n      amountToAsset(listing, listingPrice, asset?.network);\n    }\n\n    const { minAmountAsset, maxAmountAsset } = minMaxAmountToAsset(\n      listing.minAmount,\n      listing.maxAmount,\n      asset.network,\n      listingPrice\n    );\n\n    await amountAssetConvert(listing, asset);\n\n    const settings = await settingService.getActiveSetting();\n\n    await validateBtcTransAmount(settings, asset, listing);\n\n    const makerFee = await getCryptoHolderFee(\n      {\n        transactionAmount: listing.amount,\n        assetNetwork: asset.network,\n        transactionType: 'sale',\n        userRole: 'maker',\n      },\n      settings\n    );\n\n    const type = 'sale';\n\n    const status = 'active';\n\n    const userName = user?.metamapStatus?.dni_firstName ?? user?.name;\n\n    const userLastName = user?.metamapStatus?.dni_lastName ?? user?.lastname;\n\n    const listingProperties: any = {\n      type,\n      status,\n      maker: {\n        id: user?.id,\n        email: user?.email,\n        name: userName,\n        lastname: userLastName,\n      },\n      selectedWallet: { address: wallet.wallet, name: wallet.name },\n      transactionsMaker: transactions.length,\n      transactionsMakerCompleted: transactionsSuccessful.length,\n      comments: listing?.comments,\n      autoReply: listing.autoReply,\n      fee: makerFee,\n      minAmountAsset,\n      maxAmountAsset,\n      originalMaxAssetAmount: maxAmountAsset,\n      bestPrice: bestPrice?._id ?? null,\n    };\n\n    const newListingSale = {\n      ...listing,\n      ...listingProperties,\n    };\n\n    const createdListingSale = await Listing.create([newListingSale], {\n      session,\n    });\n\n    const variables = {\n      name: `${userName} ${userLastName}`,\n    };\n\n    const userEmail = user?.email;\n\n    await sendEmail('ad_registered', token, variables, null, userEmail);\n\n    const ad = await balanceLock({\n      token,\n      wallet: wallet.wallet,\n      amount: listing.amount,\n      makerFee,\n    });\n\n    createdListingSale[0].loanAdId = ad?.data?.id;\n    await createdListingSale[0].save();\n\n    await session.commitTransaction();\n\n    if (!listing.bestPricePercentage) {\n      await bestPriceService.getBestPrice({\n        assetId: listing.asset,\n        currencyId: listing.currency,\n      });\n    }\n\n    return createdListingSale[0];\n  } catch (error) {\n    await session.abortTransaction();\n    console.log('General error in create listing sale');\n    throw new NoSentryError(error);\n  } finally {\n    session.endSession();\n  }\n}\n\nexport async function createListingPurchase(\n  token: string,\n  listing: TCreateListing\n) {\n  const { data: user } = await getUser(token);\n\n  const session = await mongoose.startSession();\n\n  try {\n    session.startTransaction();\n\n    const asset = await assetService.findOne({ _id: listing.asset });\n\n    const currency = await currencyService.findOne({ _id: listing.currency });\n\n    const STATUS_SUCCESSFUL = 'successful';\n\n    const transactions = await transactionService.find({\n      $or: [{ 'maker.id': user.id }, { 'taker.id': user.id }],\n    });\n\n    const transactionsSuccessful = await transactionService.find({\n      status: STATUS_SUCCESSFUL,\n      $or: [{ 'maker.id': user.id }, { 'taker.id': user.id }],\n    });\n\n    let listingPrice: number = listing?.price;\n\n    let bestPrice: IBestPrice;\n\n    if (listing?.bestPricePercentage) {\n      if (listing?.priceReferenceType === 'suni') {\n        bestPrice = await bestPriceService.findOne({\n          currency: listing?.currency,\n          asset: listing?.asset,\n        });\n        listingPrice =\n          listing.bestPricePercentage * bestPrice.purchaseBestPrice;\n      } else {\n        listingPrice =\n          listing.bestPricePercentage *\n          asset.conversionRateToUsd *\n          currency.conversionRateToUsd;\n      }\n    }\n\n    if (!listing?.amountInAsset) {\n      amountToAsset(listing, listingPrice, asset?.network);\n    }\n\n    const { minAmountAsset, maxAmountAsset } = minMaxAmountToAsset(\n      listing.minAmount,\n      listing.maxAmount,\n      asset.network,\n      listingPrice\n    );\n\n    const wallet = await getUserWallet(token, listing.walletUser);\n\n    await amountAssetConvert(listing, asset);\n\n    const settings = await settingService.getActiveSetting();\n\n    await validateBtcTransAmount(settings, asset, listing);\n\n    const type = 'purchase';\n\n    const status = 'active';\n\n    const fee = await getFiatHolderFee(\n      {\n        transactionAmount: listing.amount,\n        assetNetwork: asset.network,\n        transactionType: 'purchase',\n        userRole: 'maker',\n      },\n      settings\n    );\n\n    const userName = user?.metamapStatus?.dni_firstName ?? user?.name;\n\n    const userLastName = user?.metamapStatus?.dni_lastName ?? user?.lastname;\n\n    const listingProperties: any = {\n      type,\n      status,\n      maker: {\n        id: user?.id,\n        email: user?.email,\n        name: userName,\n        lastname: userLastName,\n      },\n      selectedWallet: { address: wallet.wallet, name: wallet.name },\n      transactionsMaker: transactions.length,\n      transactionsMakerCompleted: transactionsSuccessful.length,\n      fee,\n      minAmountAsset,\n      maxAmountAsset,\n      originalMaxAssetAmount: maxAmountAsset,\n      bestPrice: bestPrice?._id ?? null,\n    };\n\n    const newListingPurchase = {\n      ...listing,\n      ...listingProperties,\n    };\n\n    const createdListingPurchase = await Listing.create([newListingPurchase], {\n      session,\n    });\n\n    const variables = {\n      name: `${userName} ${userLastName}`,\n    };\n\n    const userEmail = user?.email;\n\n    await sendEmail('ad_registered', token, variables, null, userEmail);\n\n    await session.commitTransaction();\n\n    if (!listing.bestPricePercentage) {\n      await bestPriceService.getBestPrice({\n        assetId: listing?.asset,\n        currencyId: listing?.currency,\n      });\n    }\n\n    return createdListingPurchase[0];\n  } catch (error) {\n    await session.abortTransaction();\n    throw new NoSentryError(error);\n  } finally {\n    session.endSession();\n  }\n}\n\nexport async function cancelListing(body: TCancelListing, token: string) {\n  const { data: user } = await getUser(token);\n  const takerAssigned = 'taker_assigned';\n\n  // const countryAvailable = await countryService.findOne({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n  const listing = await Listing.findOne({ _id: body.listing });\n\n  if (!listing) throw new NoSentryError('Listing not found');\n\n  if (user?.id !== listing?.maker?.id)\n    throw new NoSentryError('User is not Listing maker');\n\n  if (listing?.status === takerAssigned)\n    throw new NoSentryError('Please finish the transaction');\n\n  if (listing.type === 'sale') await deleteAd(token, listing.loanAdId);\n\n  listing.status = 'canceled';\n  await listing.save();\n\n  return listing;\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IListing>,\n  projection?: ProjectionType<IListing> | null,\n  options?: QueryOptions<IListing> | null\n) {\n  return paginateModel(page, perPage, Listing, filter, projection, options);\n}\n\nexport async function getListingFilter(\n  body: TGetListingFilter,\n  token: string\n): Promise<any> {\n  const { data: user } = await getUser(token);\n\n  // const countryAvailable = await countryService.findOne({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n\n  // Obtenemos el PaymentMethod a través del type enviado desde el front-end\n  const paymentMethod = await paymentMethodCategoryService.findOne({\n    _id: body?.paymentMethods,\n  });\n\n  const asset = await assetService.findOne({ _id: body?.asset });\n\n  const currency = await currencyService.findOne({ _id: body?.currency });\n\n  const validateType = ['purchase', 'sale'];\n\n  if (!validateType.includes(body.type)) {\n    throw new NoSentryError('No is a validate Type');\n  }\n\n  const filters: PipelineStage[] = [\n    {\n      $lookup: {\n        from: 'paymentmethods', // Nombre de la colección de PaymentMethod (en minúsculas y en plural)\n        localField: 'paymentMethods',\n        foreignField: '_id',\n        as: 'paymentMethodsData',\n      },\n    },\n    {\n      $match: {\n        status: {\n          $in: ['active', 'taker_assigned'],\n        },\n        active: true,\n        'maker.id': { $ne: user?.id },\n        type: body?.type,\n        asset: asset?._id ? asset?._id : { $ne: null },\n        currency: currency?._id ? currency?._id : { $ne: null },\n        'paymentMethodsData.type': paymentMethod?._id\n          ? paymentMethod?._id\n          : { $ne: null },\n        amount: { $ne: 0 },\n      },\n    },\n    {\n      $addFields: {\n        completeOrders: {\n          $cond: {\n            if: { $eq: ['$transactionsMakerCompleted', 0] },\n            then: 0,\n            else: {\n              $multiply: [\n                {\n                  $divide: [\n                    '$transactionsMakerCompleted',\n                    '$transactionsMaker',\n                  ],\n                },\n                100,\n              ],\n            },\n          },\n        },\n      },\n    },\n  ];\n\n  if (body?.amount) {\n    filters.push({\n      $match: {\n        $and: [\n          { minAmount: { $lte: body.amount } },\n          { maxAmount: { $gte: body.amount } },\n        ],\n      },\n    });\n  }\n\n  if (body?.order === 'order') {\n    filters.push({\n      $sort: {\n        transactionsMaker: -1,\n      },\n    });\n  } else if (body?.order === 'completionRate') {\n    filters.push({\n      $sort: {\n        completeOrders: -1,\n      },\n    });\n  } else {\n    filters.push({\n      $sort: {\n        price: body.type === 'purchase' ? -1 : 1,\n      },\n    });\n  }\n\n  const listingsFilters = await Listing.aggregate(filters);\n\n  return paginate(body.page, body.perPage, listingsFilters);\n}\n\nexport async function getListingFilterUser(\n  body: TGetListingFilterUser,\n  token: string\n): Promise<any> {\n  const { data: user } = await getUser(token);\n\n  // const countryAvailable = await countryService.find({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n\n  const filters: any = {\n    'maker.id': user?.id,\n    active: true,\n    amount: { $ne: 0 },\n  };\n\n  if (body.type) {\n    filters.type = body.type;\n  }\n\n  if (body.asset) {\n    filters.asset = body.asset;\n  }\n\n  if (body.status) {\n    filters.status = body.status;\n  }\n\n  const options = {\n    sort: {\n      createdAt: -1,\n    },\n  };\n\n  const listingsFilters = await Listing.find(filters, null, options);\n\n  return paginate(body.page, body.perPage, listingsFilters);\n}\n\nexport async function bestPricesListings(\n  body: TGetBestPricesListing\n): Promise<any> {\n  const validateType = ['purchase', 'sale'];\n\n  if (!validateType.includes(body.type)) {\n    throw new NoSentryError('No is a validate Type');\n  }\n  const asset = await assetService.findOne({ _id: body.asset });\n  const currency = await currencyService.findOne({ _id: body.currency });\n\n  const bestPrice = await Listing.aggregate([\n    {\n      $match: {\n        $and: [\n          { active: true },\n          { type: body.type },\n          { asset: asset._id },\n          { currency: currency._id },\n        ],\n      },\n    },\n    {\n      $project: {\n        _id: '$price',\n        price: { $multiply: ['$price', 100] },\n      },\n    },\n    {\n      $sort: {\n        price: body.type === 'purchase' ? -1 : 1,\n      },\n    },\n    {\n      $project: {\n        _id: '$type',\n        price: { $divide: ['$price', 100] },\n      },\n    },\n  ]).exec();\n\n  if (bestPrice.length === 0) {\n    throw new NoSentryError('Not enought listings');\n  }\n\n  function valuesListing() {\n    const listingLength = Math.floor(bestPrice.length / 2);\n\n    // eslint-disable-next-line no-shadow\n    const listingMedian =\n      bestPrice.length % 2 !== 0\n        ? bestPrice[listingLength].price\n        : (bestPrice[listingLength - 1].price +\n            bestPrice[listingLength].price) /\n          2;\n\n    // eslint-disable-next-line no-shadow\n    const listingBestPrice = bestPrice[0]?.price;\n\n    return { listingMedian, listingBestPrice };\n  }\n\n  const { listingMedian, listingBestPrice } = valuesListing();\n\n  return {\n    median: listingMedian,\n    bestPrice: listingBestPrice,\n  };\n}\n\nexport async function updateListingUser(\n  body: TUpdateListingUser,\n  token: string\n): Promise<IListing> {\n  const { data: user } = await getUser(token);\n\n  const session = await mongoose.startSession();\n\n  try {\n    session.startTransaction();\n\n    const LISTING_TYPE_SALE = 'sale';\n\n    const setting = await settingService.findOne({ active: true });\n\n    const foundListing = await Listing.findOne({ _id: body?.listing }, null, {\n      session,\n    });\n\n    if (foundListing.status === 'taker_assigned')\n      throw new NoSentryError('Please end the transaction');\n\n    const foundAsset = await assetService.findOne({ _id: foundListing.asset });\n\n    const foundCurrency = await currencyService.findOne({\n      _id: foundListing.currency,\n    });\n\n    if (user?.id !== foundListing.maker.id) {\n      throw new NoSentryError('You are not the owner of the listing');\n    }\n\n    const wallet = await getUserWallet(\n      token,\n      foundListing.selectedWallet.address\n    );\n\n    if (!wallet) {\n      throw new NoSentryError('Wallet doesn`t exist');\n    }\n\n    if (body?.selectedWallet) {\n      const newWallet = await getUserWallet(token, body?.selectedWallet);\n      if (!newWallet) {\n        throw new NoSentryError('Wallet doesn`t exist');\n      }\n      foundListing.selectedWallet.address = wallet.wallet;\n      foundListing.selectedWallet.name = wallet.name;\n      await foundListing.save();\n    }\n\n    let bestPrice;\n    // guardamos el nuevo precio si lo recibimos si no, preguntamos si habia antiguo precio\n    let listingPrice: number = body?.price ?? foundListing?.price;\n    // si recibimos un nuevo precioPorcentaje o tomamos el precio porcentaje antiguo\n    if (body?.bestPricePercentage) {\n      if (body.priceReferenceType === 'suni') {\n        bestPrice = await bestPriceService.findOne({\n          currency: body.currency,\n          asset: body.asset,\n        });\n\n        if (foundListing?.type === 'sale')\n          listingPrice = body.bestPricePercentage * bestPrice.saleBestPrice;\n        else\n          listingPrice = body.bestPricePercentage * bestPrice.purchaseBestPrice;\n      } else {\n        listingPrice =\n          body.bestPricePercentage *\n          foundAsset.conversionRateToUsd *\n          foundCurrency.conversionRateToUsd;\n      }\n    }\n\n    if (!body?.amountInAsset && body.amount) {\n      amountToAsset(body, listingPrice, foundAsset?.network, foundListing);\n    }\n\n    if (body?.minAmount || body?.maxAmount) {\n      if (!body.amountInAsset) {\n        const { minAmountAsset, maxAmountAsset } = minMaxAmountToAsset(\n          body?.minAmount ? body.minAmount : foundListing.minAmount,\n          body?.maxAmount ? body.maxAmount : foundListing.maxAmount,\n          foundAsset?.network,\n          listingPrice\n        );\n        foundListing.minAmountAsset = minAmountAsset;\n        foundListing.maxAmountAsset = maxAmountAsset;\n        await foundListing.save();\n      }\n    }\n\n    const { listing, currency, asset, selectedWallet, type, ...updateBody } =\n      body;\n\n    const maker = {\n      id: user?.id,\n      name: user?.metamapStatus.dni_firstName ?? user?.name,\n      email: user?.email,\n      lastname: user?.metamapStatus.dni_firstName ?? user?.lastname,\n    };\n\n    const amountPercentage =\n      ((body.amount - foundListing.amount) * 1) / 100 ?? 0;\n\n    if (\n      foundListing.type === LISTING_TYPE_SALE &&\n      wallet.available_balance <\n        body.amount - foundListing.amount + amountPercentage\n    ) {\n      throw new NoSentryError('Doesn`t have enough balance');\n    }\n\n    const updatedListing = await Listing.findOneAndUpdate(\n      { _id: listing, 'maker.id': user.id },\n      {\n        ...updateBody,\n        bestPrice: bestPrice?._id ?? null,\n        maker,\n        minAmountAsset: body.amountInAsset\n          ? body.minAmount\n          : foundListing.minAmountAsset,\n        maxAmountAsset: body.amountInAsset\n          ? body.maxAmount\n          : foundListing.maxAmountAsset,\n      },\n      {\n        new: true,\n        session,\n      }\n    );\n\n    if (foundListing.type === LISTING_TYPE_SALE) {\n      const makerFee = await getCryptoHolderFee(\n        {\n          transactionAmount: body.amount,\n          assetNetwork: foundAsset.network,\n          transactionType: foundListing.type,\n          userRole: 'maker',\n        },\n        setting\n      );\n\n      await updateBlock({\n        token,\n        amount: body.amount,\n        makerFee,\n        blockId: foundListing.loanAdId,\n      });\n    }\n\n    await session.commitTransaction();\n\n    if (!body.bestPricePercentage) {\n      await bestPriceService.getBestPrice({\n        currencyId: body.currency,\n        assetId: body.asset,\n      });\n    }\n\n    return updatedListing;\n  } catch (error) {\n    await session.abortTransaction();\n    throw new NoSentryError(error);\n  } finally {\n    session.endSession();\n  }\n}\n\nexport async function getKpiMarketPrice(\n  body: TGetKpiMarketPrice,\n  token: string\n) {\n  const fiatUppercase = body.fiat.toUpperCase();\n  const currency = await currencyService.findOne({ network: fiatUppercase });\n  await getUser(token);\n\n  // Obtenemos la conversion de la moneda en usd, el precio de sats en btc y el precio de btc en USD\n  const rateFiatUsd = currency.conversionRateToUsd;\n  const rateSatsBtc = 0.00000001;\n  const priceBtcInUsd = await apiPriceBtc();\n  // Obtener el precio de el fiat en btc y en Sats\n  const rateFiatBtc = priceBtcInUsd * rateFiatUsd;\n  const rateFiatSats = rateFiatBtc * rateSatsBtc;\n\n  if (body?.asset.toLowerCase() === 'btc') {\n    return {\n      rate: rateFiatBtc,\n    };\n  }\n\n  if (body?.asset.toLowerCase() === 'lnd') {\n    return {\n      rate: rateFiatSats,\n    };\n  }\n}\n\nexport async function addReferenceNumber() {\n  let referenceNumber = 100000;\n\n  const listings = await Listing.find().sort({ createdAt: 1 });\n\n  await Promise.all(\n    listings.map((listing) => {\n      listing.referenceNumber = referenceNumber;\n      referenceNumber += 1;\n      return listing.save();\n    })\n  );\n\n  return true;\n}\n\n// const job = new CronJob(   // commented the cronjob waiting to talk to SUNI for the best market prices\n//   '*/2 * * * *',\n//   async function () {\n//     const typeDynamic = 'dinamico';\n//     console.log('You will see this message every second');\n//     const listings = await Listing.find({ priceType: typeDynamic, active: true, status: 'active' })\n\n//     const listingMap = listings.map(async(listing) => {\n//       const asset = await assetService.findOne({ _id: listing.asset })\n//       const currency = await currencyService.findOne({ _id: listing.currency })\n\n//       const objListingUpdate = {\n//         currency: currency._id,\n//         asset: asset._id,\n//         type: listing.type,\n//         priceType: listing.priceType,\n//       };\n//           const { median } = await bestPricesListings(objListingUpdate)\n\n//           // if (typeof median === 'number' && !Number.isNaN(median)) {\n//             // median es un número válido\n//             // Ejecuta acciones con median\n//             console.log('median válido:', median);\n//             // ...\n//             console.log('priceee', median)\n\n//             const newPrice = (median * listing.pricePercentage) / 100\n//             console.log('porcentaje', listing.pricePercentage)\n//             console.log('preciooo', newPrice)\n\n//             const updateListing = await Listing.updateOne({\n//               _id: listing._id,\n//               asset: asset._id,\n//               currency: currency._id,\n//               type: listing.type,\n//               priceType: listing.priceType\n//             },\n//             {\n//               price: newPrice\n//             })\n//             console.log('soy median', median)\n\n//             const findListing = await Listing.findOne(listing._id)\n\n//             console.log('listing update', findListing)\n//           // } else {\n//           //   // median es NaN o no es un número\n//           //   console.log('median inválido:', median);\n//           // }\n//         })\n//     const promise = Promise.all(listingMap)\n\n//     return promise\n//   },\n//   null,\n//   true\n//   );\n"]}