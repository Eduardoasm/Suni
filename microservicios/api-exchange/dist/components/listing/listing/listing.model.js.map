{"version":3,"file":"listing.model.js","sourceRoot":"/","sources":["components/listing/listing/listing.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types, model, Document, Model, Schema } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { ICurrency, CurrencyTC } from '../../currency';\nimport { IAsset, AssetTC } from '../../asset';\nimport { ITakerConditions, takerConditionsSchema } from '../takerConditions';\nimport { IPaymentMethod, PaymentMethodTC } from '../../paymentMethod';\nimport { IWallet, walletSchema } from '../../wallet';\nimport { IUser, userSchema } from '../../user/user.schema';\nimport { IBestPrice, BestPriceTC } from '../../bestPrice/bestPrice.model';\n\nexport type PriceTypeEnum = 'fixed' | 'dynamic';\n\nexport type ListingTypeEnum = 'purchase' | 'sale';\n\nexport type ListingStatusEnum =\n  | 'active'\n  | 'taker_assigned'\n  | 'canceled'\n  | 'default';\n\nexport type priceReferenceTypeEnum = 'suni' | 'market';\n\nexport interface IListing {\n  _id?: any;\n  currency: Types.ObjectId | ICurrency;\n  asset: Types.ObjectId | IAsset;\n  amount: number;\n  price?: number;\n  priceType: PriceTypeEnum;\n  comments?: string;\n  autoReply?: string;\n  paymentMethods: Array<Types.ObjectId | IPaymentMethod>;\n  maxAmount: number;\n  minAmount: number;\n  originalMaxAssetAmount?: number;\n  maxAmountAsset: number;\n  minAmountAsset: number;\n  selectedWallet: IWallet;\n  type: ListingTypeEnum;\n  maker: IUser;\n  status: ListingStatusEnum;\n  takerConditions?: Array<ITakerConditions>;\n  fee: number;\n  timeMinutes: number;\n  pricePercentage?: number;\n  transactionsMaker: number;\n  transactionsMakerCompleted: number;\n  bestPricePercentage?: number;\n  bestPrice?: Types.ObjectId | IBestPrice;\n  referenceNumber: number;\n  priceReferenceType?: priceReferenceTypeEnum;\n  active?: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  loanAdId: string;\n}\n\nexport type ListingDocument = Document<Types.ObjectId, any, IListing> &\n  IListing;\n\nconst listingSchema = new Schema<IListing>(\n  {\n    currency: {\n      type: Schema.Types.ObjectId,\n      ref: 'Currency',\n      required: [true, 'Please insert a currency id'],\n    },\n    asset: {\n      type: Schema.Types.ObjectId,\n      ref: 'Asset',\n      required: [true, 'Please insert an asset id'],\n    },\n    amount: {\n      type: Number,\n      required: [true, 'Please insert an amount'],\n    },\n    price: {\n      type: Number,\n    },\n    priceType: {\n      type: String,\n      enum: ['fixed', 'dynamic'],\n    },\n    comments: {\n      type: String,\n    },\n    autoReply: {\n      type: String,\n    },\n    paymentMethods: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: 'PaymentMethod',\n      },\n    ],\n    maxAmount: {\n      type: Number,\n      required: [true, 'Please enter the maximum price of the ad'],\n    },\n    minAmount: {\n      type: Number,\n      required: [true, 'Please enter the minimum price of the ad'],\n    },\n    originalMaxAssetAmount: {\n      type: Number,\n    },\n    maxAmountAsset: {\n      type: Number,\n    },\n    minAmountAsset: {\n      type: Number,\n    },\n    type: {\n      type: String,\n      enum: ['purchase', 'sale'],\n      required: [true, 'Please enter the ad type'],\n      trim: true,\n    },\n    maker: {\n      type: userSchema,\n      required: [true, 'Please enter the maker'],\n    },\n    status: {\n      type: String,\n      enum: ['active', 'taker_assigned', 'canceled', 'default'],\n      required: [true, 'Please enter the ad type'],\n      trim: true,\n    },\n    takerConditions: [takerConditionsSchema],\n    fee: {\n      type: Number,\n    },\n    selectedWallet: walletSchema,\n    timeMinutes: {\n      type: Number,\n      required: [true, 'Please enter a Time for listing'],\n    },\n    pricePercentage: {\n      type: Number,\n    },\n    loanAdId: {\n      type: String,\n    },\n    transactionsMaker: {\n      type: Number,\n    },\n    transactionsMakerCompleted: {\n      type: Number,\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    bestPricePercentage: {\n      type: Number,\n    },\n    bestPrice: {\n      type: Schema.Types.ObjectId,\n      model: 'BestPrice',\n    },\n    referenceNumber: {\n      type: Number,\n      unique: true,\n    },\n    priceReferenceType: {\n      type: String,\n      enum: ['suni', 'market'],\n    },\n  },\n  { timestamps: true }\n);\n\nlistingSchema.pre('save', async function (next) {\n  if (!this.referenceNumber) {\n    // Buscar el número de referencia más alto en la colección y sumarle 1\n    const highest = await Listing.findOne().sort('-referenceNumber').exec();\n    this.referenceNumber = (highest && highest.referenceNumber + 1) || 100000;\n  }\n  next();\n});\n\nexport const Listing = model<IListing, Model<IListing>>(\n  'Listing',\n  listingSchema\n);\n\nexport const ListingTC = composeMongoose<ListingDocument>(Listing as any);\n\nListingTC.addRelation('currency', {\n  resolver: () => CurrencyTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.currency,\n  },\n  projection: { currency: 1 },\n});\n\nListingTC.addRelation('asset', {\n  resolver: () => AssetTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.asset,\n  },\n  projection: { asset: 1 },\n});\n\nListingTC.addRelation('paymentMethods', {\n  resolver: () => PaymentMethodTC.mongooseResolvers.dataLoaderMany(),\n  prepareArgs: {\n    _ids: (source) => source.paymentMethods,\n  },\n  projection: { paymentMethods: 1 },\n});\n\nListingTC.addRelation('bestPrice', {\n  resolver: () => BestPriceTC.mongooseResolvers.dataLoader(),\n  prepareArgs: {\n    _id: (source) => source.bestPrice,\n  },\n  projection: { bestPrice: 1 },\n});\n"]}