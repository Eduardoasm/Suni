{"version":3,"file":"listing.controller.js","sourceRoot":"/","sources":["components/listing/listing/listing.controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable dot-notation */\nimport { NextFunction, Request, Response } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport {\n  CreateListingInput,\n  GetBestPriceListingInput,\n  GetPricesListingType,\n  ListingType,\n  TCreateListing,\n  TDeleteListing,\n  TUpdateListingUser,\n  UpdateListingUserInput,\n  getListingFilterInput,\n  getListingFilterUserInput,\n  CancelListingInput,\n  listingsPaginationType,\n  GetKpiMarketPriceType,\n  GetKpiMarketPriceInput,\n} from './listing.dto';\nimport { ListingTC } from './listing.model';\nimport * as listingService from './listing.service';\nimport { buildPaginationType } from '../../../utils';\n\nexport const getListingFilters = schemaComposer.createResolver<any>({\n  name: 'getListingFilter',\n  kind: 'query',\n  description: 'get listings filters',\n  type: listingsPaginationType,\n  args: {\n    data: getListingFilterInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers.authorization;\n    const listings = await listingService.getListingFilter(args?.data, token);\n    return listings;\n  },\n});\n\nexport const getListingFiltersUser = schemaComposer.createResolver<any>({\n  name: 'getListingFilterUser',\n  kind: 'query',\n  description: 'get listings filters by user',\n  type: listingsPaginationType,\n  args: {\n    data: getListingFilterUserInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers.authorization;\n    const listings = await listingService.getListingFilterUser(\n      args?.data,\n      token\n    );\n    return listings;\n  },\n});\n\nexport const createListingSale = schemaComposer.createResolver<\n  any,\n  {\n    data: TCreateListing;\n  }\n>({\n  name: 'createListingSale',\n  kind: 'mutation',\n  description: 'create listing for sale',\n  type: ListingType,\n  args: {\n    data: CreateListingInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.['authorization'];\n    const listings = await listingService.createListingSale(token, args?.data);\n    return listings;\n  },\n});\n\nexport const cancelListing = schemaComposer.createResolver<\n  any,\n  {\n    data: TDeleteListing;\n  }\n>({\n  name: 'cancelListing',\n  kind: 'mutation',\n  description: 'cancel listing',\n  type: ListingType,\n  args: {\n    data: CancelListingInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.['authorization'];\n    const listings = await listingService.cancelListing(args?.data, token);\n    return listings;\n  },\n});\n\nexport const updateListingUserCustom = schemaComposer.createResolver<\n  any,\n  {\n    data: TUpdateListingUser;\n  }\n>({\n  name: 'updateListingUserCustom',\n  kind: 'mutation',\n  description: 'update listing',\n  type: ListingType,\n  args: {\n    data: UpdateListingUserInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.['authorization'];\n    const listings = await listingService.updateListingUser(args?.data, token);\n    return listings;\n  },\n});\n\nexport const getBestPricesListings = schemaComposer.createResolver<any>({\n  name: 'getBestPricesListings',\n  kind: 'query',\n  description: 'get best prices listings',\n  type: GetPricesListingType,\n  args: {\n    data: GetBestPriceListingInput,\n  },\n  async resolve({ args }) {\n    const listings = await listingService.bestPricesListings(args?.data);\n    return listings;\n  },\n});\n\nexport const createListingPurchase = schemaComposer.createResolver<\n  any,\n  {\n    data: TCreateListing;\n  }\n>({\n  name: 'createListingPurchase',\n  kind: 'mutation',\n  description: 'create listing for purchase',\n  type: ListingType,\n  args: {\n    data: CreateListingInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.['authorization'];\n    const listings = await listingService.createListingPurchase(\n      token,\n      args?.data\n    );\n    return listings;\n  },\n});\n\nexport const getKpiMarketPrice = schemaComposer.createResolver<any>({\n  name: 'getKpiMarketPrice',\n  kind: 'query',\n  description: 'get kpi market price',\n  type: GetKpiMarketPriceType,\n  args: {\n    data: GetKpiMarketPriceInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.['authorization'];\n    const marketPrice = await listingService.getKpiMarketPrice(\n      args?.data,\n      token\n    );\n    return marketPrice;\n  },\n});\n\nexport const addReferenceNumber = schemaComposer.createResolver<any>({\n  name: 'addReferenceNumber',\n  kind: 'query',\n  description: 'add referenceNumber in all listings',\n  type: 'Boolean',\n  async resolve() {\n    const listings = await listingService.addReferenceNumber();\n    return listings;\n  },\n});\n\nconst listingMutations = {\n  createListing: ListingTC.mongooseResolvers.createOne(),\n  updateListing: ListingTC.mongooseResolvers.updateOne(),\n  createListingPurchase,\n  createListingSale,\n  updateListingUserCustom,\n  cancelListing,\n  addReferenceNumber,\n};\n\nconst listingQueries = {\n  listing: ListingTC.mongooseResolvers.findOne(),\n  listings: ListingTC.mongooseResolvers.findMany(),\n  totalListing: ListingTC.mongooseResolvers.count(),\n  getListingFilters,\n  getBestPricesListings,\n  getListingFiltersUser,\n  getKpiMarketPrice,\n};\n\nexport { listingQueries, listingMutations };\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const listing = await listingService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, listing });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n"]}