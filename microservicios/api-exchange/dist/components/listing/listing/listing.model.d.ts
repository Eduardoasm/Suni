import { Types, Document, Model } from 'mongoose';
import { ICurrency } from '../../currency';
import { IAsset } from '../../asset';
import { ITakerConditions } from '../takerConditions';
import { IPaymentMethod } from '../../paymentMethod';
import { IWallet } from '../../wallet';
import { IUser } from '../../user/user.schema';
import { IBestPrice } from '../../bestPrice/bestPrice.model';
export type PriceTypeEnum = 'fixed' | 'dynamic';
export type ListingTypeEnum = 'purchase' | 'sale';
export type ListingStatusEnum = 'active' | 'taker_assigned' | 'canceled' | 'default';
export type priceReferenceTypeEnum = 'suni' | 'market';
export interface IListing {
    _id?: any;
    currency: Types.ObjectId | ICurrency;
    asset: Types.ObjectId | IAsset;
    amount: number;
    price?: number;
    priceType: PriceTypeEnum;
    comments?: string;
    autoReply?: string;
    paymentMethods: Array<Types.ObjectId | IPaymentMethod>;
    maxAmount: number;
    minAmount: number;
    originalMaxAssetAmount?: number;
    maxAmountAsset: number;
    minAmountAsset: number;
    selectedWallet: IWallet;
    type: ListingTypeEnum;
    maker: IUser;
    status: ListingStatusEnum;
    takerConditions?: Array<ITakerConditions>;
    fee: number;
    timeMinutes: number;
    pricePercentage?: number;
    transactionsMaker: number;
    transactionsMakerCompleted: number;
    bestPricePercentage?: number;
    bestPrice?: Types.ObjectId | IBestPrice;
    referenceNumber: number;
    priceReferenceType?: priceReferenceTypeEnum;
    active?: boolean;
    createdAt: Date;
    updatedAt: Date;
    loanAdId: string;
}
export type ListingDocument = Document<Types.ObjectId, any, IListing> & IListing;
export declare const Listing: Model<IListing, {}, {}, {}, any>;
export declare const ListingTC: import("graphql-compose-mongoose").ObjectTypeComposerWithMongooseResolvers<ListingDocument, any>;
//# sourceMappingURL=listing.model.d.ts.map