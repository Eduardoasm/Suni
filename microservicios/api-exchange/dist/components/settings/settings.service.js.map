{"version":3,"file":"settings.service.js","sourceRoot":"/","sources":["components/settings/settings.service.ts"],"names":[],"mappings":";;;;AAQA,uCAA4C;AAC5C,qDAA8E;AAE9E,SAAsB,OAAO,CAC3B,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,yBAAO,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,yBAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC1D,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAA6B,EAC7B,MAA6D,EAC7D,OAAuC;;QAEvC,OAAO,yBAAO,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3D,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,QAAkB;;QAC7C,MAAM,aAAa,GAAG,MAAM,yBAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9D,aAAa,CAAC,MAAM,GAAG,KAAK,CAAC;QAC7B,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAC3B,OAAO,yBAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;CAAA;AALD,wBAKC;AAED,SAAsB,cAAc,CAClC,MAA6D;;QAE7D,MAAM,OAAO,GAAG,MAAM,yBAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QACxD,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,EAAE;YAChB,MAAM,cAAc,GAAG,MAAM,yBAAO,CAAC,SAAS,CAC5C,EAAE,GAAG,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,EAAE,oBAChB,MAAM,EACZ,CAAC;YACF,OAAO,cAAc,CAAC;SACvB;QACD,MAAM,UAAU,GAAG,MAAM,yBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAChD,OAAO,UAAU,CAAC;IACpB,CAAC;CAAA;AAbD,wCAaC;AAED,SAAsB,gBAAgB;;QACpC,MAAM,OAAO,GAAG,MAAM,yBAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QACxD,OAAO,OAAO,CAAC;IACjB,CAAC;CAAA;AAHD,4CAGC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,IAAA,qBAAa,EAAC,IAAI,EAAE,OAAO,EAAE,yBAAO,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC;CAAA;AARD,gCAQC","sourcesContent":["import jwt from 'jsonwebtoken';\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { paginateModel } from '../../utils';\nimport { ISettings as ISetting, Settings as Setting } from './settings.model';\n\nexport async function findOne(\n  filter?: FilterQuery<ISetting>,\n  projection?: ProjectionType<ISetting> | null,\n  options?: QueryOptions<ISetting> | null\n) {\n  return Setting.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ISetting>,\n  projection?: ProjectionType<ISetting> | null,\n  options?: QueryOptions<ISetting> | null\n) {\n  return Setting.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ISetting>,\n  update: UpdateQuery<ISetting> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ISetting> | null\n) {\n  return Setting.updateOne(filter, update, options).exec();\n}\n\nexport async function create(settings: ISetting) {\n  const settingActive = await Setting.findOne({ active: true });\n  settingActive.active = false;\n  await settingActive.save();\n  return Setting.create(settings);\n}\n\nexport async function updateSettings(\n  update: UpdateQuery<ISetting> | UpdateWithAggregationPipeline\n) {\n  const setting = await Setting.findOne({ active: true });\n  if (setting?._id) {\n    const updatedSetting = await Setting.updateOne(\n      { _id: setting?._id },\n      { ...update }\n    );\n    return updatedSetting;\n  }\n  const newSetting = await Setting.create(update);\n  return newSetting;\n}\n\nexport async function getActiveSetting() {\n  const setting = await Setting.findOne({ active: true });\n  return setting;\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ISetting>,\n  projection?: ProjectionType<ISetting> | null,\n  options?: QueryOptions<ISetting> | null\n) {\n  return paginateModel(page, perPage, Setting, filter, projection, options);\n}\n"]}