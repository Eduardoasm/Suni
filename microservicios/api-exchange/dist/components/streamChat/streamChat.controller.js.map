{"version":3,"file":"streamChat.controller.js","sourceRoot":"/","sources":["components/streamChat/streamChat.controller.ts"],"names":[],"mappings":";;;;AACA,qDAAiD;AACjD,sEAA0C;AAE1C,qDAAqD;AACrD,gFAA0D;AAE1D,6CAA6C;AAEhC,QAAA,cAAc,GAAG,gCAAc,CAAC,cAAc,CAAC;IAC1D,IAAI,EAAE,gBAAgB;IACtB,IAAI,EAAE,OAAO;IACb,WAAW,EAAE,yCAAyC;IACtD,IAAI,EAAE,kCAAiB;IACvB,IAAI,EAAE,EAAE;IACF,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE;;;YAC7B,MAAM,KAAK,GACT,MAAA,MAAA,OAAO,CAAC,GAAG,CAAC,OAAO,0CAAE,KAAK,mCAAI,MAAA,OAAO,CAAC,GAAG,CAAC,OAAO,0CAAE,aAAa,CAAC;YAEnE,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAC9D,OAAO;gBACL,KAAK,EAAE,SAAS;aACjB,CAAC;;KACH;CACF,CAAC,CAAC;AAEH,SAAsB,mBAAmB,CACvC,GAAY,EACZ,GAAa,EACb,IAAkB;;;QAElB,IAAI;YACF,MAAM,KAAK,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,0CAAE,KAAK,CAAC;YAC/B,MAAM,SAAS,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,0CAAE,GAAG,CAAC;YACnC,MAAM,gBAAgB,GAAG,MAAM,iBAAiB,CAAC,mBAAmB,CAAC;gBACnE,KAAK;gBACL,SAAS;aACV,CAAC,CAAC;YACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC/C;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,IAAA,qBAAe,EAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACnE;;CACF;AAhBD,kDAgBC;AAED,SAAsB,aAAa,CACjC,GAAY,EACZ,GAAa,EACb,IAAkB;;;QAElB,IAAI;YACF,MAAM,KAAK,GAAG,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,0CAAE,aAAa,CAAC;YAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,aAAa,CAAC;gBACtD,KAAK;aACN,CAAC,CAAC;YACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;SACnD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,mCAAmC,CAAC,CAAC;YACxD,IAAI,CAAC,IAAA,qBAAe,EAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACnE;;CACF;AAhBD,sCAgBC;AAEY,QAAA,iBAAiB,GAAG;IAC/B,cAAc,EAAd,sBAAc;CACf,CAAC","sourcesContent":["import type { Request, Response, NextFunction } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport createHttpError from 'http-errors';\nimport axios from 'axios';\nimport { StreamChatPayload } from './streamChat.dto';\nimport * as streamChatService from './streamChat.service';\n\n// import * as s3Service from './s3.service';\n\nexport const streamChatAuth = schemaComposer.createResolver({\n  name: 'streamChatAuth',\n  kind: 'query',\n  description: 'Authentication with Stream Chat Service',\n  type: StreamChatPayload,\n  args: {},\n  async resolve({ args, context }) {\n    const token =\n      context.req.cookies?.token ?? context.req.headers?.authorization;\n\n    const authToken = await streamChatService.authChat({ token });\n    return {\n      token: authToken,\n    };\n  },\n});\n\nexport async function setChannelModerator(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const token = req?.body?.token;\n    const channelId = req?.params?._id;\n    const channelModerator = await streamChatService.setChannelModerator({\n      token,\n      channelId,\n    });\n    return res.status(200).json(channelModerator);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function adminAuthChat(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const token = req?.headers?.authorization;\n    console.log('token', token);\n    const authToken = await streamChatService.adminAuthChat({\n      token,\n    });\n    return res.status(200).json({ token: authToken });\n  } catch (error) {\n    console.log(error, 'error at adminAuthChat controller');\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport const streamChatQueries = {\n  streamChatAuth,\n};\n"]}