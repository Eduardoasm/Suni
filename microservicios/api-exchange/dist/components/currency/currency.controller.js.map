{"version":3,"file":"currency.controller.js","sourceRoot":"/","sources":["components/currency/currency.controller.ts"],"names":[],"mappings":";;;;AACA,sEAA0C;AAC1C,qDAAiD;AACjD,qDAA8C;AAC9C,4EAAsD;AACtD,iDAAuE;AAEvE,SAAsB,MAAM,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC1E,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC;YAChD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACzC;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,IAAA,qBAAe,EAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACnE;IACH,CAAC;CAAA;AAPD,wBAOC;AAEY,QAAA,cAAc,GAAG,gCAAc,CAAC,cAAc,CAAM;IAC/D,IAAI,EAAE,gBAAgB;IACtB,IAAI,EAAE,OAAO;IACb,WAAW,EAAE,uBAAuB;IACpC,IAAI,EAAE,8BAAe;IACf,OAAO,CAAC,EAAE,OAAO,EAAE;;;YACvB,MAAM,KAAK,GAAG,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,0CAAE,OAAO,0CAAE,aAAa,CAAC;YACnD,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC5D,OAAO;gBACL,OAAO;aACR,CAAC;;KACH;CACF,CAAC,CAAC;AAEU,QAAA,mBAAmB,GAAG,gCAAc,CAAC,cAAc,CAAM;IACpE,IAAI,EAAE,gBAAgB;IACtB,IAAI,EAAE,OAAO;IACb,WAAW,EAAE,6BAA6B;IAC1C,IAAI,EAAE,8BAAe;IACrB,IAAI,EAAE;QACJ,IAAI,EAAE,mCAAoB;KAC3B;IACK,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE;;;YAC7B,MAAM,KAAK,GAAG,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,0CAAE,OAAO,0CAAE,aAAa,CAAC;YACnD,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,mBAAmB,CACvD,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,EACV,KAAK,CACN,CAAC;YACF,OAAO;gBACL,OAAO;aACR,CAAC;;KACH;CACF,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG;IACxB,cAAc,EAAE,2BAAU,CAAC,iBAAiB,CAAC,SAAS,EAAE;IACxD,cAAc,EAAE,2BAAU,CAAC,iBAAiB,CAAC,SAAS,EAAE;CACzD,CAAC;AAUwB,8CAAiB;AAR3C,MAAM,eAAe,GAAG;IACtB,QAAQ,EAAE,2BAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE;IAChD,UAAU,EAAE,2BAAU,CAAC,iBAAiB,CAAC,QAAQ,EAAE;IACnD,aAAa,EAAE,2BAAU,CAAC,iBAAiB,CAAC,KAAK,EAAE;IACnD,cAAc,EAAd,sBAAc;IACd,mBAAmB,EAAnB,2BAAmB;CACpB,CAAC;AAEO,0CAAe","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport createHttpError from 'http-errors';\nimport { schemaComposer } from 'graphql-compose';\nimport { CurrencyTC } from './currency.model';\nimport * as currencyService from './currency.service';\nimport { GetAssetWalletsInput, userWalletsType } from './currency.dto';\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const currencies = await currencyService.find();\n    return res.status(200).json(currencies);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport const getWalletsUser = schemaComposer.createResolver<any>({\n  name: 'getWalletsUser',\n  kind: 'query',\n  description: 'get wallets from user',\n  type: userWalletsType,\n  async resolve({ context }) {\n    const token = context?.req?.headers?.authorization;\n    const wallets = await currencyService.getUserWallets(token);\n    return {\n      wallets,\n    };\n  },\n});\n\nexport const getAssetWalletsUser = schemaComposer.createResolver<any>({\n  name: 'getWalletsUser',\n  kind: 'query',\n  description: 'get asset wallets from user',\n  type: userWalletsType,\n  args: {\n    data: GetAssetWalletsInput,\n  },\n  async resolve({ args, context }) {\n    const token = context?.req?.headers?.authorization;\n    const wallets = await currencyService.getUserAssetWallets(\n      args?.data,\n      token\n    );\n    return {\n      wallets,\n    };\n  },\n});\n\nconst currencyMutations = {\n  createCurrency: CurrencyTC.mongooseResolvers.createOne(),\n  updateCurrency: CurrencyTC.mongooseResolvers.updateOne(),\n};\n\nconst currencyQueries = {\n  currency: CurrencyTC.mongooseResolvers.findOne(),\n  currencies: CurrencyTC.mongooseResolvers.findMany(),\n  totalCurrency: CurrencyTC.mongooseResolvers.count(),\n  getWalletsUser,\n  getAssetWalletsUser,\n};\n\nexport { currencyQueries, currencyMutations };\n"]}