{"version":3,"file":"currency.service.js","sourceRoot":"/","sources":["components/currency/currency.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport axios from 'axios';\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { paginateModel } from '../../utils';\nimport { ICurrency, Currency } from './currency.model';\nimport * as assetService from '../asset/asset.service';\nimport { NoSentryError } from '../../utils/NoSentryError';\nimport { getUser } from '../../utils/walletService/userWau';\nimport * as countryService from '../country/country.service';\nimport { TGetAssetWallets } from './currency.dto';\n\nexport async function findOne(\n  filter?: FilterQuery<ICurrency>,\n  projection?: ProjectionType<ICurrency> | null,\n  options?: QueryOptions<ICurrency> | null\n) {\n  return Currency.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ICurrency>,\n  projection?: ProjectionType<ICurrency> | null,\n  options?: QueryOptions<ICurrency> | null\n) {\n  return Currency.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ICurrency>,\n  update: UpdateQuery<ICurrency> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ICurrency> | null\n) {\n  return Currency.updateOne(filter, update, options).exec();\n}\n\nexport async function create(currency: ICurrency) {\n  return Currency.create(currency);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ICurrency>,\n  projection?: ProjectionType<ICurrency> | null,\n  options?: QueryOptions<ICurrency> | null\n) {\n  return paginateModel(page, perPage, Currency, filter, projection, options);\n}\n\ninterface IWallet {\n  wallet: string;\n  name: string;\n  balance: number;\n  error: string | null;\n  business_enabled: string | null;\n  type: string;\n  blocked_balance: number;\n  available_balance: number;\n}\n\nexport async function getUserWallets(token: string): Promise<IWallet[]> {\n  const { data: user } = await getUser(token);\n\n  // const countryAvailable = await countryService.findOne({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n\n  if (!user) {\n    throw new NoSentryError('Invalid user');\n  }\n\n  const config = {\n    method: 'get',\n    baseURL: process.env.SERVICE_URL,\n    url: `/wallet/user-balances`,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  };\n\n  const response = await axios(config);\n\n  if (!response.data?.success) {\n    throw new NoSentryError('Error in obtaining data');\n  }\n\n  const balances: IWallet[] = response?.data?.data;\n\n  return balances;\n}\n\nexport async function getUserAssetWallets(\n  body: TGetAssetWallets,\n  token: string\n): Promise<IWallet[]> {\n  const { data: user } = await getUser(token);\n\n  // const countryAvailable = await countryService.findOne({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n\n  if (!user) {\n    throw new NoSentryError('Invalid user');\n  }\n\n  const getAssetWallet = await assetService.findOne({ _id: body.asset });\n\n  const assetWallet: string = getAssetWallet.network.toLowerCase();\n\n  const config = {\n    method: 'get',\n    baseURL: process.env.SERVICE_URL,\n    url: `/${assetWallet}/user-balances`,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  };\n\n  const response = await axios(config);\n\n  if (!response.data?.success) {\n    throw new NoSentryError('Error in obtaining data');\n  }\n\n  const balances: IWallet[] = response?.data?.data;\n\n  return balances;\n}\n"]}