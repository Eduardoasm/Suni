{"version":3,"file":"paymentMethodCategory.service.js","sourceRoot":"/","sources":["components/paymentMethodCategory/paymentMethodCategory.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type { FilterQuery, ProjectionType, QueryOptions } from 'mongoose';\nimport { paginateModel } from '../../utils';\nimport {\n  IPaymentMethodCategory,\n  PaymentMethodCategory,\n  PaymentMethodCategoryDocument,\n} from './paymentMethodCategory.model';\nimport * as paymentMethodInputService from '../paymentMethodInput/paymentMethodInput/paymentMethodInput.service';\nimport * as paymentMethodService from '../paymentMethod/paymentMethod.service';\nimport { PaymentMethodInputDocument } from '../paymentMethodInput';\nimport { getUser } from '../../utils/walletService/userWau';\nimport { TGetPaymentMethodCategory } from './paymentMethodCategory.dto';\n\nexport async function findOne(\n  filter?: FilterQuery<IPaymentMethodCategory>,\n  projection?: ProjectionType<IPaymentMethodCategory> | null,\n  options?: QueryOptions<IPaymentMethodCategory> | null\n) {\n  return PaymentMethodCategory.findOne(filter, projection, options).populate({\n    path: 'paymentMethodInputs',\n    model: 'PaymentMethodInput',\n    populate: {\n      path: 'options',\n      model: 'Options',\n    },\n  });\n}\n\nexport async function find(\n  filter?: FilterQuery<IPaymentMethodCategory>,\n  projection?: ProjectionType<IPaymentMethodCategory> | null,\n  options?: QueryOptions<IPaymentMethodCategory> | null\n) {\n  return PaymentMethodCategory.find(filter, projection, options).exec();\n}\n\nexport async function findPaymentMethodWithCurrency(\n  filter?: FilterQuery<IPaymentMethodCategory>,\n  projection?: ProjectionType<IPaymentMethodCategory> | null,\n  options?: QueryOptions<IPaymentMethodCategory> | null\n) {\n  return PaymentMethodCategory.find(filter, projection, options)\n    .populate({\n      path: 'currency',\n      model: 'Currency',\n    })\n    .exec();\n}\n\nexport async function updateOne(paymentMethodCategory: IPaymentMethodCategory) {\n  const paymentMethodInputs = [];\n  for (const input of paymentMethodCategory.paymentMethodInputs as PaymentMethodInputDocument[]) {\n    const [inputExists] = await Promise.allSettled([\n      paymentMethodInputService.findOne({\n        _id: input?._id,\n      }),\n    ]);\n    if (inputExists?.status === 'fulfilled') {\n      paymentMethodInputService.updateOne(\n        { _id: String(input?._id) },\n        {\n          name: input?.name,\n          placeholder: input?.placeholder,\n          options: input?.options ?? [],\n          requested: input?.requested,\n          type: input?.type,\n        }\n      );\n      paymentMethodInputs?.push(input?._id);\n    } else {\n      const newInputData = {\n        name: input?.name,\n        placeholder: input?.placeholder,\n        options: input?.options ?? [],\n        requested: input?.requested,\n        type: input?.type,\n      };\n      const newInput = await paymentMethodInputService.create(\n        newInputData as PaymentMethodInputDocument\n      );\n      paymentMethodInputs.push(newInput?._id);\n    }\n  }\n  const updatedMethod = {\n    currency: paymentMethodCategory?.currency,\n    name: paymentMethodCategory?.name,\n    selected: paymentMethodCategory?.selected,\n    paymentMethodInputs,\n  };\n  return PaymentMethodCategory.updateOne(\n    { _id: paymentMethodCategory?._id },\n    { ...updatedMethod }\n  ).exec();\n}\n\nexport async function create(paymentMethodCategory: IPaymentMethodCategory) {\n  const paymentMethodInputs = [];\n  for (const input of paymentMethodCategory.paymentMethodInputs) {\n    const newInput = await paymentMethodInputService.create(\n      input as PaymentMethodInputDocument\n    );\n    paymentMethodInputs.push(newInput?._id);\n  }\n  return PaymentMethodCategory.create({\n    ...paymentMethodCategory,\n    paymentMethodInputs,\n  });\n}\n\nexport async function updateMany(\n  paymentMethodCategories: PaymentMethodCategoryDocument[]\n) {\n  const methods = [];\n  for (const paymentMethod of paymentMethodCategories) {\n    const updatedMethod = await PaymentMethodCategory.findByIdAndUpdate(\n      paymentMethod?._id,\n      paymentMethod\n    );\n    updatedMethod.active = paymentMethod?.active;\n    methods.push(updatedMethod);\n  }\n  return methods;\n}\n\nexport async function deleteOne(paymentMethodCategoryId: string) {\n  await paymentMethodService.updateMany(\n    {\n      type: paymentMethodCategoryId,\n    },\n    { active: false }\n  );\n  return PaymentMethodCategory.updateOne(\n    { _id: paymentMethodCategoryId },\n    { active: false }\n  );\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IPaymentMethodCategory>,\n  projection?: ProjectionType<IPaymentMethodCategory> | null,\n  options?: QueryOptions<IPaymentMethodCategory> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    PaymentMethodCategory,\n    filter,\n    projection,\n    options\n  );\n}\n\nexport async function getPaymentMethodCategory(\n  body: TGetPaymentMethodCategory,\n  token: string\n) {\n  await getUser(token);\n\n  const options = {\n    sort: {\n      name: 1,\n    },\n  };\n\n  const filters: any = {\n    active: true,\n  };\n\n  if (body?.name) {\n    filters.name = body.name;\n  }\n\n  if (body?.currency) {\n    filters.currency = body.currency;\n  }\n\n  const paymentMethodCategory = await PaymentMethodCategory.find(\n    filters,\n    null,\n    options\n  );\n\n  return paymentMethodCategory;\n}\n"]}