{"version":3,"file":"paymentMethodCategory.model.js","sourceRoot":"/","sources":["components/paymentMethodCategory/paymentMethodCategory.model.ts"],"names":[],"mappings":";;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,iFAGkD;AAClD,0CAAoD;AAoBpD,MAAM,2BAA2B,GAAG,IAAI,iBAAM,CAC5C;IACE,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,mBAAmB,CAAC;QACrC,IAAI,EAAE,IAAI;KACX;IACD,mBAAmB,EAAE;QACnB;YACE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;YAC3B,GAAG,EAAE,oBAAoB;SAC1B;KACF;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,UAAU;KAChB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEW,QAAA,qBAAqB,GAAG,IAAA,gBAAK,EAGxC,uBAAuB,EAAE,2BAA2B,CAAC,CAAC;AAE3C,QAAA,uBAAuB,GAClC,IAAA,0CAAe,EAAgC,6BAA4B,CAAC,CAAC;AAE/E,+BAAuB,CAAC,WAAW,CAAC,qBAAqB,EAAE;IACzD,QAAQ,EAAE,GAAG,EAAE,CAAC,yCAAoB,CAAC,iBAAiB,CAAC,cAAc,EAAE;IACvE,WAAW,EAAE;QACX,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,mBAAmB;KAC7C;IACD,UAAU,EAAE,EAAE,mBAAmB,EAAE,CAAC,EAAE;CACvC,CAAC,CAAC;AAEH,+BAAuB,CAAC,WAAW,CAAC,UAAU,EAAE;IAC9C,QAAQ,EAAE,GAAG,EAAE,CAAC,qBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACvE,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ;KACjC;IACD,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE;CAC5B,CAAC,CAAC","sourcesContent":["import { Types, model, Document, Model, Schema } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport {\n  IPaymentMethodInput,\n  PaymentMethodInputTC,\n} from '../paymentMethodInput/paymentMethodInput';\nimport { CurrencyTC, ICurrency } from '../currency';\n\nexport interface IPaymentMethodCategory {\n  _id?: any;\n  name: string;\n  paymentMethodInputs: Array<Types.ObjectId | IPaymentMethodInput>;\n  currency: Types.ObjectId | ICurrency;\n  selected: boolean;\n  active: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport type PaymentMethodCategoryDocument = Document<\n  Types.ObjectId,\n  any,\n  IPaymentMethodCategory\n> &\n  IPaymentMethodCategory;\n\nconst PaymentMethodCategorySchema = new Schema<IPaymentMethodCategory>(\n  {\n    name: {\n      type: String,\n      required: [true, 'Ingresa un nombre'],\n      trim: true,\n    },\n    paymentMethodInputs: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: 'PaymentMethodInput',\n      },\n    ],\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    selected: {\n      type: Boolean,\n      default: true,\n    },\n    currency: {\n      type: Schema.Types.ObjectId,\n      ref: 'Currency',\n    },\n  },\n  { timestamps: true }\n);\n\nexport const PaymentMethodCategory = model<\n  IPaymentMethodCategory,\n  Model<IPaymentMethodCategory>\n>('PaymentMethodCategory', PaymentMethodCategorySchema);\n\nexport const PaymentMethodCategoryTC =\n  composeMongoose<PaymentMethodCategoryDocument>(PaymentMethodCategory as any);\n\nPaymentMethodCategoryTC.addRelation('paymentMethodInputs', {\n  resolver: () => PaymentMethodInputTC.mongooseResolvers.dataLoaderMany(),\n  prepareArgs: {\n    _ids: (source) => source.paymentMethodInputs,\n  },\n  projection: { paymentMethodInputs: 1 },\n});\n\nPaymentMethodCategoryTC.addRelation('currency', {\n  resolver: () => CurrencyTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.currency,\n  },\n  projection: { currency: 1 },\n});\n"]}