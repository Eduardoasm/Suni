{"version":3,"file":"paymentMethodCategory.controller.js","sourceRoot":"/","sources":["components/paymentMethodCategory/paymentMethodCategory.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { schemaComposer } from 'graphql-compose';\nimport { NextFunction, Request, Response } from 'express';\nimport createHttpError from 'http-errors';\nimport { PaymentMethodCategoryTC } from './paymentMethodCategory.model';\nimport * as paymentMethodCategoryService from './paymentMethodCategory.service';\nimport {\n  GetPaymentMethodCategoryInput,\n  PaymentMethodCategoryTypePlural,\n} from './paymentMethodCategory.dto';\n\nexport const getPaymentMethodCategory = schemaComposer.createResolver<any>({\n  name: 'getPaymentMethodCategory',\n  kind: 'query',\n  description: 'get payment method types',\n  type: PaymentMethodCategoryTypePlural,\n  args: {\n    data: GetPaymentMethodCategoryInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers.authorization;\n    const paymentMethodCategory =\n      await paymentMethodCategoryService.getPaymentMethodCategory(\n        args?.data,\n        token\n      );\n    return paymentMethodCategory;\n  },\n});\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const paymentMethodCategory = await paymentMethodCategoryService.find(\n      req?.body?.filter\n    );\n    return res.status(200).json(paymentMethodCategory);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function getAllWithCurrency(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const paymentMethodCategory =\n      await paymentMethodCategoryService.findPaymentMethodWithCurrency(\n        req?.body?.filter\n      );\n    return res.status(200).json(paymentMethodCategory);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function findOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const paymentMethodCategory = await paymentMethodCategoryService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json(paymentMethodCategory);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const updatedPaymentMethodCategory =\n      await paymentMethodCategoryService.updateOne(\n        req?.body?.paymentMethodType\n      );\n    return res.status(200).json(updatedPaymentMethodCategory);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function deleteOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const deletedPaymentMethodCategory =\n      await paymentMethodCategoryService.deleteOne(req.params._id);\n    return res.status(200).json(deletedPaymentMethodCategory);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function updateMany(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const methods = await paymentMethodCategoryService.updateMany(\n      req.body.paymentMethodTypes\n    );\n    return res.status(200).json(methods);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nexport async function create(req: Request, res: Response, next: NextFunction) {\n  try {\n    const newPaymentMethodCategory = await paymentMethodCategoryService.create(\n      req?.body?.paymentMethodType\n    );\n    return res.status(200).json(newPaymentMethodCategory);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nconst paymentMethodCategoryMutations = {\n  createPaymentMethodCategory:\n    PaymentMethodCategoryTC.mongooseResolvers.createOne(),\n  updatePaymentMethodCategory:\n    PaymentMethodCategoryTC.mongooseResolvers.updateOne(),\n};\n\nconst paymentMethodCategoryQueries = {\n  paymentMethodCategory: PaymentMethodCategoryTC.mongooseResolvers.findOne(),\n  paymentMethodsCategory: PaymentMethodCategoryTC.mongooseResolvers.findMany(),\n  totalPaymentMethodsCategory:\n    PaymentMethodCategoryTC.mongooseResolvers.count(),\n  getPaymentMethodCategory,\n};\n\nexport { paymentMethodCategoryQueries, paymentMethodCategoryMutations };\n"]}