{"version":3,"file":"transaction.model.js","sourceRoot":"/","sources":["components/transaction/transaction.model.ts"],"names":[],"mappings":";;;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,oDAAmE;AACnE,oEAAuE;AACvE,qDAAwD;AAwCxD,MAAM,iBAAiB,GAAG,IAAI,iBAAM,CAClC;IACE,OAAO,EAAE;QACP,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,SAAS;KACf;IACD,KAAK,EAAE;QACL,IAAI,EAAE,wBAAU;QAChB,QAAQ,EAAE,CAAC,IAAI,EAAE,2BAA2B,CAAC;KAC9C;IACD,KAAK,EAAE;QACL,IAAI,EAAE,wBAAU;QAChB,QAAQ,EAAE,CAAC,IAAI,EAAE,2BAA2B,CAAC;KAC9C;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE;YACJ,SAAS;YACT,kBAAkB;YAClB,kBAAkB;YAClB,YAAY;YACZ,SAAS;YACT,WAAW;SACZ;QACD,OAAO,EAAE,SAAS;KACnB;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;IACD,UAAU,EAAE;QACV,IAAI,EAAE,wBAAU;KACjB;IACD,aAAa,EAAE;QACb,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,eAAe;KACrB;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,IAAI,EAAE,gCAAgC,CAAC;KACnD;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;KACb;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,iBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAgB,IAAI;;QAChD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,sEAAsE;YACtE,MAAM,OAAO,GAAG,MAAM,mBAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,CAAC;YAC5E,IAAI,CAAC,eAAe,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;SAC3E;QACD,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,IAAA,gBAAK,EAG9B,aAAa,EAAE,iBAAiB,CAAC,CAAC;AAEvB,QAAA,aAAa,GAAG,IAAA,0CAAe,EAC1C,mBAAkB,CACnB,CAAC;AAEF,qBAAa,CAAC,WAAW,CAAC,eAAe,EAAE;IACzC,QAAQ,EAAE,GAAG,EAAE,CAAC,+BAAe,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAC5E,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa;KACtC;IACD,UAAU,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE;CACjC,CAAC,CAAC;AAEH,qBAAa,CAAC,WAAW,CAAC,SAAS,EAAE;IACnC,QAAQ,EAAE,GAAG,EAAE,CAAC,yBAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACtE,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO;KAChC;IACD,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;CAC3B,CAAC,CAAC","sourcesContent":["import { Schema, Document, Types, Model, model } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { IPaymentMethod, PaymentMethodTC } from '../paymentMethod';\nimport { IListing, ListingTC } from '../listing/listing/listing.model';\nimport { IUser, userSchema } from '../user/user.schema';\n\nexport type TransactionRoleEnum = 'purchase' | 'sale';\n\nexport type TransactionStatusEnum =\n  | 'pending'\n  | 'payment_executed'\n  | 'payment_received'\n  | 'successful'\n  | 'default'\n  | 'cancelled'\n  | 'appealed';\n\nexport type timeAppealEnum = 15 | 30 | 45 | 60;\n\nexport interface ITransaction {\n  _id?: any;\n  listing: Types.ObjectId | IListing;\n  taker: IUser;\n  maker: IUser;\n  amount: number;\n  status: TransactionStatusEnum;\n  appealed: boolean;\n  appealedBy?: IUser;\n  paymentMethod?: Types.ObjectId | IPaymentMethod;\n  active: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n  referenceNumber: number;\n  selectedWallet: string;\n  loanAdId: string;\n  amountUsd: number;\n  makerFee: number;\n  takerFee: number;\n  fiatAmount: number;\n}\n\nexport type TransactionDocument = Document<Types.ObjectId, any, ITransaction> &\n  ITransaction;\n\nconst transactionSchema = new Schema<ITransaction>(\n  {\n    listing: {\n      type: Schema.Types.ObjectId,\n      ref: 'Listing',\n    },\n    taker: {\n      type: userSchema,\n      required: [true, 'Por favor inserta un user'],\n    },\n    maker: {\n      type: userSchema,\n      required: [true, 'Por favor inserta un user'],\n    },\n    amount: {\n      type: Number,\n    },\n    status: {\n      type: String,\n      enum: [\n        'pending',\n        'payment_executed',\n        'payment_received',\n        'successful',\n        'default',\n        'cancelled',\n      ],\n      default: 'pending',\n    },\n    appealed: {\n      type: Boolean,\n      default: false,\n    },\n    appealedBy: {\n      type: userSchema,\n    },\n    paymentMethod: {\n      type: Schema.Types.ObjectId,\n      ref: 'PaymentMethod',\n    },\n    referenceNumber: {\n      type: Number,\n      unique: true,\n    },\n    selectedWallet: {\n      type: String,\n    },\n    loanAdId: {\n      type: String,\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    amountUsd: {\n      type: Number,\n      required: [true, 'Please insert an amount in Usd'],\n    },\n    makerFee: {\n      type: Number,\n    },\n    takerFee: {\n      type: Number,\n    },\n    fiatAmount: {\n      type: Number,\n    },\n  },\n  { timestamps: true }\n);\n\ntransactionSchema.pre('save', async function (next) {\n  if (!this.referenceNumber) {\n    // Buscar el número de referencia más alto en la colección y sumarle 1\n    const highest = await Transaction.findOne().sort('-referenceNumber').exec();\n    this.referenceNumber = (highest && highest.referenceNumber + 1) || 100000;\n  }\n  next();\n});\n\nexport const Transaction = model<\n  TransactionDocument,\n  Model<TransactionDocument>\n>('Transaction', transactionSchema);\n\nexport const TransactionTC = composeMongoose<TransactionDocument>(\n  Transaction as any\n);\n\nTransactionTC.addRelation('paymentMethod', {\n  resolver: () => PaymentMethodTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.paymentMethod,\n  },\n  projection: { paymentMethod: 1 },\n});\n\nTransactionTC.addRelation('listing', {\n  resolver: () => ListingTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.listing,\n  },\n  projection: { listing: 1 },\n});\n"]}