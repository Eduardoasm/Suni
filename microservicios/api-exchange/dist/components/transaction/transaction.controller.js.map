{"version":3,"file":"transaction.controller.js","sourceRoot":"/","sources":["components/transaction/transaction.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { schemaComposer } from 'graphql-compose';\nimport { TransactionTC } from './transaction.model';\nimport * as transactionService from './transaction.service';\nimport {\n  GetTransactionUserInput,\n  InProgressTransactionType,\n  TransactionType,\n  TGetTransactionUser,\n  CreateTransactionInput,\n  CancelTransactionInput,\n  NotifyPaymentInput,\n  ReleaseCryptoInput,\n  TransactionPaginationType,\n  GetFeeType,\n  GetFeeInput,\n} from './transaction.dto';\n\nexport const getInProgressTransactions = schemaComposer.createResolver<any>({\n  name: 'getInProgressTransactions',\n  kind: 'query',\n  description: 'get in progress transactions for user',\n  type: InProgressTransactionType,\n  args: {},\n  async resolve({ args, context }) {\n    const token = context.req?.headers?.authorization;\n    const transactions = await transactionService.getInProgressTransactions(\n      token\n    );\n    return transactions;\n  },\n});\n\nexport const getTransactionsUser = schemaComposer.createResolver<\n  any,\n  {\n    data: TGetTransactionUser;\n  }\n>({\n  name: 'getTransactionsUser',\n  kind: 'query',\n  description: 'get in transactions user',\n  type: TransactionPaginationType,\n  args: {\n    data: GetTransactionUserInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req?.headers?.authorization;\n    const transactions = await transactionService.getTransactionUser(\n      args?.data,\n      token\n    );\n    return transactions;\n  },\n});\n\nconst createTransaction = schemaComposer.createResolver<any>({\n  name: 'createTransaction',\n  kind: 'mutation',\n  description: 'create a transaction',\n  type: TransactionType,\n  args: {\n    data: CreateTransactionInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const transaction = await transactionService.create(args?.data, token);\n    return transaction;\n  },\n});\n\nconst cancelTransaction = schemaComposer.createResolver<any>({\n  name: 'cancelTransaction',\n  kind: 'mutation',\n  description: 'cancel a transaction',\n  type: TransactionType,\n  args: {\n    data: CancelTransactionInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const transaction = await transactionService.cancel(args?.data, token);\n    return transaction;\n  },\n});\n\nconst notifyPayment = schemaComposer.createResolver<any>({\n  name: 'notifyPayment',\n  kind: 'mutation',\n  description: 'notify payment done to maker',\n  type: TransactionType,\n  args: {\n    data: NotifyPaymentInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const transaction = await transactionService.notifyPayment(\n      args?.data,\n      token\n    );\n    return transaction;\n  },\n});\n\nconst releaseCrypto = schemaComposer.createResolver<any>({\n  name: 'releaseCrypto',\n  kind: 'mutation',\n  description: 'release transaction crypto amount to buyer',\n  type: TransactionType,\n  args: {\n    data: ReleaseCryptoInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req.headers?.authorization;\n    const transaction = await transactionService.releaseCrypto(\n      args?.data,\n      token\n    );\n    return transaction;\n  },\n});\n\nconst getFee = schemaComposer.createResolver<any>({\n  name: 'getFee',\n  kind: 'query',\n  description: 'get total fee amount for a specific transaction amount',\n  type: GetFeeType,\n  args: {\n    data: GetFeeInput,\n  },\n  async resolve({ args }) {\n    const fee = await transactionService.getFee(args?.data);\n    return fee;\n  },\n});\n\nconst transactionQueries = {\n  transaction: TransactionTC.mongooseResolvers.findOne(),\n  transactions: TransactionTC.mongooseResolvers.findMany(),\n  transactionPagination: TransactionTC.mongooseResolvers.pagination(),\n  totalTransactions: TransactionTC.mongooseResolvers.count(),\n  getInProgressTransactions,\n  getTransactionsUser,\n  getFee,\n};\n\nconst transactionMutations = {\n  updateTransaction: TransactionTC.mongooseResolvers.updateOne(),\n  createTransaction,\n  cancelTransaction,\n  notifyPayment,\n  releaseCrypto,\n};\n\nexport async function customFindOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const transaction = await transactionService.customFindOne({\n      _id: req.params._id,\n    });\n\n    return res.status(200).json({ success: true, transaction });\n  } catch (error) {\n    return res\n      .status(500)\n      .json({ success: false, msg: 'Internal server error ' });\n  }\n}\n\nexport { transactionQueries, transactionMutations };\n"]}