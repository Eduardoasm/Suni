{"version":3,"file":"transaction.dto.js","sourceRoot":"/","sources":["components/transaction/transaction.dto.ts"],"names":[],"mappings":";;;AACA,2DAI6B;AAEhB,QAAA,eAAe,GAAG,iCAAa,CAAC,OAAO,EAAE,CAAC;AAC1C,QAAA,mBAAmB,GAAG,iCAAa,CAAC,WAAW,EAAE,CAAC;AAClD,QAAA,qBAAqB,GAChC,iCAAa,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,CAAC;AACjC,QAAA,sBAAsB,GACjC,iCAAa,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE,CAAC;AAUlC,QAAA,sBAAsB,GAAG;;;;;;;CAOrC,CAAC;AAMW,QAAA,sBAAsB,GAAG;;;;CAIrC,CAAC;AAEW,QAAA,yBAAyB,GAAG;;0BAEf,uBAAe;0BACf,uBAAe;;;;;CAKxC,CAAC;AAOW,QAAA,kBAAkB,GAAG;;;;;CAKjC,CAAC;AAEW,QAAA,uBAAuB,GAAG;;;;;;;;;;;;;;;;;;;;CAoBtC,CAAC;AAaW,QAAA,sBAAsB,GAAG;;;;;;;CAOrC,CAAC;AAaW,QAAA,WAAW,GAAG;;;;;;;;;;;;;;;;;CAiB1B,CAAC;AAEW,QAAA,UAAU,GAAG;;;;;;CAMzB,CAAC;AAEW,QAAA,kBAAkB,GAAG;;;;CAIjC,CAAC;AAUW,QAAA,uBAAuB,GAAG;;;;;;;;CAQtC,CAAC;AAEW,QAAA,yBAAyB,GAAG;;;cAG3B,uBAAe;;;;;;;;;;;CAW5B,CAAC","sourcesContent":["import { Types } from 'mongoose';\nimport {\n  TransactionRoleEnum,\n  TransactionStatusEnum,\n  TransactionTC,\n} from './transaction.model';\n\nexport const TransactionType = TransactionTC.getType();\nexport const TransactionTypeName = TransactionTC.getTypeName();\nexport const TransactionTypePlural =\n  TransactionTC.getTypePlural().getTypeName();\nexport const TransactionTypeNotNull =\n  TransactionTC.getTypeNonNull().getTypeName();\n\nexport interface TCreateTransaction {\n  listingId: Types.ObjectId;\n  paymentMethod?: Types.ObjectId;\n  amount: number;\n  selectedWallet: string;\n  maker: string;\n}\n\nexport const CreateTransactionInput = `\n  input CreateTransactionInput {\n    listingId: MongoID!\n    paymentMethod: MongoID\n    amount: Float\n    selectedWallet: String!\n  }\n`;\n\nexport interface TCancelTransaction {\n  transactionId: Types.ObjectId;\n}\n\nexport const CancelTransactionInput = `\n  input CancelTransactionInput {\n    transactionId: MongoID!\n  }\n`;\n\nexport const InProgressTransactionType = `\n  type InProgressTransactionType {\n    makerTransactions: [${TransactionType}]\n    takerTransactions: [${TransactionType}]\n    totalMakerTransactions: Float!\n    totalTakerTransactions: Float!\n    total: Float!\n  }\n`;\n\nexport interface TNotifyPayment {\n  transactionId: Types.ObjectId;\n  paymentMethod?: Types.ObjectId;\n}\n\nexport const NotifyPaymentInput = `\n  input NotifyPaymentInput {\n    transactionId: MongoID!\n    paymentMethod: MongoID\n  }\n`;\n\nexport const FindOneTransactionInput = `\n  input FindOneTransactionInput {\n    _id: MongoID\n    listing: MongoID\n    maker: String\n    taker: String\n    amount: Float\n    status: String\n    appealed: Boolean\n    paymentMethod: MongoID\n    active: Boolean\n    createdAt: Date\n    updatedAt: Date\n    referenceNumber: Int\n    selectedWallet: String\n    loanAdId: String\n    amountUsd: Float\n    makerFee: Float\n    takerFee: Float\n  }\n`;\n\nexport interface TReleaseCrypto {\n  transactionId: Types.ObjectId;\n}\n\nexport interface TManageCryptoAdmin {\n  appealId: Types.ObjectId;\n  transactionId: Types.ObjectId;\n  decisionType: string;\n  finalResultDescription?: string;\n}\n\nexport const ManageCryptoAdminInput = `\n  input ManageCryptoAdminInput {\n    appealId: MongoID!\n    transactionId: MongoID!\n    decisionType: String!\n    finalResultDescription: String\n  }\n`;\n\nexport type UserRoleEnum = 'maker' | 'taker';\n\nexport type TransactionTypeEnum = 'purchase' | 'sale';\n\nexport interface TGetFee {\n  transactionAmount: number;\n  assetNetwork: string;\n  transactionType: TransactionTypeEnum;\n  userRole: UserRoleEnum;\n}\n\nexport const GetFeeInput = `\n  input GetFeeInput {\n    transactionAmount: Float!\n    assetNetwork: String!\n    transactionType: TransactionTypeEnum!\n    userRole: UserRoleEnum!\n  }\n\n  enum TransactionTypeEnum {\n    purchase\n    sale\n  }\n\n  enum UserRoleEnum {\n    maker\n    taker\n  }\n`;\n\nexport const GetFeeType = `\n  type GetFeeType {\n    fee: Float!\n    valid: Boolean\n    minTransAmount: Float!\n  }\n`;\n\nexport const ReleaseCryptoInput = `\n  input ReleaseCryptoInput {\n    transactionId: MongoID!\n  }\n`;\n\nexport type TGetTransactionUser = {\n  role: TransactionRoleEnum;\n  asset: Types.ObjectId;\n  page: number;\n  perPage: number;\n  status: TransactionStatusEnum;\n};\n\nexport const GetTransactionUserInput = `\n  input GetTransactionUser {\n    role: String\n    asset: MongoID\n    page: Int\n    perPage: Int\n    status: String\n  }\n`;\n\nexport const TransactionPaginationType = `\n  type PaginationTransaction {\n    count: Int!\n    items: [${TransactionType}]\n    pageInfo: PageInfo!\n  }\n  type PageInfoTransaction {\n    currentPage: Int\n    perPage: Int\n    itemCount: Int\n    pageCount: Int\n    hasPreviousPage: Boolean\n    hasNextPage: Boolean\n  }\n`;\n"]}