{"version":3,"file":"paymentMethodValue.controller.js","sourceRoot":"/","sources":["components/paymentMethodValue/paymentMethodValue.controller.ts"],"names":[],"mappings":";;;;AAAA,qDAAiD;AACjD,yEAAkE;AAClE,gGAA0E;AAC1E,qEAIkC;AAErB,QAAA,gBAAgB,GAAG,gCAAc,CAAC,cAAc,CAK3D;IACA,IAAI,EAAE,kBAAkB;IACxB,IAAI,EAAE,UAAU;IAChB,WAAW,EAAE,uCAAuC;IACpD,IAAI,EAAE,6CAAoB;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,kDAAyB;KAChC;IACK,OAAO,CAAC,EAAE,IAAI,EAAE;;YACpB,MAAM,kBAAkB,GACtB,MAAM,yBAAyB,CAAC,oBAAoB,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,CAAC,CAAC;YACnE,OAAO;gBACL,OAAO,EAAE,kBAAkB;aAC5B,CAAC;QACJ,CAAC;KAAA;CACF,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG;IAClC,wBAAwB,EAAE,+CAAoB,CAAC,iBAAiB,CAAC,SAAS,EAAE;IAC5E,wBAAwB,EAAE,+CAAoB,CAAC,iBAAiB,CAAC,SAAS,EAAE;IAC5E,4BAA4B,EAC1B,+CAAoB,CAAC,iBAAiB,CAAC,UAAU,EAAE;IACrD,gBAAgB,EAAhB,wBAAgB;CACjB,CAAC;AAQkC,kEAA2B;AAN/D,MAAM,yBAAyB,GAAG;IAChC,kBAAkB,EAAE,+CAAoB,CAAC,iBAAiB,CAAC,OAAO,EAAE;IACpE,mBAAmB,EAAE,+CAAoB,CAAC,iBAAiB,CAAC,QAAQ,EAAE;IACtE,wBAAwB,EAAE,+CAAoB,CAAC,iBAAiB,CAAC,KAAK,EAAE;CACzE,CAAC;AAEO,8DAAyB","sourcesContent":["import { schemaComposer } from 'graphql-compose';\nimport { PaymentMethodValueTC } from './paymentMethodValue.model';\nimport * as paymentMethodValueService from './paymentMethodValue.service';\nimport {\n  TUpdatesManyValues,\n  UpdateManyValuesType,\n  UpdateManyValuesUserInput,\n} from './paymentMethodValue.dto';\n\nexport const updateValuesUser = schemaComposer.createResolver<\n  any,\n  {\n    data: TUpdatesManyValues;\n  }\n>({\n  name: 'updateValuesUser',\n  kind: 'mutation',\n  description: 'update values for paymentMethodValues',\n  type: UpdateManyValuesType,\n  args: {\n    data: UpdateManyValuesUserInput,\n  },\n  async resolve({ args }) {\n    const paymentMethodValue =\n      await paymentMethodValueService.updateManyValuesUser(args?.data);\n    return {\n      success: paymentMethodValue,\n    };\n  },\n});\n\nconst paymentMethodValueMutations = {\n  createPaymentMethodValue: PaymentMethodValueTC.mongooseResolvers.createOne(),\n  updatePaymentMethodValue: PaymentMethodValueTC.mongooseResolvers.updateOne(),\n  updateManyPaymentMethodValue:\n    PaymentMethodValueTC.mongooseResolvers.updateMany(),\n  updateValuesUser,\n};\n\nconst paymentMethodValueQueries = {\n  paymentMethodValue: PaymentMethodValueTC.mongooseResolvers.findOne(),\n  paymentMethodsValue: PaymentMethodValueTC.mongooseResolvers.findMany(),\n  totalPaymentMethodsValue: PaymentMethodValueTC.mongooseResolvers.count(),\n};\n\nexport { paymentMethodValueQueries, paymentMethodValueMutations };\n"]}