{"version":3,"file":"paymentMethodValue.service.js","sourceRoot":"/","sources":["components/paymentMethodValue/paymentMethodValue.service.ts"],"names":[],"mappings":";;;;AAQA,uCAA2D;AAC3D,yEAGoC;AAIpC,SAAsB,OAAO,CAC3B,MAAyC,EACzC,UAAuD,EACvD,OAAkD;;QAElD,OAAO,6CAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACxE,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAAyC,EACzC,UAAuD,EACvD,OAAkD;;QAElD,OAAO,6CAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACrE,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAAwC,EACxC,MAAwE,EACxE,OAAkD;;QAElD,OAAO,6CAAkB,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACtE,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,kBAAuC;;QAClE,OAAO,6CAAkB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACvD,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAAyC,EACzC,UAAuD,EACvD,OAAkD;;QAElD,OAAO,IAAA,qBAAa,EAClB,IAAI,EACJ,OAAO,EACP,6CAAkB,EAClB,MAAM,EACN,UAAU,EACV,OAAO,CACR,CAAC;IACJ,CAAC;CAAA;AAfD,gCAeC;AACD,SAAgB,UAAU,CAAC,IAA2B;IACpD,OAAO,6CAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,CAAC;AAFD,gCAEC;AAED,SAAgB,UAAU,CACxB,MAAwC,EACxC,MAAwE,EACxE,OAAkD;IAElD,OAAO,6CAAkB,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AACvE,CAAC;AAND,gCAMC;AAED,SAAsB,oBAAoB,CAAC,IAAwB;;;QACjE,MAAM,MAAM,GAAG,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,GAAG,CAAC,CAAO,EAAE,EAAE,EAAE;YAC3C,MAAM,YAAY,GAAG,6CAAkB,CAAC,SAAS,CAC/C,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EACf,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,CACpB,CAAC;YACF,OAAO,YAAY,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1C,OAAO,IAAI,CAAC;;CACb;AAZD,oDAYC","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { NoSentryError, paginateModel } from '../../utils';\nimport {\n  IPaymentMethodValue,\n  PaymentMethodValue,\n} from './paymentMethodValue.model';\nimport { TUpdatesManyValues } from './paymentMethodValue.dto';\nimport * as PaymentMethodService from '../paymentMethod/paymentMethod.service';\n\nexport async function findOne(\n  filter?: FilterQuery<IPaymentMethodValue>,\n  projection?: ProjectionType<IPaymentMethodValue> | null,\n  options?: QueryOptions<IPaymentMethodValue> | null\n) {\n  return PaymentMethodValue.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IPaymentMethodValue>,\n  projection?: ProjectionType<IPaymentMethodValue> | null,\n  options?: QueryOptions<IPaymentMethodValue> | null\n) {\n  return PaymentMethodValue.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IPaymentMethodValue>,\n  update: UpdateQuery<IPaymentMethodValue> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IPaymentMethodValue> | null\n) {\n  return PaymentMethodValue.updateOne(filter, update, options).exec();\n}\n\nexport async function create(paymentMethodValue: IPaymentMethodValue) {\n  return PaymentMethodValue.create(paymentMethodValue);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IPaymentMethodValue>,\n  projection?: ProjectionType<IPaymentMethodValue> | null,\n  options?: QueryOptions<IPaymentMethodValue> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    PaymentMethodValue,\n    filter,\n    projection,\n    options\n  );\n}\nexport function insertMany(body: IPaymentMethodValue[]) {\n  return PaymentMethodValue.insertMany(body);\n}\n\nexport function updateMany(\n  filter: FilterQuery<IPaymentMethodValue>,\n  update: UpdateQuery<IPaymentMethodValue> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IPaymentMethodValue> | null\n) {\n  return PaymentMethodValue.updateMany(filter, update, options).exec();\n}\n\nexport async function updateManyValuesUser(body: TUpdatesManyValues) {\n  const values = body?.items?.map(async (el) => {\n    const updateValues = PaymentMethodValue.updateOne(\n      { _id: el._id },\n      { value: el.value }\n    );\n    return updateValues;\n  });\n\n  const updates = await Promise.all(values);\n\n  return true;\n}\n"]}