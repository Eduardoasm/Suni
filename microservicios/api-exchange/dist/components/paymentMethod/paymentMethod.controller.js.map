{"version":3,"file":"paymentMethod.controller.js","sourceRoot":"/","sources":["components/paymentMethod/paymentMethod.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { schemaComposer } from 'graphql-compose';\nimport { NextFunction, Request, Response } from 'express';\nimport createHttpError from 'http-errors';\nimport { PaymentMethodTC } from './paymentMethod.model';\nimport {\n  CreatePaymentMethodUserInput,\n  TCreatePaymentMethodUser,\n  PaymentMethodType,\n  GetPaymentMethodUserInput,\n  PaymentMethodTypePlural,\n  TCancelPaymentMethod,\n  CancelPaymentMethodType,\n  CancelPaymentMethodInput,\n  UpdatePaymentMethodInput,\n  TUpdatePaymentMethod,\n} from './paymentMethod.dto';\nimport * as paymentMethodService from './paymentMethod.service';\nimport { getUser } from '../../utils/walletService/userWau';\n\nexport const createPaymentMethod = schemaComposer.createResolver<\n  any,\n  {\n    data: TCreatePaymentMethodUser;\n  }\n>({\n  name: 'createPaymentMethod',\n  kind: 'mutation',\n  description: 'create payment Method',\n  type: PaymentMethodType,\n  args: {\n    data: CreatePaymentMethodUserInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req?.headers?.authorization;\n    const paymentMethod = await paymentMethodService.create(args?.data, token);\n    return paymentMethod;\n  },\n});\n\nexport const cancelPaymentMethod = schemaComposer.createResolver<\n  any,\n  {\n    data: TCancelPaymentMethod;\n  }\n>({\n  name: 'cancelPaymentMethod',\n  kind: 'mutation',\n  description: 'cancel payment Method',\n  type: CancelPaymentMethodType,\n  args: {\n    data: CancelPaymentMethodInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req?.headers?.authorization;\n    const paymentMethod = await paymentMethodService.cancelPaymentMethod(\n      args?.data,\n      token\n    );\n    return {\n      success: paymentMethod.success,\n      paymentMethod: paymentMethod.paymentMethod,\n    };\n  },\n});\n\nexport const updatePaymentMethodUser = schemaComposer.createResolver<\n  any,\n  {\n    data: TUpdatePaymentMethod;\n  }\n>({\n  name: 'updatePaymentMethod',\n  kind: 'mutation',\n  description: 'cancel payment Method',\n  type: PaymentMethodType,\n  args: {\n    data: UpdatePaymentMethodInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req?.headers?.authorization;\n    const paymentMethod = await paymentMethodService.updatePaymentMethod(\n      args?.data,\n      token\n    );\n    return paymentMethod;\n  },\n});\n\nexport const getPaymentMethodCurrency = schemaComposer.createResolver<any>({\n  name: 'getPaymentMethodUser',\n  kind: 'query',\n  description: 'get payment Method for currency',\n  type: PaymentMethodTypePlural,\n  args: {\n    data: GetPaymentMethodUserInput,\n  },\n  async resolve({ args, context }) {\n    const token = context.req?.headers?.authorization;\n    const paymentMethod = await paymentMethodService.findPaymentMethod(\n      args?.data,\n      token\n    );\n    return paymentMethod;\n  },\n});\n\nexport async function updateMany(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const updatedPaymentMethods = await paymentMethodService.updateMany(\n      req.body.filter,\n      req.body.paymentMethodType\n    );\n    return res.status(200).json(updatedPaymentMethods);\n  } catch (error) {\n    next(createHttpError(500, error.message, { err: error.message }));\n  }\n}\n\nconst paymentMethodMutations = {\n  createPaymentMethod,\n  updatePaymentMethod: PaymentMethodTC.mongooseResolvers.updateOne(),\n  cancelPaymentMethod,\n  updatePaymentMethodUser,\n};\n\nconst paymentMethodQueries = {\n  paymentMethod: PaymentMethodTC.mongooseResolvers.findOne(),\n  paymentMethods: PaymentMethodTC.mongooseResolvers.findMany(),\n  totalPaymentMethods: PaymentMethodTC.mongooseResolvers.count(),\n  getPaymentMethodCurrency,\n};\n\nexport { paymentMethodQueries, paymentMethodMutations };\n"]}