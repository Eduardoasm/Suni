{"version":3,"file":"paymentMethod.model.js","sourceRoot":"/","sources":["components/paymentMethod/paymentMethod.model.ts"],"names":[],"mappings":";;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,8DAG+B;AAC/B,oEAGkC;AAClC,qDAAwD;AAoBxD,MAAM,mBAAmB,GAAG,IAAI,iBAAM,CACpC;IACE,MAAM,EAAE;QACN;YACE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;YAC3B,GAAG,EAAE,oBAAoB;SAC1B;KACF;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,uBAAuB;KAC7B;IACD,YAAY,EAAE;QACZ;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,IAAI;SACX;KACF;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,wBAAU;QAChB,QAAQ,EAAE,CAAC,IAAI,EAAE,2BAA2B,CAAC;KAC9C;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEW,QAAA,aAAa,GAAG,IAAA,gBAAK,EAChC,eAAe,EACf,mBAAmB,CACpB,CAAC;AAEW,QAAA,eAAe,GAAG,IAAA,0CAAe,EAC5C,qBAAoB,CACrB,CAAC;AAEF,uBAAe,CAAC,WAAW,CAAC,QAAQ,EAAE;IACpC,QAAQ,EAAE,GAAG,EAAE,CAAC,yCAAoB,CAAC,iBAAiB,CAAC,cAAc,EAAE;IACvE,WAAW,EAAE;QACX,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM;KAChC;IACD,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;CAC1B,CAAC,CAAC;AAEH,uBAAe,CAAC,WAAW,CAAC,MAAM,EAAE;IAClC,QAAQ,EAAE,GAAG,EAAE,CACb,+CAAuB,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACtE,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI;KAC7B;IACD,UAAU,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;CACxB,CAAC,CAAC","sourcesContent":["import { Types, model, Document, Model, Schema } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport {\n  IPaymentMethodValue,\n  PaymentMethodValueTC,\n} from '../paymentMethodValue';\nimport {\n  IPaymentMethodCategory,\n  PaymentMethodCategoryTC,\n} from '../paymentMethodCategory';\nimport { IUser, userSchema } from '../user/user.schema';\n\nexport interface IPaymentMethod {\n  _id?: any;\n  type: Types.ObjectId | IPaymentMethodCategory;\n  values: Array<Types.ObjectId | IPaymentMethodValue>;\n  requiredInfo?: Array<string>;\n  user: IUser;\n  active?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type PaymentMethodDocument = Document<\n  Types.ObjectId,\n  any,\n  IPaymentMethod\n> &\n  IPaymentMethod;\n\nconst PaymentMethodSchema = new Schema<IPaymentMethod>(\n  {\n    values: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: 'PaymentMethodValue',\n      },\n    ],\n    type: {\n      type: Schema.Types.ObjectId,\n      ref: 'PaymentMethodCategory',\n    },\n    requiredInfo: [\n      {\n        type: String,\n        trim: true,\n      },\n    ],\n    user: {\n      type: userSchema,\n      required: [true, 'Por favor inserta un user'],\n    },\n    active: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  { timestamps: true }\n);\n\nexport const PaymentMethod = model<IPaymentMethod, Model<IPaymentMethod>>(\n  'PaymentMethod',\n  PaymentMethodSchema\n);\n\nexport const PaymentMethodTC = composeMongoose<PaymentMethodDocument>(\n  PaymentMethod as any\n);\n\nPaymentMethodTC.addRelation('values', {\n  resolver: () => PaymentMethodValueTC.mongooseResolvers.dataLoaderMany(),\n  prepareArgs: {\n    _ids: (source) => source.values,\n  },\n  projection: { values: 1 },\n});\n\nPaymentMethodTC.addRelation('type', {\n  resolver: () =>\n    PaymentMethodCategoryTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.type,\n  },\n  projection: { type: 1 },\n});\n"]}