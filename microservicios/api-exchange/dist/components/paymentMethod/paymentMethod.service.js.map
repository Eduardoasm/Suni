{"version":3,"file":"paymentMethod.service.js","sourceRoot":"/","sources":["components/paymentMethod/paymentMethod.service.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { NoSentryError, paginateModel } from '../../utils';\nimport { IPaymentMethod, PaymentMethod } from './paymentMethod.model';\nimport {\n  TCancelPaymentMethod,\n  TCreatePaymentMethodUser,\n  TGetPaymentMethodUser,\n  TUpdatePaymentMethod,\n} from './paymentMethod.dto';\nimport * as paymentMethodValueService from '../paymentMethodValue/paymentMethodValue.service';\nimport * as paymentMethodCategoryService from '../paymentMethodCategory/paymentMethodCategory.service';\nimport { getUser } from '../../utils/walletService/userWau';\nimport * as transactionService from '../transaction/transaction.service';\nimport * as listingService from '../listing/listing/listing.service';\nimport * as countryService from '../country/country.service';\n\nexport async function findOne(\n  filter?: FilterQuery<IPaymentMethod>,\n  projection?: ProjectionType<IPaymentMethod> | null,\n  options?: QueryOptions<IPaymentMethod> | null\n) {\n  return PaymentMethod.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IPaymentMethod>,\n  projection?: ProjectionType<IPaymentMethod> | null,\n  options?: QueryOptions<IPaymentMethod> | null\n) {\n  return PaymentMethod.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IPaymentMethod>,\n  update: UpdateQuery<IPaymentMethod> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IPaymentMethod> | null\n) {\n  return PaymentMethod.updateOne(filter, update, options).exec();\n}\n\nexport async function updateMany(\n  filter: FilterQuery<IPaymentMethod>,\n  update: UpdateQuery<IPaymentMethod> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IPaymentMethod> | null\n) {\n  return PaymentMethod.updateMany(filter, update, options);\n}\n\nexport async function create(\n  body: TCreatePaymentMethodUser,\n  token: string\n): Promise<IPaymentMethod> {\n  const { data: user } = await getUser(token);\n  const value = await paymentMethodValueService.insertMany(body.values);\n\n  const valuesId = value.map((idValue) => idValue._id);\n\n  const paymentMethod = await PaymentMethod.create({\n    type: body.type,\n    user: {\n      id: user?.id,\n      name: user?.metamapStatus?.dni_firstName ?? user?.name,\n      email: user?.email,\n      lastname: user?.metamapStatus?.dni_lastName ?? user?.lastname,\n    },\n    values: valuesId,\n  });\n\n  return paymentMethod;\n}\n\nexport async function findPaymentMethod(\n  body: TGetPaymentMethodUser,\n  token: string\n): Promise<IPaymentMethod[]> {\n  const { data: user } = await getUser(token);\n\n  const typeUser = await paymentMethodCategoryService.find({\n    currency: body.currency ? body.currency : { $ne: null },\n    active: true,\n  });\n\n  const paymentMethodUser = await PaymentMethod.find({\n    type: typeUser,\n    'user.id': user?.id,\n    active: true,\n  });\n\n  return paymentMethodUser;\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IPaymentMethod>,\n  projection?: ProjectionType<IPaymentMethod> | null,\n  options?: QueryOptions<IPaymentMethod> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    PaymentMethod,\n    filter,\n    projection,\n    options\n  );\n}\n\nexport async function cancelPaymentMethod(\n  body: TCancelPaymentMethod,\n  token: string\n) {\n  const { data: user } = await getUser(token);\n\n  // const countryAvailable = await countryService.findOne({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n\n  const paymentMethod = await PaymentMethod.findOne({\n    $and: [{ _id: body.paymentMethodId }, { 'user.id': user?.id }],\n  });\n\n  if (!paymentMethod) {\n    throw new NoSentryError('Error in delete paymentMethod');\n  }\n\n  const transaction = await transactionService.find({\n    $and: [\n      { paymentMethod: paymentMethod._id },\n      { active: true },\n      {\n        status: {\n          $in: [\n            'pending',\n            'payment_executed',\n            'payment_received',\n            'default',\n            'appealed',\n          ],\n        },\n      },\n    ],\n  });\n\n  if (transaction.length) {\n    throw new NoSentryError(\n      'Error in delete paymentMethod, please finish the transaction'\n    );\n  }\n\n  const listing = await listingService.find({\n    $and: [{ paymentMethods: paymentMethod._id }, { status: 'active' }],\n  });\n\n  if (listing.length === 1) {\n    throw new NoSentryError(\n      'Error in delete paymentMethod, please delete de listing'\n    );\n  }\n\n  paymentMethod.active = false;\n  await paymentMethod.save();\n\n  return {\n    success: true,\n    paymentMethod,\n  };\n}\n\nexport async function updatePaymentMethod(\n  body: TUpdatePaymentMethod,\n  token: string\n) {\n  const { data: user } = await getUser(token);\n\n  // const countryAvailable = await countryService.findOne({\n  //   code: user.country,\n  //   active: true,\n  //   disabled: false,\n  // });\n  // if (!countryAvailable)\n  //   throw new NoSentryError(\n  //     'Access denied, the country is disabled to the app'\n  //   );\n\n  const paymentMethodUser = await PaymentMethod.findOne({\n    $and: [{ _id: body.paymentMethodId }, { 'user.id': user.id }],\n  });\n\n  if (!paymentMethodUser) {\n    throw new NoSentryError('Error in update Payment Method');\n  }\n\n  const transaction = await transactionService.find({\n    $and: [\n      { paymentMethod: paymentMethodUser._id },\n      { active: true },\n      {\n        status: {\n          $in: [\n            'pending',\n            'payment_executed',\n            'payment_received',\n            'default',\n            'appealed',\n          ],\n        },\n      },\n    ],\n  });\n\n  if (transaction.length) {\n    throw new NoSentryError(\n      'Error in update paymentMethod, please finish the transaction'\n    );\n  }\n\n  const type = await paymentMethodCategoryService.findOne({ _id: body?.type });\n\n  const value = await paymentMethodValueService.insertMany(body?.values);\n\n  const valuesId = value.map((idValue) => idValue._id);\n\n  const paymentUpdate = await PaymentMethod.updateOne(\n    {\n      _id: paymentMethodUser._id,\n      'user.id': user?.id,\n    },\n    {\n      type: type?._id,\n      values: valuesId,\n      requiredInfo: body?.requiredInfo,\n    }\n  );\n\n  const paymentMethod = await PaymentMethod.findOne({\n    _id: body.paymentMethodId,\n  });\n\n  return paymentMethod;\n}\n"]}