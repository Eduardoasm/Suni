{"version":3,"file":"SentryPlugin.js","sourceRoot":"/","sources":["utils/SentryPlugin.ts"],"names":[],"mappings":";;;;AAAA,yCAAyC;AACzC,2CAA2C;AAC3C,6DAAuC;AACvC,wEAA+B;AAc/B,MAAa,YAAY;IACvB,eAAe,CACb,eAAgD;QAEhD,OAAO,OAAO,CAAC,OAAO,CAAC;YACf,kBAAkB,CACtB,GAAiD;;;oBAEjD,IAAI,MAAA,MAAC,GAAW,aAAX,GAAG,uBAAH,GAAG,CAAU,GAAG,0CAAE,OAAO,0CAAE,KAAK,EAAE;wBACrC,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CACxB,MAAA,MAAC,GAAW,aAAX,GAAG,uBAAH,GAAG,CAAU,GAAG,0CAAE,OAAO,0CAAE,KAAe,CAC5C,CAAC;wBACF,MAAM,CAAC,OAAO,CAAC;4BACb,EAAE,EAAG,OAAe,CAAC,EAAE;yBACxB,CAAC,CAAC;qBACJ;oBACD,KAAK,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;wBAC5B,sCAAsC;wBACtC,yDAAyD;wBACzD,IAAI,CAAA,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,UAAU,0CAAE,IAAI,MAAK,WAAW,EAAE;4BACzC,+CAA+C;4BAC/C,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;;gCACzB,qEAAqE;gCACrE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS,0CAAE,SAAS,CAAC,CAAC;gCAChD,6EAA6E;gCAC7E,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,0CAAE,KAAK,CAAC,CAAC;gCAC7C,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,0CAAE,SAAS,CAAC,CAAC;gCACrD,IAAI,GAAG,CAAC,IAAI,EAAE;oCACZ,yCAAyC;oCACzC,KAAK,CAAC,aAAa,CAAC;wCAClB,QAAQ,EAAE,YAAY;wCACtB,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;wCAC7B,KAAK,EAAE,OAAO;qCACf,CAAC,CAAC;iCACJ;gCACD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;4BAC/B,CAAC,CAAC,CAAC;yBACJ;qBACF;;aACF;SACF,CAAC,CAAC;IACL,CAAC;CACF;AA1CD,oCA0CC","sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint-disable class-methods-use-this */\nimport * as Sentry from '@sentry/node';\nimport jwt from 'jsonwebtoken';\nimport type { Request, Response } from 'express';\nimport {\n  ApolloServerPlugin,\n  GraphQLRequestContext,\n  GraphQLRequestContextDidEncounterErrors,\n  GraphQLRequestListener,\n} from '@apollo/server';\n\ninterface IContext {\n  req: Request;\n  res: Response;\n}\n\nexport class SentryPlugin implements ApolloServerPlugin {\n  requestDidStart(\n    _requestContext: GraphQLRequestContext<IContext>\n  ): Promise<GraphQLRequestListener<IContext> | void> {\n    return Promise.resolve({\n      async didEncounterErrors(\n        ctx: GraphQLRequestContextDidEncounterErrors<any>\n      ): Promise<void> {\n        if ((ctx as any)?.req?.cookies?.token) {\n          const payload = jwt.decode(\n            (ctx as any)?.req?.cookies?.token as string\n          );\n          Sentry.setUser({\n            id: (payload as any).id,\n          });\n        }\n        for (const err of ctx.errors) {\n          // Only report internal server errors,\n          // all errors extending ApolloError should be user-facing\n          if (err?.extensions?.code !== 'NO_SENTRY') {\n            // Add scoped report details and send to Sentry\n            Sentry.withScope((scope) => {\n              // Annotate whether failing operation was query/mutation/subscription\n              scope.setTag('kind', ctx?.operation?.operation);\n              // Log query and variables as extras (make sure to strip out sensitive data!)\n              scope.setExtra('query', ctx?.request?.query);\n              scope.setExtra('variables', ctx?.request?.variables);\n              if (err.path) {\n                // We can also add the path as breadcrumb\n                scope.addBreadcrumb({\n                  category: 'query-path',\n                  message: err.path.join(' > '),\n                  level: 'debug',\n                });\n              }\n              Sentry.captureException(err);\n            });\n          }\n        }\n      },\n    });\n  }\n}\n"]}