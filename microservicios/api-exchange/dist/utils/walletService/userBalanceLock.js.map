{"version":3,"file":"userBalanceLock.js","sourceRoot":"/","sources":["utils/walletService/userBalanceLock.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,0DAA0B;AAC1B,oDAAiD;AAQjD;;;;;;GAMG;AAEH,SAAsB,WAAW,CAAC,IAAkB;;QAClD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,MAAM,IAAI,6BAAa,CAAC,oBAAoB,CAAC,CAAC;SAC/C;QAED,MAAM,IAAI,GAAG,IAAA,eAAK,GAAE,CAAC;QAErB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAEzC,MAAM,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAEtE,MAAM,MAAM,GAAG;YACb,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW;YAChC,GAAG,EAAE,iBAAiB,IAAI,CAAC,MAAM,EAAE;YACnC,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,IAAI,CAAC,KAAK,EAAE;aACtC;YACD,IAAI,EAAE;gBACJ,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,SAAS,EAAE,kBAAkB;gBAC7B,OAAO,EAAE,aAAa;gBACtB,UAAU,EAAE,IAAI,CAAC,QAAQ;aAC1B;SACF,CAAC;QAEF,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,MAAM,CAAC,CAAC;YAErC,IAAI,CAAC,IAAI,CAAC,OAAO;gBACf,MAAM,IAAI,6BAAa,CAAC,iCAAiC,CAAC,CAAC;YAE7D,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAC;YACtD,MAAM,IAAI,6BAAa,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;SACtE;IACH,CAAC;CAAA;AArCD,kCAqCC","sourcesContent":["import axios from 'axios';\nimport dayjs from 'dayjs';\nimport { NoSentryError } from '../NoSentryError';\n\nexport interface TLockBalance {\n  token?: string;\n  wallet?: string;\n  amount?: number;\n  makerFee?: number;\n}\n/**\n *\n * @param token token received from app\n * @param wallet wallet received from app\n * @param amount amount of listing\n * @param makerFee fee of maker\n */\n\nexport async function balanceLock(body: TLockBalance): Promise<any> {\n  if (!body.token) {\n    throw new NoSentryError('Token not provided');\n  }\n\n  const date = dayjs();\n\n  const dateToExpire = date.add(30, 'day');\n\n  const formatDateToExpire = dateToExpire.format('YYYY-MM-DD HH:mm:ss');\n\n  const config = {\n    method: 'post',\n    baseURL: process.env.SERVICE_URL,\n    url: `/wallet/block/${body.wallet}`,\n    headers: {\n      authorization: `Bearer ${body.token}`,\n    },\n    data: {\n      amount: body.amount,\n      expiresAt: formatDateToExpire,\n      service: 'p2pexchange',\n      serviceFee: body.makerFee,\n    },\n  };\n\n  try {\n    const { data } = await axios(config);\n\n    if (!data.success)\n      throw new NoSentryError('Error blocking amount in wallet');\n\n    return data;\n  } catch (error) {\n    console.log(error, 'Error blocking amount in wallet');\n    throw new NoSentryError(`Error blocking amount in wallet: ${error}`);\n  }\n}\n"]}