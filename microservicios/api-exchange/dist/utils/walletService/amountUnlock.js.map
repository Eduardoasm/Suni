{"version":3,"file":"amountUnlock.js","sourceRoot":"/","sources":["utils/walletService/amountUnlock.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAE1B,oDAAiD;AAYjD;;;;;;;;GAQG;AAEH,SAAsB,aAAa,CAAC,IAAoB;;;QACtD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,MAAM,IAAI,6BAAa,CAAC,oBAAoB,CAAC,CAAC;SAC/C;QAED,IAAI;YACF,MAAM,MAAM,GAAG;gBACb,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW;gBAChC,GAAG,EAAE,mBAAmB,IAAI,CAAC,OAAO,EAAE;gBACtC,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,IAAI,CAAC,KAAK,EAAE;iBACtC;gBACD,IAAI,EAAE;oBACJ,UAAU,EAAE,IAAI,CAAC,QAAQ;oBACzB,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,cAAc,EAAE,IAAI,CAAC,QAAQ;iBAC9B;aACF,CAAC;YAEF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,MAAM,CAAC,CAAC;YAErC,IAAI,CAAC,IAAI,CAAC,OAAO;gBACf,MAAM,IAAI,6BAAa,CAAC,kCAAkC,CAAC,CAAC;YAE9D,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;YACzD,MAAM,IAAI,6BAAa,CACrB,MAAA,KAAK,CAAC,OAAO,mCAAI,kCAAkC,CACpD,CAAC;SACH;;CACF;AAjCD,sCAiCC","sourcesContent":["import axios from 'axios';\nimport dayjs from 'dayjs';\nimport { NoSentryError } from '../NoSentryError';\nimport { IListing } from '../../components/listing/listing';\nimport { ITransaction } from '../../components/transaction';\n\nexport interface TUnlockBalance {\n  token: string;\n  toWallet?: string;\n  amount: number;\n  takerFee: number;\n  blockId: string;\n  description: string;\n}\n/**\n *\n * @param amount amount of listing\n * @param blockId id for service balance lock (loanAdId)\n * @param description receipt description\n * @param takerFee fee of taker\n * @param token token received from app\n * @param toWallet wallet destination\n */\n\nexport async function unlockBalance(body: TUnlockBalance): Promise<any> {\n  if (!body.token) {\n    throw new NoSentryError('Token not provided');\n  }\n\n  try {\n    const config = {\n      method: 'post',\n      baseURL: process.env.SERVICE_URL,\n      url: `/wallet/unblock/${body.blockId}`,\n      headers: {\n        authorization: `Bearer ${body.token}`,\n      },\n      data: {\n        toWalletId: body.toWallet,\n        amount: body.amount,\n        description: body.description,\n        destServiceFee: body.takerFee,\n      },\n    };\n\n    const { data } = await axios(config);\n\n    if (!data.success)\n      throw new NoSentryError('Error unlocking amount in wallet');\n\n    return data.success;\n  } catch (error) {\n    console.log(`Error unlocking amount in wallet ${error}`);\n    throw new NoSentryError(\n      error.message ?? 'Error unlocking amount in wallet'\n    );\n  }\n}\n"]}