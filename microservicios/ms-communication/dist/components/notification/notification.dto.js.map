{"version":3,"file":"notification.dto.js","sourceRoot":"/","sources":["components/notification/notification.dto.ts"],"names":[],"mappings":";;;AACA,6DAA6E;AAEhE,QAAA,oBAAoB,GAAG,mCAAc,CAAC,WAAW,EAAE,CAAC;AACpD,QAAA,gBAAgB,GAAG,mCAAc,CAAC,OAAO,EAAE,CAAC;AAC5C,QAAA,sBAAsB,GACjC,mCAAc,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,CAAC;AAClC,QAAA,uBAAuB,GAAG,mCAAc,CAAC,cAAc,EAAE,CAAC;AAQ1D,QAAA,qBAAqB,GAAG;;;;;;;;;;;;CAYpC,CAAC;AAMW,QAAA,uBAAuB,GAAG;;;;CAItC,CAAC;AAMW,QAAA,qBAAqB,GAAG;;;;CAIpC,CAAC;AAYW,QAAA,uBAAuB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;CAwBtC,CAAC;AAMW,QAAA,6BAA6B,GAAG;;;;CAI5C,CAAC;AACF,iHAAiH;AACjH,oDAAoD;AACvC,QAAA,4BAA4B,GAAG;;oBAExB,wBAAgB;;;CAGnC,CAAC","sourcesContent":["import { Types } from 'mongoose';\nimport { ModelEnum, ModuleEnum, NotificationTC } from './notification.model';\n\nexport const NotificationTypeName = NotificationTC.getTypeName();\nexport const NotificationType = NotificationTC.getType();\nexport const NotificationTypePlural =\n  NotificationTC.getTypePlural().getTypeName();\nexport const NotificationTypeNotNull = NotificationTC.getTypeNonNull();\n\nexport type TGetNotifications = {\n  page: number;\n  perPage: number;\n  module: ModuleEnum;\n};\n\nexport const GetNotificationsInput = `\n  input GetNotifications {\n    page: Int!\n    perPage: Int!\n    module: moduleNotifications\n  }\n\n  enum moduleNotifications {\n    wallet\n    loans\n    exchange\n  }\n`;\n\nexport type TDeleteNotification = {\n  notificationId: Types.ObjectId;\n};\n\nexport const DeleteNotificationInput = `\n  input DeleteNotification {\n    notificationId: MongoID!\n  }\n`;\n\nexport type TReadNotification = {\n  notificationId: Types.ObjectId;\n};\n\nexport const ReadNotificationInput = `\n  input ReadNotification {\n    notificationId: MongoID!\n  }\n`;\n\nexport type TCreateNotification = {\n  messageTemplateId: string;\n  recipientId: string;\n  model?: ModelEnum;\n  module: ModuleEnum;\n  object?: string;\n  senderId?: string;\n  variables?: object;\n};\n\nexport const CreateNotificationInput = `\n  input CreateNotification {\n    messageTemplateId: MongoID\n    recipientId: String\n    model: Model\n    module: Module\n    object: String\n  }\n\n  enum Model {\n    contract\n    loanRequest\n    loanOffer\n    listing\n    transaction\n    wallet\n  }\n\n  enum Module {\n    wallet\n    loans\n    exchange\n    kyc\n  }\n`;\n\nexport type TCustomNotification = {\n  _id: Types.ObjectId;\n};\n\nexport const CustomGetOneNotificationInput = `\n  input CustomGetOne {\n    _id: MongoID!\n  }\n`;\n// relationObject es de type JSON ya que podria venir de diferentes models: contract, loanRequest, loanOffer etc.\n// por lo tanto el JSON retornara el objeto completo\nexport const CustomGetOneNotificationType = `\n  type CustomGetOneNotification {\n    notification: ${NotificationType}\n    relationObject: JSON\n  }\n`;\n"]}