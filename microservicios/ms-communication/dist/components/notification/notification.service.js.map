{"version":3,"file":"notification.service.js","sourceRoot":"/","sources":["components/notification/notification.service.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport axios from 'axios';\nimport { INotification, Notification } from './notification.model';\nimport { NoSentryError, paginateModel } from '../../utils';\nimport {\n  TGetNotifications,\n  TReadNotification,\n  TDeleteNotification,\n  TCreateNotification,\n  TCustomNotification,\n} from './notification.dto';\nimport { getUserInfo } from '../../utils/walletService/userInfo';\nimport * as messageTemplateService from '../messageTemplate/messageTemplate.service';\nimport { getUserInfoWithId } from '../../utils/walletService/userInfoWithId';\nimport { IMessage } from '../message/message.model';\nimport * as messageService from '../message/message.service';\n\nexport async function findOne(\n  filter?: FilterQuery<INotification>,\n  projection?: ProjectionType<INotification> | null,\n  options?: QueryOptions<INotification> | null\n) {\n  return Notification.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<INotification>,\n  projection?: ProjectionType<INotification> | null,\n  options?: QueryOptions<INotification> | null\n) {\n  return Notification.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<INotification>,\n  update: UpdateQuery<INotification> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<INotification> | null\n) {\n  return Notification.updateOne(filter, update, options).exec();\n}\n\nexport async function create(notification: INotification) {\n  return Notification.create(notification);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<INotification>,\n  projection?: ProjectionType<INotification> | null,\n  options?: QueryOptions<INotification> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    Notification,\n    filter,\n    projection,\n    options\n  );\n}\n\nexport async function getNotifications(body: TGetNotifications, token: string) {\n  const { data: user } = await getUserInfo(token);\n\n  const filter: FilterQuery<INotification> = {\n    recipientId: user?.id,\n    isActive: true,\n  };\n\n  if (body?.module) {\n    filter.module = body.module;\n  }\n\n  const options: QueryOptions<INotification> = {\n    sort: {\n      createdAt: -1,\n    },\n  };\n\n  return paginateModel(\n    body.page,\n    body.perPage,\n    Notification,\n    filter,\n    {},\n    options\n  );\n}\n\nexport async function softDeleteNotification(\n  body: TDeleteNotification,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const filter: FilterQuery<INotification> = {\n    _id: body?.notificationId,\n    recipientId: user?.id,\n    isActive: true,\n  };\n\n  const update: UpdateQuery<INotification> = {\n    $set: {\n      isActive: false,\n    },\n  };\n\n  const options: QueryOptions<INotification> = {\n    new: true,\n  };\n\n  const notification = await Notification.findOneAndUpdate(\n    filter,\n    update,\n    options\n  );\n\n  return notification;\n}\n// se crea function para read notification, es parecida al soft delete pero\n// la idea es separar funcionabilidades\nexport async function readNotification(body: TReadNotification, token: string) {\n  const { data: user } = await getUserInfo(token);\n\n  const filter: FilterQuery<INotification> = {\n    _id: body?.notificationId,\n    recipientId: user?.id,\n    read: false,\n    isActive: true,\n  };\n\n  const update: UpdateQuery<INotification> = {\n    $set: {\n      read: true,\n    },\n  };\n\n  const options: QueryOptions<INotification> = {\n    new: true,\n  };\n\n  const notification = await Notification.findOneAndUpdate(\n    filter,\n    update,\n    options\n  );\n\n  return notification;\n}\n\nexport async function readManyNotifications(token: string) {\n  try {\n    const { data: user } = await getUserInfo(token);\n\n    const notificationsFound = await find({\n      recipientId: user?.id,\n      active: true,\n      read: false,\n    });\n\n    await Promise.all(\n      notificationsFound.map((notification) =>\n        updateOne({ _id: notification._id }, { read: true })\n      )\n    );\n\n    return true;\n  } catch (error) {\n    console.log('Error in read notifications', error);\n    return false;\n  }\n}\n\nexport async function customCreateNotification(\n  body: TCreateNotification,\n  token: string\n) {\n  // se realizara la busqueda de usuario por id y no por token ya que en la lambda\n  // no es posible obtener el token de el usuario, y hacemos la busqueda\n  // de el usuario por su id y con el admin token\n  const { data: user } = await getUserInfoWithId(token, body?.senderId);\n\n  const messageTemplate = await messageTemplateService.findOne({\n    templateId: body.messageTemplateId,\n  });\n\n  if (!messageTemplate) {\n    throw new NoSentryError('Message template not found');\n  }\n\n  if (body?.variables && Object.keys(body?.variables)?.length > 0) {\n    messageTemplate.messages.forEach((message: IMessage) => {\n      // iteramos sobre las variables, pueden haber mas de 1 en el mensaje\n      for (const variable of Object.keys(body.variables)) {\n        message.content = message.content.replaceAll(\n          variable,\n          body.variables[variable]\n        );\n      }\n    });\n  }\n\n  const notification = await Notification.create({\n    message: messageTemplate?._id,\n    senderId: user?.id ?? undefined,\n    senderFirstName:\n      user?.metamapStatus?.dni_firstName?.split(' ')[0] ??\n      user?.name ??\n      undefined,\n    senderLastName:\n      user?.metamapStatus?.dni_lastName?.split(' ')[0] ??\n      user?.lastname ??\n      undefined,\n    recipientId: body?.recipientId,\n    model: body?.model,\n    module: body?.module,\n    read: false,\n    object: body?.object,\n    receivedMessages: messageTemplate.messages,\n  });\n\n  return notification;\n}\n\nexport async function customFindOne(body: TCustomNotification, token: string) {\n  const { data: user } = await getUserInfo(token);\n\n  const notificationFound = await findOne({\n    _id: body._id,\n    recipientId: user?.id,\n  });\n\n  if (!notificationFound) {\n    throw new NoSentryError('Notification not found');\n  }\n\n  notificationFound.read = true;\n  await notificationFound.save();\n\n  const requests = {\n    contract: `${process.env.LOANS_URL}/api/v1/contracts/${notificationFound.object}`,\n    loanRequest: `${process.env.LOANS_URL}/api/v1/loanRequest/${notificationFound.object}`,\n    loanOffer: `${process.env.LOANS_URL}/api/v1/loanOffer/${notificationFound.object}`,\n    listing: `${process.env.EXCHANGE_URL}/api/v1/listing/${notificationFound.object}`,\n    transaction: `${process.env.EXCHANGE_URL}/api/v1/transaction/${notificationFound.object}`,\n    wallet: `${process.env.SERVICE_URL}/wallet/${notificationFound.object}`,\n  };\n\n  const { data } = await axios.get(requests[notificationFound.model], {\n    headers: {\n      Authorization:\n        notificationFound.model === 'wallet' ? `Bearer ${token}` : null,\n    },\n  });\n  // no se adjunto el relationObject a una nueva propiedad de notification por el schema de graphql\n  // para no realizar un nuevo type de notification de graphql\n  return {\n    notification: (notificationFound as any)._doc,\n    relationObject: data[notificationFound.model] ?? data.data,\n    // se realiza condicional ?? con la data por que no sabemos como retorna WAU los modelos con los getOne,\n    // y en caso de que no sea igual con el nombre de el modelo, retorne la data completa\n  };\n}\n\nexport async function unreadNotification(\n  body: TReadNotification,\n  token: string\n) {\n  const { data: user } = await getUserInfo(token);\n\n  const filter: FilterQuery<INotification> = {\n    _id: body?.notificationId,\n    recipientId: user?.id,\n    read: true,\n    isActive: true,\n  };\n\n  const update: UpdateQuery<INotification> = {\n    $set: {\n      read: false,\n    },\n  };\n\n  const options: QueryOptions<INotification> = {\n    new: true,\n  };\n\n  const notification = await Notification.findOneAndUpdate(\n    filter,\n    update,\n    options\n  );\n\n  return notification;\n}\n"]}