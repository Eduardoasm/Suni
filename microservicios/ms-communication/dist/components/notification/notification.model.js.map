{"version":3,"file":"notification.model.js","sourceRoot":"/","sources":["components/notification/notification.model.ts"],"names":[],"mappings":";;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,oFAGkD;AAClD,4DAAmE;AAoCnE,MAAM,kBAAkB,GAAG,IAAI,iBAAM,CACnC;IACE,OAAO,EAAE;QACP,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,iBAAiB;KACvB;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;KACb;IACD,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;KACb;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;KACb;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE;YACJ,aAAa;YACb,WAAW;YACX,UAAU;YACV,SAAS;YACT,aAAa;YACb,QAAQ;SACT;KACF;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC;KAC7C;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,gBAAgB,EAAE,CAAC,6BAAa,CAAC;CAClC,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEW,QAAA,YAAY,GAAG,IAAA,gBAAK,EAC/B,cAAc,EACd,kBAAkB,CACnB,CAAC;AAEW,QAAA,cAAc,GAAG,IAAA,0CAAe,EAC3C,oBAAmB,CACpB,CAAC;AAEF,sBAAc,CAAC,WAAW,CAAC,SAAS,EAAE;IACpC,QAAQ,EAAE,GAAG,EAAE,CACb,yCAAiB,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAChE,WAAW,EAAE;QACX,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO;KAChC;IACD,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;CAC3B,CAAC,CAAC","sourcesContent":["import { Schema, Document, Types, Model, model } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport {\n  IMessageTemplate,\n  MessageTemplateTC,\n} from '../messageTemplate/messageTemplate.model';\nimport { IMessage, messageSchema } from '../message/message.model';\n\nexport type ModelEnum =\n  | 'contract'\n  | 'loanRequest'\n  | 'loanOffer'\n  | 'listing'\n  | 'transaction'\n  | 'wallet';\n\nexport type ModuleEnum = 'wallet' | 'loans' | 'exchange' | 'kyc';\n\nexport interface INotification {\n  _id?: any;\n  message: Types.ObjectId | IMessageTemplate;\n  senderId?: string;\n  senderFirstName?: string;\n  senderLastName?: string;\n  recipientId: string;\n  model?: ModelEnum;\n  object?: string;\n  module: ModuleEnum;\n  read: boolean;\n  receivedMessages?: Array<IMessage>;\n  isActive?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type NotificationDocument = Document<\n  Types.ObjectId,\n  any,\n  INotification\n> &\n  INotification;\n\nconst notificationSchema = new Schema<INotification>(\n  {\n    message: {\n      type: Schema.Types.ObjectId,\n      ref: 'MessageTemplate',\n    },\n    senderId: {\n      type: String,\n    },\n    senderFirstName: {\n      type: String,\n    },\n    senderLastName: {\n      type: String,\n    },\n    recipientId: {\n      type: String,\n    },\n    model: {\n      type: String,\n      enum: [\n        'loanRequest',\n        'loanOffer',\n        'contract',\n        'listing',\n        'transaction',\n        'wallet',\n      ],\n    },\n    object: {\n      type: String,\n    },\n    module: {\n      type: String,\n      enum: ['wallet', 'loans', 'exchange', 'kyc'],\n    },\n    read: {\n      type: Boolean,\n      default: false,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n    receivedMessages: [messageSchema],\n  },\n  { timestamps: true }\n);\n\nexport const Notification = model<INotification, Model<INotification>>(\n  'Notification',\n  notificationSchema\n);\n\nexport const NotificationTC = composeMongoose<NotificationDocument>(\n  Notification as any\n);\n\nNotificationTC.addRelation('message', {\n  resolver: () =>\n    MessageTemplateTC.mongooseResolvers.dataLoader({ lean: true }),\n  prepareArgs: {\n    _id: (source) => source.message,\n  },\n  projection: { message: 1 },\n});\n"]}