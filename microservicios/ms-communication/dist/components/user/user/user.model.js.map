{"version":3,"file":"user.model.js","sourceRoot":"/","sources":["components/user/user/user.model.ts"],"names":[],"mappings":"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","sourcesContent":["import slugs from 'slugs';\nimport m2s from 'mongoose-to-swagger';\nimport { hash } from 'argon2';\nimport { Schema, Document, Types, Model, model, models } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { IPermission, permissionSchema } from '../permissions';\nimport { ISession, sessionSchema } from '../sessions';\n\nexport type UserRoleEnum = 'admin' | 'superadmin';\n\nexport type DniTypeEnum = 'V' | 'E' | 'J' | 'G' | 'P' | 'N/A';\n\nexport interface IUser {\n  _id?: any;\n  slug?: string; // TODO: favoritos y user string wau\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  permission: Array<IPermission>;\n  userRole: UserRoleEnum;\n  emailVerify?: boolean;\n  resetTokenValidity?: Date;\n  resetToken?: string;\n  dni?: string;\n  dniType?: DniTypeEnum;\n  sessions?: Array<ISession>;\n  active?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type UserDocument = Document<Types.ObjectId, any, IUser> & IUser;\n\nconst userSchema = new Schema<IUser>(\n  {\n    slug: {\n      type: String,\n    },\n    email: {\n      type: String,\n      required: [true, 'Por favor ingrese un correo electrónico'],\n      trim: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: [true, 'Por favor ingrese una contraseña'],\n    },\n    firstName: {\n      type: String,\n      required: [true, 'Por favor ingrese un nombre'],\n      trim: true,\n    },\n    lastName: {\n      type: String,\n      // required: [true, 'Por favor ingrese un apellido'],\n      trim: true,\n    },\n    permission: [permissionSchema],\n    userRole: {\n      type: String,\n      enum: ['client', 'admin', 'superadmin'],\n    },\n    emailVerify: {\n      type: Boolean,\n      default: false,\n    },\n    resetTokenValidity: {\n      type: Date,\n    },\n    resetToken: {\n      type: String,\n    },\n    dni: {\n      type: String,\n      trim: true,\n    },\n    dniType: {\n      type: String,\n      enum: ['V', 'E', 'J', 'G', 'P', 'N/A'],\n    },\n    sessions: [sessionSchema],\n    active: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  { timestamps: true }\n);\n\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('firstName') || !this.isModified('lastName')) {\n    return next();\n  }\n  this.slug = slugs(`${this.firstName} ${this.lastName}`);\n  const slugRegEx = new RegExp(`^(${this.slug})((-[0-9]*$)?)$`);\n  const withSlugs = await (this as any).constructor.find({\n    slug: slugRegEx,\n  });\n  if ((withSlugs as Array<UserDocument>).length) {\n    this.slug = `${this.slug}-${withSlugs.length + 1}`;\n  }\n  next();\n});\n\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next();\n  }\n  this.password = (await hash(this.password, {})).toString();\n  next();\n});\n\nexport const User =\n  (models.User as Model<UserDocument> & {\n    SyncToAlgolia?: any;\n    SetAlgoliaSettings?: any;\n  }) ||\n  model<\n    UserDocument,\n    Model<UserDocument> & {\n      SyncToAlgolia?: any;\n      SetAlgoliaSettings?: any;\n    }\n  >('User', userSchema);\n\nexport const UserTC = composeMongoose<UserDocument>(User as any);\n\nexport const UserSwagger = m2s(User);\n"]}