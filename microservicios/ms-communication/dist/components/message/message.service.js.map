{"version":3,"file":"message.service.js","sourceRoot":"/","sources":["components/message/message.service.ts"],"names":[],"mappings":";;;;AAOA,mDAAoD;AACpD,uCAA4C;AAE5C,SAAsB,OAAO,CAC3B,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,uBAAO,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,uBAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC1D,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAA6B,EAC7B,MAA6D,EAC7D,OAAuC;;QAEvC,OAAO,uBAAO,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3D,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,OAAiB;;QAC5C,OAAO,uBAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAA8B,EAC9B,UAA4C,EAC5C,OAAuC;;QAEvC,OAAO,IAAA,qBAAa,EAAC,IAAI,EAAE,OAAO,EAAE,uBAAO,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC;CAAA;AARD,gCAQC","sourcesContent":["import type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { IMessage, Message } from './message.model';\nimport { paginateModel } from '../../utils';\n\nexport async function findOne(\n  filter?: FilterQuery<IMessage>,\n  projection?: ProjectionType<IMessage> | null,\n  options?: QueryOptions<IMessage> | null\n) {\n  return Message.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IMessage>,\n  projection?: ProjectionType<IMessage> | null,\n  options?: QueryOptions<IMessage> | null\n) {\n  return Message.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IMessage>,\n  update: UpdateQuery<IMessage> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IMessage> | null\n) {\n  return Message.updateOne(filter, update, options).exec();\n}\n\nexport async function create(message: IMessage) {\n  return Message.create(message);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IMessage>,\n  projection?: ProjectionType<IMessage> | null,\n  options?: QueryOptions<IMessage> | null\n) {\n  return paginateModel(page, perPage, Message, filter, projection, options);\n}\n"]}