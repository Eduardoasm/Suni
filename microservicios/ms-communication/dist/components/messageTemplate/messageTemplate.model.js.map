{"version":3,"file":"messageTemplate.model.js","sourceRoot":"/","sources":["components/messageTemplate/messageTemplate.model.ts"],"names":[],"mappings":";;;;AAAA,uCAAiE;AACjE,uEAA2D;AAC3D,4DAA+D;AAkB/D,MAAM,qBAAqB,GAAG,IAAI,iBAAM,CACtC;IACE,QAAQ,EAAE;QACR;YACE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ;YAC3B,GAAG,EAAE,SAAS;SACf;KACF;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,qBAAqB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAgB,IAAI;;QACpD,SAAS,UAAU;YACjB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAEnC,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAE1C,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC;SAChC;QAED,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC;AAEU,QAAA,eAAe,GAAG,IAAA,gBAAK,EAClC,iBAAiB,EACjB,qBAAqB,CACtB,CAAC;AAEW,QAAA,iBAAiB,GAAG,IAAA,0CAAe,EAC9C,uBAAsB,CACvB,CAAC;AAEF,yBAAiB,CAAC,WAAW,CAAC,UAAU,EAAE;IACxC,QAAQ,EAAE,GAAG,EAAE,CAAC,yBAAS,CAAC,iBAAiB,CAAC,cAAc,EAAE;IAC5D,WAAW,EAAE;QACX,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ;KAClC;IACD,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE;CAC5B,CAAC,CAAC","sourcesContent":["import { Schema, Document, Types, Model, model } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\nimport { IMessage, MessageTC } from '../message/message.model';\n\nexport interface IMessageTemplate {\n  _id?: any;\n  messages: Array<Types.ObjectId | IMessage>;\n  templateId: string;\n  isActive?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type MessageTemplateDocument = Document<\n  Types.ObjectId,\n  any,\n  IMessageTemplate\n> &\n  IMessageTemplate;\n\nconst messageTemplateSchema = new Schema<IMessageTemplate>(\n  {\n    messages: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: 'Message',\n      },\n    ],\n    templateId: {\n      type: String,\n      trim: true,\n      unique: true,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  { timestamps: true }\n);\n\nmessageTemplateSchema.pre('save', async function (next) {\n  function generateId() {\n    const randomNumber = Math.random();\n\n    const partialId = String(randomNumber).substring(2);\n\n    const fullId = partialId.substring(0, 15);\n\n    return fullId;\n  }\n\n  if (!this.templateId) {\n    this.templateId = generateId();\n  }\n\n  next();\n});\n\nexport const MessageTemplate = model<IMessageTemplate, Model<IMessageTemplate>>(\n  'MessageTemplate',\n  messageTemplateSchema\n);\n\nexport const MessageTemplateTC = composeMongoose<MessageTemplateDocument>(\n  MessageTemplate as any\n);\n\nMessageTemplateTC.addRelation('messages', {\n  resolver: () => MessageTC.mongooseResolvers.dataLoaderMany(),\n  prepareArgs: {\n    _ids: (source) => source.messages,\n  },\n  projection: { messages: 1 },\n});\n"]}