{"version":3,"file":"messageTemplate.controller.js","sourceRoot":"/","sources":["components/messageTemplate/messageTemplate.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { MessageTemplateTC } from './messageTemplate.model';\nimport * as messageTemplateService from './messageTemplate.service';\n\nconst messageTemplateQueries = {\n  messageTemplate: MessageTemplateTC.mongooseResolvers.findOne(),\n  messageTemplates: MessageTemplateTC.mongooseResolvers.findMany({\n    limit: { defaultValue: 1000000 },\n  }),\n  messageTemplatePagination: MessageTemplateTC.mongooseResolvers.pagination(),\n};\n\nconst messageTemplateMutations = {\n  createMessageTemplate: MessageTemplateTC.mongooseResolvers.createOne(),\n  updateMessageTemplate: MessageTemplateTC.mongooseResolvers.updateOne(),\n};\n\n// REST Controller\n\nexport async function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const messageTemplates = await messageTemplateService.find({});\n    return res.status(200).json({ success: true, messageTemplates });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function getOne(req: Request, res: Response, next: NextFunction) {\n  try {\n    const messageTemplate = await messageTemplateService.findOne({\n      _id: req.params._id,\n    });\n    return res.status(200).json({ success: true, messageTemplate });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function createOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const messageTemplate = await messageTemplateService.create(req.body);\n    return res.status(200).json({ success: true, messageTemplate });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function updateOne(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const messageTemplate = await messageTemplateService.updateOne(\n      { _id: req.params._id },\n      req.body\n    );\n    return res.status(200).json({ success: true, messageTemplate });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function pagination(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const data = await messageTemplateService.pagination(\n      Number(req.params.page),\n      Number(req.params.perPage)\n    );\n    return res.status(200).json({ success: true, pagination: data });\n  } catch (err) {\n    res.status(500).json({ err: 'Internal server error', success: false });\n  }\n}\n\nexport async function customCreateMessageTemplate(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const messageTemplate =\n      await messageTemplateService.customCreateMessageTemplate(\n        req.body?.messages\n      );\n    return res.status(200).json({ success: true, messageTemplate });\n  } catch (error) {\n    return res\n      .status(500)\n      .json({ success: false, msg: 'Internal server error' });\n  }\n}\n\nexport { messageTemplateQueries, messageTemplateMutations };\n"]}