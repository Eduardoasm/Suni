{"version":3,"file":"messageTemplate.service.js","sourceRoot":"/","sources":["components/messageTemplate/messageTemplate.service.ts"],"names":[],"mappings":";;;;AAQA,mEAA4E;AAC5E,uCAA4C;AAC5C,4DAAmD;AAInD,SAAsB,OAAO,CAC3B,MAAsC,EACtC,UAAoD,EACpD,OAA+C;;QAE/C,OAAO,uCAAe,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;aACxD,QAAQ,CAAC,UAAU,CAAC;aACpB,IAAI,EAAE,CAAC;IACZ,CAAC;CAAA;AARD,0BAQC;AAED,SAAsB,IAAI,CACxB,MAAsC,EACtC,UAAoD,EACpD,OAA+C;;QAE/C,OAAO,uCAAe,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAClE,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAAqC,EACrC,MAAqE,EACrE,OAA+C;;QAE/C,OAAO,uCAAe,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACnE,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,eAAiC;;QAC5D,OAAO,uCAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IACjD,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAAsC,EACtC,UAAoD,EACpD,OAA+C;;QAE/C,OAAO,IAAA,qBAAa,EAClB,IAAI,EACJ,OAAO,EACP,uCAAe,EACf,MAAM,EACN,UAAU,EACV,OAAO,CACR,CAAC;IACJ,CAAC;CAAA;AAfD,gCAeC;AAED,SAAsB,2BAA2B,CAC/C,IAAmC;;QAEnC,MAAM,QAAQ,GAAG,MAAM,uBAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAEhD,MAAM,eAAe,GAAG,MAAM,uCAAe,CAAC,MAAM,CAAC;YACnD,QAAQ;SACT,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IACzB,CAAC;CAAA;AAVD,kEAUC","sourcesContent":["import mongoose from 'mongoose';\nimport type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { IMessageTemplate, MessageTemplate } from './messageTemplate.model';\nimport { paginateModel } from '../../utils';\nimport { Message } from '../message/message.model';\nimport { TCreateMessageTemplate } from './messageTemplate.dto';\nimport { Language } from '../language/language.model';\n\nexport async function findOne(\n  filter?: FilterQuery<IMessageTemplate>,\n  projection?: ProjectionType<IMessageTemplate> | null,\n  options?: QueryOptions<IMessageTemplate> | null\n) {\n  return MessageTemplate.findOne(filter, projection, options)\n    .populate('messages')\n    .exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<IMessageTemplate>,\n  projection?: ProjectionType<IMessageTemplate> | null,\n  options?: QueryOptions<IMessageTemplate> | null\n) {\n  return MessageTemplate.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<IMessageTemplate>,\n  update: UpdateQuery<IMessageTemplate> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<IMessageTemplate> | null\n) {\n  return MessageTemplate.updateOne(filter, update, options).exec();\n}\n\nexport async function create(messageTemplate: IMessageTemplate) {\n  return MessageTemplate.create(messageTemplate);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<IMessageTemplate>,\n  projection?: ProjectionType<IMessageTemplate> | null,\n  options?: QueryOptions<IMessageTemplate> | null\n) {\n  return paginateModel(\n    page,\n    perPage,\n    MessageTemplate,\n    filter,\n    projection,\n    options\n  );\n}\n\nexport async function customCreateMessageTemplate(\n  body: Array<TCreateMessageTemplate>\n) {\n  const messages = await Message.insertMany(body);\n\n  const messageTemplate = await MessageTemplate.create({\n    messages,\n  });\n\n  return messageTemplate;\n}\n"]}