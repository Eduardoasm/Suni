{"version":3,"file":"language.service.js","sourceRoot":"/","sources":["components/language/language.service.ts"],"names":[],"mappings":";;;;AAOA,qDAAuD;AACvD,uCAA4C;AAE5C,SAAsB,OAAO,CAC3B,MAA+B,EAC/B,UAA6C,EAC7C,OAAwC;;QAExC,OAAO,yBAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC9D,CAAC;CAAA;AAND,0BAMC;AAED,SAAsB,IAAI,CACxB,MAA+B,EAC/B,UAA6C,EAC7C,OAAwC;;QAExC,OAAO,yBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3D,CAAC;CAAA;AAND,oBAMC;AAED,SAAsB,SAAS,CAC7B,MAA8B,EAC9B,MAA8D,EAC9D,OAAwC;;QAExC,OAAO,yBAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC5D,CAAC;CAAA;AAND,8BAMC;AAED,SAAsB,MAAM,CAAC,QAAmB;;QAC9C,OAAO,yBAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,UAAU,CAC9B,IAAY,EACZ,OAAe,EACf,MAA+B,EAC/B,UAA6C,EAC7C,OAAwC;;QAExC,OAAO,IAAA,qBAAa,EAAC,IAAI,EAAE,OAAO,EAAE,yBAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC7E,CAAC;CAAA;AARD,gCAQC","sourcesContent":["import type {\n  FilterQuery,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n  UpdateWithAggregationPipeline,\n} from 'mongoose';\nimport { ILanguage, Language } from './language.model';\nimport { paginateModel } from '../../utils';\n\nexport async function findOne(\n  filter?: FilterQuery<ILanguage>,\n  projection?: ProjectionType<ILanguage> | null,\n  options?: QueryOptions<ILanguage> | null\n) {\n  return Language.findOne(filter, projection, options).exec();\n}\n\nexport async function find(\n  filter?: FilterQuery<ILanguage>,\n  projection?: ProjectionType<ILanguage> | null,\n  options?: QueryOptions<ILanguage> | null\n) {\n  return Language.find(filter, projection, options).exec();\n}\n\nexport async function updateOne(\n  filter: FilterQuery<ILanguage>,\n  update: UpdateQuery<ILanguage> | UpdateWithAggregationPipeline,\n  options?: QueryOptions<ILanguage> | null\n) {\n  return Language.updateOne(filter, update, options).exec();\n}\n\nexport async function create(language: ILanguage) {\n  return Language.create(language);\n}\n\nexport async function pagination(\n  page: number,\n  perPage: number,\n  filter?: FilterQuery<ILanguage>,\n  projection?: ProjectionType<ILanguage> | null,\n  options?: QueryOptions<ILanguage> | null\n) {\n  return paginateModel(page, perPage, Language, filter, projection, options);\n}\n"]}