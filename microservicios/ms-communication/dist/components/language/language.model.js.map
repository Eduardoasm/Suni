{"version":3,"file":"language.model.js","sourceRoot":"/","sources":["components/language/language.model.ts"],"names":[],"mappings":";;;AAAA,uCAAiE;AACjE,uEAA2D;AAc3D,MAAM,cAAc,GAAG,IAAI,iBAAM,CAC/B;IACE,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;KACb;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEW,QAAA,QAAQ,GAAG,IAAA,gBAAK,EAC3B,UAAU,EACV,cAAc,CACf,CAAC;AAEW,QAAA,UAAU,GAAG,IAAA,0CAAe,EAAmB,gBAAe,CAAC,CAAC","sourcesContent":["import { Schema, Document, Types, Model, model } from 'mongoose';\nimport { composeMongoose } from 'graphql-compose-mongoose';\n\nexport interface ILanguage {\n  _id?: any;\n  code: string;\n  name: string;\n  isActive?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport type LanguageDocument = Document<Types.ObjectId, any, ILanguage> &\n  ILanguage;\n\nconst languageSchema = new Schema<ILanguage>(\n  {\n    code: {\n      type: String,\n    },\n    name: {\n      type: String,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  { timestamps: true }\n);\n\nexport const Language = model<ILanguage, Model<ILanguage>>(\n  'Language',\n  languageSchema\n);\n\nexport const LanguageTC = composeMongoose<LanguageDocument>(Language as any);\n"]}